--Purpose: PATCH FOR THIRD PARTY TABLE ALTERATION TO MEET THE ENTITY NAME.  
--Author: Priyank Gupta
--Created On: Date 20 Oct 2008

ALTER TABLE THIRDPARTY RENAME TO THIRD_PARTY
/
ALTER TABLE THIRD_PARTY RENAME COLUMN THIRDPARTY_NUMBER TO THIRD_PARTY_NUMBER
/
insert into role (id, name, version) values ((select max(id)+1 from role),'baserole',1)
/
DECLARE
CURSOR C1 IS
SELECT *
FROM USER_ROLES UR WHERE
ROLES = 1;
V_NEW_ROLE_ID NUMBER;
BEGIN
	 SELECT ID
	 INTO V_NEW_ROLE_ID
	 FROM ROLE 
	 WHERE NAME = 'baserole';
	 
	 FOR EACH_REC IN C1
	 LOOP
	 
	 	 INSERT INTO USER_ROLES VALUES (EACH_REC.ORG_USER, V_NEW_ROLE_ID);
		 COMMIT;
	 END LOOP;
END;
/
INSERT INTO JBPM_SWIMLANE VALUES (HIBERNATE_SEQUENCE.NEXTVAL, 'baserole',NULL,NULL,(SELECT ID_ FROM JBPM_DELEGATION WHERE CONFIGURATION_ LIKE '%actor=ognl{claim.filedBy.name}%' AND PROCESSDEFINITION_ IN (SELECT ID_ FROM JBPM_PROCESSDEFINITION WHERE NAME_ = 'ClaimSubmission')), (SELECT TASKMGMTDEFINITION_ FROM JBPM_SWIMLANE WHERE NAME_ = 'dsm'))
/
UPDATE JBPM_TASK SET SWIMLANE_ = (SELECT ID_ FROM JBPM_SWIMLANE WHERE NAME_ = 'baserole') WHERE NAME_ = 'Draft Claim'
/
UPDATE JBPM_TASK SET SWIMLANE_ = (SELECT ID_ FROM JBPM_SWIMLANE WHERE NAME_ = 'baserole') WHERE NAME_ = 'Forwarded'
/
Commit
/
ALTER TABLE CLAIM DROP CONSTRAINT CLAIM_FOR_DEALER_FK
/
ALTER TABLE TWMS_OWNER_JBPM.CLAIM ADD CONSTRAINT CLAIM_F0R_DEALER_FK FOREIGN KEY (FOR_DEALER) REFERENCES TWMS_OWNER_JBPM.SERVICE_PROVIDER (ID) ENABLE VALIDATE
/
INSERT INTO ROLE (ID, NAME, VERSION) VALUES ((SELECT MAX(ID)+1 FROM ROLE),'inventorysearch',1)
/
INSERT INTO ROLE (ID, NAME, VERSION) VALUES ((SELECT MAX(ID)+1 FROM ROLE),'inventorylisting',1)
/
INSERT INTO ROLE (ID, NAME, VERSION) VALUES ((SELECT MAX(ID)+1 FROM ROLE),'dealersalesadmin',1)
/
INSERT INTO ROLE (ID, NAME, VERSION) VALUES ((SELECT MAX(ID)+1 FROM ROLE),'dealerpartreturn',1)
/
INSERT INTO ROLE (ID, NAME, VERSION) VALUES ((SELECT MAX(ID)+1 FROM ROLE),'thirdpartypartretun',1)
/
CREATE OR REPLACE PROCEDURE ASSIGN_USER_ROLE_TO_USER(v_current_user_role VARCHAR2, v_new_user_role_to_assign VARCHAR2)
AS
	CURSOR ALL_USER_FOR_ROLE 
	IS
		SELECT UR.ORG_USER
		FROM USER_ROLES UR, ROLE R
		WHERE
			UR.ROLES = R.ID AND
			UPPER(R.NAME) = upper(v_current_user_role);
	
	--GLOBAL BEAUTIFUL VARIABLES
	v_new_role_id 				NUMBER;
	v_var						NUMBER;
	 
	BEGIN
	
		--GET THE ID FOR THE NEW ROLE
		SELECT ID
		INTO v_new_role_id
		FROM ROLE
		WHERE
			UPPER(NAME) = UPPER(v_new_user_role_to_assign); 
		
		FOR EACH_RECORD IN ALL_USER_FOR_ROLE
		LOOP
			BEGIN
				
				--CHECK IF A RECORD ALREADY EXIST FOR NEW ROLE. IF IT DOES WE NEED NOT ADD A MAPPING ELSE WE DO NEED TO.
				SELECT 1
				INTO v_var
				FROM USER_ROLES
				WHERE
					ORG_USER = EACH_RECORD.ORG_USER AND
					ROLES = v_new_role_id;
			
			EXCEPTION
			WHEN NO_DATA_FOUND
			THEN
				BEGIN
					--SINCE NO DATA FOUND EXCEPTION WAS THROWN AND A MAPPIND DOES NOT EXIST; WE NEED TO ADD A MAPPING
					--WITH THE USER AND NEW ROLE.
					INSERT INTO  
					USER_ROLES
					(
						ORG_USER,
						ROLES
					)
					VALUES
					(	
						EACH_RECORD.ORG_USER,
						v_new_role_id
					);					
				END;			
			END;
			
			--LETS COMMIT NOW
			COMMIT;
		END LOOP;
	--AND FINALLY WE ARE DONE WITH ALL THE USERS
	END;
/
--dealer,baserole,admin,processor,dsmAdvisor,recoveryProcessor,inventoryAdmin
--the above listed all guys should have basic inventory search role
BEGIN
ASSIGN_USER_ROLE_TO_USER('dealer','inventorysearch');
END;
/
BEGIN
ASSIGN_USER_ROLE_TO_USER('admin','inventorysearch');
END;
/
BEGIN
ASSIGN_USER_ROLE_TO_USER('processor','inventorysearch');
END;
/
BEGIN
ASSIGN_USER_ROLE_TO_USER('dsmAdvisor','inventorysearch');
END;
/
BEGIN
ASSIGN_USER_ROLE_TO_USER('recoveryProcessor','inventorysearch');
END;
/
BEGIN
ASSIGN_USER_ROLE_TO_USER('inventoryAdmin','inventorysearch');
END;
/
--dealer
BEGIN
ASSIGN_USER_ROLE_TO_USER('dealer','inventorylisting');
END;
/
INSERT INTO ROLE VALUES ((select max(id)+1 from role), 'thirdPartyPrivilege',1,SYSDATE,'ROLE FOR THIRD PARTY PRIVILEGES',NULL,NULL,NULL,NULL,NULL)
/
BEGIN
ASSIGN_USER_ROLE_TO_USER('dealer','thirdPartyPrivilege');
END;
/
