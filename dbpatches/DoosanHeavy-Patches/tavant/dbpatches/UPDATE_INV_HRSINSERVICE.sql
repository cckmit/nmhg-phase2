create or replace
TRIGGER UPDATE_INV_HRSINSERVICE
AFTER INSERT OR UPDATE
ON CLAIM
REFERENCING NEW AS newRow
FOR EACH ROW
DECLARE
  v_item_hrs INVENTORY_ITEM.HOURS_ON_MACHINE%TYPE;
  V_CLAIMED_ITEM_HRS CLAIMED_ITEM.HOURS_IN_SERVICE%TYPE;
  V_ACTIVE_CLM_ADT_STATE varchar2(100);
CURSOR itemIds IS
            SELECT ITEM_REF_INV_ITEM  FROM CLAIMED_ITEM WHERE CLAIM= :NEWROW.ID AND ITEM_REF_SZED=1;

BEGIN
BEGIN
  SELECT STATE INTO V_ACTIVE_CLM_ADT_STATE FROM CLAIM_AUDIT WHERE ID = :NEWROW.ACTIVE_CLAIM_AUDIT;
EXCEPTION WHEN OTHERS THEN
  v_ACTIVE_CLM_ADT_STATE:='DRAFT';
end;
 IF(V_ACTIVE_CLM_ADT_STATE='ACCEPTED') THEN
BEGIN
	FOR REC IN itemIds LOOP
	SELECT HOURS_ON_MACHINE INTO v_item_hrs FROM INVENTORY_ITEM WHERE id=REC. ITEM_REF_INV_ITEM;
	SELECT  HOURS_IN_SERVICE  INTO v_claimed_item_hrs FROM CLAIMED_ITEM WHERE CLAIM=:newRow.id AND ITEM_REF_INV_ITEM=REC.ITEM_REF_INV_ITEM;
	IF(	v_claimed_item_hrs>v_item_hrs) THEN

		UPDATE INVENTORY_ITEM
		SET  HOURS_ON_MACHINE= v_claimed_item_hrs
		WHERE id=REC. ITEM_REF_INV_ITEM;

		UPDATE INVENTORY_TRANSACTION A
		SET HOURS_ON_MACHINE=v_claimed_item_hrs
		WHERE TRANSACTION_ORDER = (SELECT MAX(TRANSACTION_ORDER) FROM INVENTORY_TRANSACTION WHERE
		TRANSACTED_ITEM = REC.ITEM_REF_INV_ITEM)
		and a.TRANSACTED_ITEM = REC.ITEM_REF_INV_ITEM;
	end if ;
	end LOOP;
END;
END IF;
END;