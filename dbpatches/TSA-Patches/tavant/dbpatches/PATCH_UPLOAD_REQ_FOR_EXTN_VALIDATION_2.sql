CREATE OR REPLACE
PROCEDURE UPLOAD_REQ_FOR_EXTN_VALIDATION
AS
  CURSOR ALL_RECORDS
  IS
    SELECT * FROM STG_REQUESTS_FOR_EXTENSION WHERE ERROR_STATUS IS NULL;
  CURSOR ALL_REQUESTS
  IS
    SELECT SERIAL_NUMBER,
      ITEM_NUMBER,
      BUSINESS_UNIT_INFO
    FROM STG_REQUESTS_FOR_EXTENSION
    WHERE ERROR_CODE IS NULL
    GROUP BY SERIAL_NUMBER,
      ITEM_NUMBER,
      BUSINESS_UNIT_INFO;
  CURSOR INVALID_REQUESTS
  IS
    SELECT SERIAL_NUMBER,
      ITEM_NUMBER,
      BUSINESS_UNIT_INFO
    FROM STG_REQUESTS_FOR_EXTENSION
    WHERE ERROR_STATUS = 'N'
    GROUP BY SERIAL_NUMBER,
      ITEM_NUMBER,
      BUSINESS_UNIT_INFO;
  V_ERROR_CODE   VARCHAR2(4000):=NULL;
  V_FILING_PARTY NUMBER;
  V_DELIVERY_DATE DATE;
  V_FILE_UPLOAD_MGT_ID NUMBER        := 0;
  V_SUCCESS_COUNT      NUMBER        := 0;
  V_ERROR_COUNT        NUMBER        := 0;
  V_COUNT              NUMBER        := 0;
  V_SERIAL_ID          NUMBER(19)    := 0;
  V_POLICY_END_DATE    VARCHAR2(10)  := NULL;
  V_VAR                NUMBER        :=0;
  V_VARCHAR            VARCHAR2(255) := NULL;
BEGIN
  UPDATE STG_REQUESTS_FOR_EXTENSION
  SET ERROR_CODE       = 'RE001',
    ERROR_STATUS       = 'N'
  WHERE DEALER_NUMBER IS NULL;
  UPDATE STG_REQUESTS_FOR_EXTENSION TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'RE002', ';RE002'),
    ERROR_STATUS = 'N'
  WHERE NOT EXISTS
    (SELECT 1
    FROM SERVICE_PROVIDER SP,
      BU_ORG_MAPPING BOM
    WHERE SP.ID                    = BOM.ORG
    AND BOM.BU                     = TAV.BUSINESS_UNIT_INFO
    AND SP.SERVICE_PROVIDER_NUMBER = TAV.DEALER_NUMBER
    )
  AND TAV.DEALER_NUMBER IS NOT NULL;
  UPDATE STG_REQUESTS_FOR_EXTENSION
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'RE015', ';RE015'),
    ERROR_STATUS            = 'N'
  WHERE BUSINESS_UNIT_INFO IS NULL;
  UPDATE STG_REQUESTS_FOR_EXTENSION TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'RE016', ';RE016'),
    ERROR_STATUS                                = 'N'
  WHERE INSTR(NVL(TAV.ERROR_CODE,'X'), 'RE015') = 0
  AND NOT EXISTS
    ( SELECT 1 FROM BUSINESS_UNIT WHERE NAME = TAV.BUSINESS_UNIT_INFO
    )
  AND TAV.BUSINESS_UNIT_INFO IS NOT NULL;
  UPDATE STG_REQUESTS_FOR_EXTENSION
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'RE024', ';RE024'),
    ERROR_STATUS          = 'N'
  WHERE ACTION_PERFORMED IS NULL;
  UPDATE STG_REQUESTS_FOR_EXTENSION TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'RE025', ';RE025'),
    ERROR_STATUS                         = 'N'
  WHERE UPPER(TAV.ACTION_PERFORMED) NOT IN ('APPROVED', 'FORWARDED', 'DENIED');
  UPDATE STG_REQUESTS_FOR_EXTENSION
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'RE003', ';RE003'),
    ERROR_STATUS       = 'N'
  WHERE SERIAL_NUMBER IS NULL;
  COMMIT;
  UPDATE STG_REQUESTS_FOR_EXTENSION
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'RE005', ';RE005'),
    ERROR_STATUS     = 'N'
  WHERE ITEM_NUMBER IS NULL;
  UPDATE STG_REQUESTS_FOR_EXTENSION TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'RE006', ';RE006'),
    ERROR_STATUS = 'N'
  WHERE NOT EXISTS
    (SELECT I.ID
    FROM ITEM I
    WHERE I.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
    AND I.OWNED_BY             = 1
    AND I.ITEM_NUMBER          = TAV.ITEM_NUMBER
    AND I.D_ACTIVE             = 1
    )
  AND ITEM_NUMBER IS NOT NULL;
  COMMIT;
  UPDATE STG_REQUESTS_FOR_EXTENSION
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'RE007', ';RE007'),
    ERROR_STATUS       = 'N'
  WHERE DELIVERY_DATE IS NULL;
  UPDATE STG_REQUESTS_FOR_EXTENSION
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'RE008', ';RE008'),
    ERROR_STATUS     = 'N'
  WHERE POLICY_CODE IS NULL;
  UPDATE STG_REQUESTS_FOR_EXTENSION TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'RE009', ';RE009'),
    ERROR_STATUS     = 'N'
  WHERE POLICY_CODE IS NOT NULL
  AND NOT EXISTS
    (SELECT 1
    FROM POLICY_DEFINITION PD
    WHERE PD.CODE             = TAV.POLICY_CODE
    AND PD.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
    AND PD.D_ACTIVE           = 1
    );
  UPDATE STG_REQUESTS_FOR_EXTENSION TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'RE027', ';RE027'),
    ERROR_STATUS            = 'N'
  WHERE TAV.COMMENTS       IS NULL
  AND TAV.ACTION_PERFORMED IN ('DENIED', 'FORWARDED');
  UPDATE STG_REQUESTS_FOR_EXTENSION
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'RE010', ';RE010'),
    ERROR_STATUS         = 'N'
  WHERE POLICY_END_DATE IS NULL;
  UPDATE STG_REQUESTS_FOR_EXTENSION TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'RE004', ';RE004'),
    ERROR_STATUS                                 = 'N'
  WHERE INSTR(NVL(TAV.ERROR_CODE, 'X'), 'RE003') = 0
  AND INSTR(NVL(TAV.ERROR_CODE, 'X'), 'RE006')   = 0
  AND INSTR(NVL(TAV.ERROR_CODE, 'X'), 'RE016')   = 0
  AND NOT EXISTS
    (SELECT 1
    FROM INVENTORY_ITEM II,
      ITEM I
    WHERE II.OF_TYPE          = I.ID
    AND II.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
    AND I.BUSINESS_UNIT_INFO  = TAV.BUSINESS_UNIT_INFO
    AND II.SERIAL_NUMBER      = TAV.SERIAL_NUMBER
    AND I.ITEM_NUMBER         = TAV.ITEM_NUMBER
    AND II.D_ACTIVE           = 1
    AND II.TYPE               = 'RETAIL'
    );
  UPDATE STG_REQUESTS_FOR_EXTENSION TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'RE026', ';RE026'),
    ERROR_STATUS                                 = 'N'
  WHERE INSTR(NVL(TAV.ERROR_CODE, 'X'), 'RE002') = 0
  AND INSTR(NVL(TAV.ERROR_CODE, 'X'), 'RE004')   = 0
  AND INSTR(NVL(TAV.ERROR_CODE, 'X'), 'RE006')   = 0
  AND NOT EXISTS
    (SELECT 1
    FROM SERVICE_PROVIDER SP,
      REQUEST_WNTY_CVG REQ,
      INVENTORY_ITEM II,
      ITEM I
    WHERE SP.ID                    = REQ.REQUESTED_BY
    AND REQ.INVENTORY_ITEM         = II.ID
    AND II.SERIAL_NUMBER           = TAV.SERIAL_NUMBER
    AND II.D_ACTIVE                = 1
    AND II.OF_TYPE                 = I.ID
    AND I.ITEM_NUMBER              = TAV.ITEM_NUMBER
    AND I.BUSINESS_UNIT_INFO       = TAV.BUSINESS_UNIT_INFO
    AND SP.SERVICE_PROVIDER_NUMBER = TAV.DEALER_NUMBER
    )
  AND TAV.DEALER_NUMBER IS NOT NULL;
  COMMIT;
  FOR EACH_REC IN ALL_RECORDS
  LOOP
    BEGIN
      V_ERROR_CODE := NULL;
      SELECT II.id,
        ii.delivery_date
      INTO V_SERIAL_ID,
        V_DELIVERY_DATE
      FROM INVENTORY_ITEM II,
        ITEM I
      WHERE II.OF_TYPE          = I.ID
      AND II.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO
      AND I.BUSINESS_UNIT_INFO  = EACH_REC.BUSINESS_UNIT_INFO
      AND II.SERIAL_NUMBER      = EACH_REC.SERIAL_NUMBER
      AND I.ITEM_NUMBER         = EACH_REC.ITEM_NUMBER
      AND II.D_ACTIVE           = 1
      AND II.TYPE               = 'RETAIL';
      IF NOT (COMMON_UTILS.ISVALIDDATE(EACH_REC.DELIVERY_DATE)) THEN
        V_ERROR_CODE                              := common_utils.addErrorMessage(V_ERROR_CODE, 'RE013');
      ELSIF (TO_CHAR(V_DELIVERY_DATE, 'YYYYMMDD') <> EACH_REC.DELIVERY_DATE) THEN
        V_ERROR_CODE                              := COMMON_UTILS.ADDERRORMESSAGE(V_ERROR_CODE, 'RE014');
      END IF;
      SELECT TO_CHAR(PLCYA.TILL_DATE, 'YYYYMMDD')
      INTO V_POLICY_END_DATE
      FROM POLICY_DEFINITION PLCYDFN,
        WARRANTY WNTY,
        POLICY PLCY,
        POLICY_AUDIT PLCYA
      WHERE WNTY.FOR_ITEM        = V_SERIAL_ID
      AND PLCY.WARRANTY          = WNTY.ID
      AND PLCY.POLICY_DEFINITION = PLCYDFN.ID
      AND PLCYDFN.CODE           = EACH_REC.POLICY_CODE
      AND PLCY.POLICY_DEFINITION = PLCYDFN.ID
      AND PLCYA.FOR_POLICY       = PLCY.ID
      AND PLCYA.ID               =
        (SELECT MAX(PA.ID) FROM POLICY_AUDIT PA WHERE PA.FOR_POLICY = PLCY.ID
        )
      AND ROWNUM = 1;
      IF NOT (COMMON_UTILS.ISVALIDDATE(EACH_REC.POLICY_END_DATE)) THEN
        V_ERROR_CODE                  := common_utils.addErrorMessage(V_ERROR_CODE, 'RE017');
      ELSIF (EACH_REC.POLICY_END_DATE <> V_POLICY_END_DATE) THEN
        V_ERROR_CODE                  := common_utils.addErrorMessage(V_ERROR_CODE, 'RE018');
      END IF;
      IF (EACH_REC.ACTION_PERFORMED = 'APPROVED' AND EACH_REC.GOODWILL_POLICY_CODE IS NOT NULL) THEN
        BEGIN
          SELECT 1
          INTO V_VAR
          FROM POLICY_DEFINITION PD
          WHERE PD.CODE             = EACH_REC.GOODWILL_POLICY_CODE
          AND PD.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO
          AND PD.D_ACTIVE           = 1
          AND PD.WARRANTY_TYPE      = 'GOODWILL';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_ERROR_CODE := COMMON_UTILS.ADDERRORMESSAGE(V_ERROR_CODE, 'RE011');
        END;
        IF (EACH_REC.GOODWILL_POLICY_END_DATE IS NULL) THEN
          V_ERROR_CODE                        := COMMON_UTILS.ADDERRORMESSAGE(V_ERROR_CODE, 'RE012');
        ELSIF NOT (COMMON_UTILS.ISVALIDDATE(EACH_REC.GOODWILL_POLICY_END_DATE)) THEN
          V_ERROR_CODE                                               := COMMON_UTILS.ADDERRORMESSAGE(V_ERROR_CODE, 'RE020');
        ELSIF TO_DATE(EACH_REC.GOODWILL_POLICY_END_DATE, 'YYYYMMDD') <= V_DELIVERY_DATE THEN
          V_ERROR_CODE                                               := COMMON_UTILS.ADDERRORMESSAGE(V_ERROR_CODE, 'RE022');
        END IF;
        IF (EACH_REC.HOURS_COVERED IS NULL) THEN
          V_ERROR_CODE             := COMMON_UTILS.ADDERRORMESSAGE(V_ERROR_CODE, 'RE028');
        ELSIF NOT (COMMON_UTILS.ISNUMBER(EACH_REC.HOURS_COVERED)) THEN
          V_ERROR_CODE               := COMMON_UTILS.ADDERRORMESSAGE(V_ERROR_CODE, 'RE029');
        ELSIF EACH_REC.HOURS_COVERED <= 0 THEN
          V_ERROR_CODE               := COMMON_UTILS.ADDERRORMESSAGE(V_ERROR_CODE, 'RE029');
        END IF;
      END IF;
      IF V_ERROR_CODE IS NULL AND EACH_REC.ERROR_CODE IS NULL THEN
        UPDATE STG_REQUESTS_FOR_EXTENSION
        SET ERROR_STATUS = 'Y',
          ERROR_CODE     = NULL
        WHERE ID         = EACH_REC.ID;
      ELSE
        UPDATE STG_REQUESTS_FOR_EXTENSION
        SET ERROR_STATUS = 'N',
          ERROR_CODE     = ERROR_CODE
          || DECODE (ERROR_CODE,NULL, V_ERROR_CODE,';'
          || V_ERROR_CODE)
        WHERE ID = EACH_REC.ID;
      END IF;
      COMMIT;
    EXCEPTION
    WHEN OTHERS THEN
      V_ERROR_CODE := COMMON_UTILS.ADDERRORMESSAGE(V_ERROR_CODE, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      UPDATE STG_REQUESTS_FOR_EXTENSION
      SET ERROR_STATUS = 'N',
        ERROR_CODE     = ERROR_CODE
        || DECODE (ERROR_CODE,NULL, V_ERROR_CODE,';'
        || V_ERROR_CODE)
      WHERE ID = EACH_REC.ID;
      COMMIT;
    END;
  END LOOP;
  FOR EACH_VALID_REQ IN ALL_REQUESTS
  LOOP
    BEGIN
      V_ERROR_CODE := NULL;
      SELECT TAV.ACTION_PERFORMED
      INTO V_VARCHAR
      FROM STG_REQUESTS_FOR_EXTENSION TAV
      WHERE TAV.SERIAL_NUMBER    = EACH_VALID_REQ.SERIAL_NUMBER
      AND TAV.ITEM_NUMBER        = EACH_VALID_REQ.ITEM_NUMBER
      AND TAV.BUSINESS_UNIT_INFO = EACH_VALID_REQ.BUSINESS_UNIT_INFO
      GROUP BY TAV.ACTION_PERFORMED;
      BEGIN
        SELECT 1
        INTO V_VAR
        FROM STG_REQUESTS_FOR_EXTENSION TAV
        WHERE TAV.SERIAL_NUMBER       = EACH_VALID_REQ.SERIAL_NUMBER
        AND TAV.ITEM_NUMBER           = EACH_VALID_REQ.ITEM_NUMBER
        AND TAV.BUSINESS_UNIT_INFO    = EACH_VALID_REQ.BUSINESS_UNIT_INFO
        AND TAV.GOODWILL_POLICY_CODE IS NOT NULL
        AND TAV.ACTION_PERFORMED      = 'APPROVED'
        AND ROWNUM                    = 1;
        BEGIN
          SELECT TAV.GOODWILL_POLICY_CODE
          INTO V_VARCHAR
          FROM STG_REQUESTS_FOR_EXTENSION TAV
          WHERE TAV.SERIAL_NUMBER       = EACH_VALID_REQ.SERIAL_NUMBER
          AND TAV.ITEM_NUMBER           = EACH_VALID_REQ.ITEM_NUMBER
          AND TAV.BUSINESS_UNIT_INFO    = EACH_VALID_REQ.BUSINESS_UNIT_INFO
          AND TAV.GOODWILL_POLICY_CODE IS NOT NULL
          AND TAV.ACTION_PERFORMED      = 'APPROVED'
          GROUP BY TAV.GOODWILL_POLICY_CODE
          HAVING COUNT(*) > 1;
          V_ERROR_CODE   := COMMON_UTILS.ADDERRORMESSAGE(V_ERROR_CODE, 'RE030');
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
        END;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        V_ERROR_CODE := COMMON_UTILS.ADDERRORMESSAGE(V_ERROR_CODE, 'RE023');
      END;
    EXCEPTION
    WHEN TOO_MANY_ROWS THEN
      V_ERROR_CODE := COMMON_UTILS.ADDERRORMESSAGE(V_ERROR_CODE, 'RE021');
    END;
    IF V_ERROR_CODE IS NOT NULL THEN
      UPDATE STG_REQUESTS_FOR_EXTENSION
      SET ERROR_STATUS = 'N',
        ERROR_CODE     = ERROR_CODE
        || DECODE (ERROR_CODE,NULL, V_ERROR_CODE,';'
        || V_ERROR_CODE)
      WHERE SERIAL_NUMBER    = EACH_VALID_REQ.SERIAL_NUMBER
      AND ITEM_NUMBER        = EACH_VALID_REQ.ITEM_NUMBER
      AND BUSINESS_UNIT_INFO = EACH_VALID_REQ.BUSINESS_UNIT_INFO;
    END IF;
    COMMIT;
  END LOOP;
  FOR EACH_INVALID_REQ IN INVALID_REQUESTS
  LOOP
    BEGIN
      UPDATE STG_REQUESTS_FOR_EXTENSION
      SET ERROR_CODE = ERROR_CODE
        || DECODE(ERROR_CODE, NULL, 'RE019', ';RE019'),
        ERROR_STATUS         = 'N'
      WHERE ERROR_CODE      IS NULL
      AND SERIAL_NUMBER      = EACH_INVALID_REQ.SERIAL_NUMBER
      AND ITEM_NUMBER        = EACH_INVALID_REQ.ITEM_NUMBER
      AND BUSINESS_UNIT_INFO = EACH_INVALID_REQ.BUSINESS_UNIT_INFO;
    END;
  END LOOP;
  BEGIN
    SELECT file_upload_mgt_id
    INTO v_file_upload_mgt_id
    FROM STG_REQUESTS_FOR_EXTENSION
    WHERE ROWNUM = 1;
    BEGIN
      SELECT COUNT(*)
      INTO v_success_count
      FROM STG_REQUESTS_FOR_EXTENSION
      WHERE file_upload_mgt_id = v_file_upload_mgt_id
      AND ERROR_STATUS         = 'Y';
    EXCEPTION
    WHEN OTHERS THEN
      v_success_count := 0;
    END;
    BEGIN
      SELECT COUNT(*)
      INTO v_error_count
      FROM STG_REQUESTS_FOR_EXTENSION
      WHERE file_upload_mgt_id = v_file_upload_mgt_id
      AND ERROR_STATUS         = 'N';
    EXCEPTION
    WHEN OTHERS THEN
      v_error_count := 0;
    END;
    SELECT COUNT(*)
    INTO v_count
    FROM STG_REQUESTS_FOR_EXTENSION
    WHERE file_upload_mgt_id = v_file_upload_mgt_id;
    UPDATE file_upload_mgt
    SET success_records= v_success_count,
      error_records    = v_error_count,
      total_records    = v_count
    WHERE id           = v_file_upload_mgt_id;
  EXCEPTION
  WHEN OTHERS THEN
    v_error_code := SUBSTR(SQLERRM, 1, 4000);
    UPDATE file_upload_mgt
    SET error_message = v_error_code
    WHERE id          = v_file_upload_mgt_id;
  END;
  COMMIT;
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
END;