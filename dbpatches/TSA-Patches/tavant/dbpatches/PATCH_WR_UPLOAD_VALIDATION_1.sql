--Purpose    : WR Validation procedure
--Author     : Rahul Katariya
--Created On : 08/07/2010
--Impact     : WR Upload

CREATE OR REPLACE
PROCEDURE UPLOAD_WARRANTY_REG_VALIDATION
AS
  CURSOR ALL_REC
  IS
    SELECT * FROM STG_WARRANTY_REGISTRATIONS WHERE ERROR_STATUS IS NULL;
  V_ERROR_CODE             VARCHAR2(4000):=NULL;
  V_ALLOW_OTHER_DLRS_STOCK VARCHAR2(10);
  V_UNIT_OWNER_TYPE        VARCHAR(50);
  V_CAP_INST_DLR_DATE      VARCHAR2(10);
  V_ADD_INFO_APPLICABLE    VARCHAR2(10);
  V_COMP_PART_ARRAY DBMS_UTILITY.UNCL_ARRAY;
  V_COMP_INSTALL_ARRAY DBMS_UTILITY.UNCL_ARRAY;
  V_COMP_SERIAL_ARRAY DBMS_UTILITY.UNCL_ARRAY;
  V_POL_ARRAY DBMS_UTILITY.UNCL_ARRAY;
  V_COMP_PART_COUNT    NUMBER := 0;
  V_COMP_INSTALL_COUNT NUMBER := 0;
  V_COMP_SERIAL_COUNT  NUMBER := 0;
  V_POL_COUNT          NUMBER;
  V_COMMIT_COUNT       NUMBER;
  V_VAR                NUMBER;
  V_FILING_PARTY       NUMBER;
  V_SHIP_DATE DATE;
  V_FILE_UPLOAD_MGT_ID NUMBER     := 0;
  V_SUCCESS_COUNT      NUMBER     := 0;
  V_ERROR_COUNT        NUMBER     := 0;
  V_COUNT              NUMBER     := 0;
  V_SERIAL_ID          NUMBER(19) := 0;
  V_CURR_OWNER_ID      NUMBER(19) := 0;
  V_COMPONENT_ID       NUMBER(19) := 0;
  V_PENDING_WR         NUMBER     := 0;
BEGIN
  -- VALIDATE THE BUSINESS UNIT INFO FOR NULL
  UPDATE STG_WARRANTY_REGISTRATIONS
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR047', ';WR047'),
    ERROR_STATUS            = 'N'
  WHERE BUSINESS_UNIT_INFO IS NULL;
  -- VALIDATE THE BUSINESS UNIT INFO IS VALID
  UPDATE STG_WARRANTY_REGISTRATIONS TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR048', ';WR048'),
    ERROR_STATUS = 'N'
  WHERE NOT EXISTS
    ( SELECT 1 FROM BUSINESS_UNIT WHERE NAME = TAV.BUSINESS_UNIT_INFO
    )
  AND TAV.BUSINESS_UNIT_INFO IS NOT NULL;
  --ERROR CODES: DEALER_NUMBER_NULL
  --VALIDATE THAT DEALER NUMBER IS NOT NULL
  UPDATE STG_WARRANTY_REGISTRATIONS
  SET ERROR_CODE       = 'WR001',
    ERROR_STATUS       = 'N'
  WHERE DEALER_NUMBER IS NULL;
  --ERROR CODE: DEALER_NUMBER_INVALID
  --VALIDATE THAT DEALER NUMBER IS VALID
  UPDATE STG_WARRANTY_REGISTRATIONS TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR002', ';WR002'),
    ERROR_STATUS = 'N'
  WHERE NOT EXISTS
    (SELECT 1
    FROM SERVICE_PROVIDER SP,
      BU_ORG_MAPPING BOM
    WHERE SP.ID                    = BOM.ORG
    AND BOM.BU                     = TAV.BUSINESS_UNIT_INFO
    AND SP.SERVICE_PROVIDER_NUMBER = TAV.DEALER_NUMBER
    )
  AND TAV.DEALER_NUMBER IS NOT NULL;
  --ERROR CODES: CUSTOMER_TYPE_NULL
  --VALIDATE THAT CUSTOMER TYPE IS NOT NULL
  UPDATE STG_WARRANTY_REGISTRATIONS
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR003', ';WR003'),
    ERROR_STATUS       = 'N'
  WHERE CUSTOMER_TYPE IS NULL;
  --ERROR CODES: CUSTOMER_TYPE_INVALID
  --VALIDATE THAT CUSTOMER TYPE IS VALID
  UPDATE STG_WARRANTY_REGISTRATIONS TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR004', ';WR004'),
    ERROR_STATUS                      = 'N'
  WHERE upper(TAV.CUSTOMER_TYPE) NOT IN
    (SELECT upper(CFO.VALUE)
    FROM CONFIG_PARAM_OPTION CFO,
      CONFIG_VALUE CV,
      CONFIG_PARAM CP
    WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
    AND CV.CONFIG_PARAM       = CP.ID
    AND CP.NAME               = 'customersFilingDR'
    AND CV.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
    )
  AND TAV.CUSTOMER_TYPE IS NOT NULL;
  COMMIT;
  --ERROR CODE: CUSTOMER_NUMBER_NULL
  --VALIDATE THAT CUSTOMER NUMBER IS NOT NULL
  UPDATE STG_WARRANTY_REGISTRATIONS
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR005', ';WR005'),
    ERROR_STATUS         = 'N'
  WHERE CUSTOMER_NUMBER IS NULL;
  --ERROR CODE: CUSTOMER_NUMBER_INVALID
  --VALIDATE THAT CUSTOMER_NUMBER IS VALID
  UPDATE STG_WARRANTY_REGISTRATIONS TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR006', ';WR006'),
    ERROR_STATUS = 'N'
  WHERE NOT EXISTS
    (SELECT C.CUSTOMER_ID
    FROM CUSTOMER C
    WHERE C.CUSTOMER_ID = TAV.CUSTOMER_NUMBER
    )
  AND TAV.CUSTOMER_NUMBER IS NOT NULL;
  --ERROR CODE: END_CUST_ADD_BOOK_DOES_NOT_EXIST
  --VALIDATE THAT END CUSTOMER ADDRESS BOOK EXISTS FOR DEALER
  UPDATE STG_WARRANTY_REGISTRATIONS TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR007', ';WR007'),
    ERROR_STATUS = 'N'
  WHERE NOT EXISTS
    (SELECT 1
    FROM ADDRESS_BOOK AB,
      SERVICE_PROVIDER SP
    WHERE SP.SERVICE_PROVIDER_NUMBER = TAV.DEALER_NUMBER
    AND SP.ID                        = AB.BELONGS_TO
    AND upper(AB.TYPE)               = upper(TAV.CUSTOMER_TYPE)
    )
  AND TAV.DEALER_NUMBER IS NOT NULL;
  --ERROR CODE: END_CUST_NOT_MAPPED_TO_DLR
  --VALIDATE THAT END CUSTOMER EXISTS IN THE DEALER'S ENDCUSTOMER ADDRESS BOOK
  UPDATE STG_WARRANTY_REGISTRATIONS TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR008', ';WR008'),
    ERROR_STATUS                            = 'N'
  WHERE INSTR(NVL(ERROR_CODE,'X'), 'WR007') = 0
  AND INSTR(NVL(ERROR_CODE,'X'), 'WR004')   = 0
  AND NOT EXISTS
    (SELECT 1
    FROM CUSTOMER C,
      CUSTOMER_ADDRESSES CA,
      SERVICE_PROVIDER SP,
      ADDRESS_BOOK AB,
      ADDRESS_BOOK_ADDRESS_MAPPING ABAM
    WHERE ABAM.ADDRESS_BOOK_ID     = AB.ID
    AND AB.TYPE                    = UPPER(TAV.CUSTOMER_TYPE)
    AND AB.BELONGS_TO              = SP.ID
    AND CA.CUSTOMER                = C.ID
    AND ABAM.ADDRESS_ID           IN (CA.ADDRESSES)
    AND C.CUSTOMER_ID              = TAV.CUSTOMER_NUMBER
    AND SP.SERVICE_PROVIDER_NUMBER = TAV.DEALER_NUMBER
    );
  COMMIT;
  --ERROR CODES: ITEM_NUMBER_NULL
  --VALIDATE THAT ITEM NUMBER IS NOT NULL
  UPDATE STG_WARRANTY_REGISTRATIONS
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR010', ';WR010'),
    ERROR_STATUS     = 'N'
  WHERE ITEM_NUMBER IS NULL;
  --ERROR CODE: ITEM_NUMBER_INVALID
  --VALIDATE THAT ITEM NUMBER IS VALID
  UPDATE STG_WARRANTY_REGISTRATIONS TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR011', ';WR011'),
    ERROR_STATUS = 'N'
  WHERE NOT EXISTS
    (SELECT I.ID
    FROM ITEM I
    WHERE I.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
    AND I.ITEM_TYPE            = 'MACHINE'
    AND I.OWNED_BY             = 1
    AND I.ITEM_NUMBER          = TAV.ITEM_NUMBER
    AND I.D_ACTIVE             = 1
    )
  AND ITEM_NUMBER IS NOT NULL;
  COMMIT;
  --ERROR CODES: SERIAL_NUMBER_NULL
  --VALIDATE THAT SERIAL NUMBER IS NOT NULL
  UPDATE STG_WARRANTY_REGISTRATIONS
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR012', ';WR012'),
    ERROR_STATUS       = 'N'
  WHERE SERIAL_NUMBER IS NULL;
  SELECT DISTINCT OU.BELONGS_TO_ORGANIZATION
  INTO V_FILING_PARTY
  FROM FILE_UPLOAD_MGT FUM,
    ORG_USER OU,
    STG_WARRANTY_REGISTRATIONS TAV
  WHERE TAV.FILE_UPLOAD_MGT_ID = FUM.ID
  AND FUM.UPLOADED_BY          = OU.ID;
  COMMIT;
  --ERROR CODES: DELIVERY_DATE_NULL
  --VALIDATE THAT DELIVERY DATE IS NOT NULL
  UPDATE STG_WARRANTY_REGISTRATIONS
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR014', ';WR014'),
    ERROR_STATUS       = 'N'
  WHERE DELIVERY_DATE IS NULL;
  --ERROR CODES: HOURS_ON_MACHINE_NULL
  --VALIDATE THAT HOURS ON MACHINE IS NOT NULL
  UPDATE STG_WARRANTY_REGISTRATIONS
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR015', ';WR015'),
    ERROR_STATUS          = 'N'
  WHERE HOURS_ON_MACHINE IS NULL;
  --ERROR CODE: OPERATOR TYPE IS NULL
  --VALIDATE THAT OPERATOR TYPE IS NOT NULL WHEN OPERATOR NUMBER IS NOT NULL
  UPDATE STG_WARRANTY_REGISTRATIONS TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR050', ';WR050'),
    ERROR_STATUS             = 'N'
  WHERE TAV.OPERATOR_NUMBER IS NOT NULL
  AND TAV.OPERATOR_TYPE     IS NULL;
  --ERROR CODE: OPERATOR NUMBER IS NULL
  --VALIDATE THAT OPERATOR NUMBER IS NOT NULL WHEN OPERATOR TYPE IS NOT NULL
  UPDATE STG_WARRANTY_REGISTRATIONS TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR051', ';WR051'),
    ERROR_STATUS             = 'N'
  WHERE TAV.OPERATOR_NUMBER IS NULL
  AND TAV.OPERATOR_TYPE     IS NOT NULL;
  --ERROR CODES: OPERATOR_TYPE_INVALID
  --VALIDATE THAT OPERATOR TYPE IS VALID
  UPDATE STG_WARRANTY_REGISTRATIONS TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR016', ';WR016'),
    ERROR_STATUS                    = 'N'
  WHERE TAV.OPERATOR_TYPE          IS NOT NULL
  AND upper(TAV.OPERATOR_TYPE) NOT IN
    (SELECT upper(CFO.VALUE)
    FROM CONFIG_PARAM_OPTION CFO,
      CONFIG_VALUE CV,
      CONFIG_PARAM CP
    WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
    AND CV.CONFIG_PARAM       = CP.ID
    AND CP.NAME               = 'customersFilingDR'
    AND CV.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
    );
  --ERROR CODE: OPERATOR_NOT_MAPPED_TO_DLR
  --VALIDATE THAT OPERATOR EXISTS IN THE DEALER'S ENDCUSTOMER ADDRESS BOOK
  UPDATE STG_WARRANTY_REGISTRATIONS TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR049', ';WR049'),
    ERROR_STATUS                            = 'N'
  WHERE INSTR(NVL(ERROR_CODE,'X'), 'WR016') = 0
  AND TAV.OPERATOR_NUMBER                  IS NOT NULL
  AND TAV.OPERATOR_TYPE                    IS NOT NULL
  AND NOT EXISTS
    (SELECT 1
    FROM CUSTOMER C,
      CUSTOMER_ADDRESSES CA,
      SERVICE_PROVIDER SP,
      ADDRESS_BOOK AB,
      ADDRESS_BOOK_ADDRESS_MAPPING ABAM
    WHERE ABAM.ADDRESS_BOOK_ID     = AB.ID
    AND upper(AB.TYPE)             = UPPER(TAV.OPERATOR_TYPE)
    AND AB.BELONGS_TO              = SP.ID
    AND CA.CUSTOMER                = C.ID
    AND ABAM.ADDRESS_ID           IN (CA.ADDRESSES)
    AND C.CUSTOMER_ID              = TAV.OPERATOR_NUMBER
    AND SP.SERVICE_PROVIDER_NUMBER = TAV.DEALER_NUMBER
    );
  --ERROR CODES: OEM_INVALID
  --VALIDATE THAT OEM IS VALID
  UPDATE STG_WARRANTY_REGISTRATIONS TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR053', ';WR053'),
    ERROR_STATUS = 'N'
  WHERE TAV.OEM IS NOT NULL
  AND NOT EXISTS
    (SELECT 1
    FROM LIST_OF_VALUES
    WHERE TYPE             = 'OEM'
    AND DESCRIPTION        = TAV.OEM
    AND BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
    );
  --ERROR CODES: COMP_PART_NUMBERS_NULL
  --VALIDATE THAT COMPONENT PART NUMBERS ARE PROVIDED IF COMPONENT SERIAL NUMBERS ARE PROVIDED
  UPDATE STG_WARRANTY_REGISTRATIONS TAV
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR020', ';WR020'),
    ERROR_STATUS                     = 'N'
  WHERE TAV.COMPONENT_SERIAL_NUMBER IS NOT NULL
  AND TAV.COMPONENT_PART_NUMBER     IS NULL;
  --ERROR CODES: COMP_INSTALL_DATES_NULL
  --VALIDATE THAT COMPONENT INSTALL DATES ARE PROVIDED IF COMPONENT PART NUMBERS ARE PROVIDED
  UPDATE STG_WARRANTY_REGISTRATIONS
  SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR021', ';WR021'),
    ERROR_STATUS                   = 'N'
  WHERE COMPONENT_PART_NUMBER     IS NOT NULL
  AND COMPONENT_INSTALLATION_DATE IS NULL;
  COMMIT;
  DECLARE
  TYPE POL_TYPE
IS
  TABLE OF VARCHAR2(4000) INDEX BY VARCHAR2(4000);
  V_POL_CODES POL_TYPE;
BEGIN
  FOR EACH_POL IN
  (SELECT CODE
  FROM POLICY_DEFINITION
  WHERE BUSINESS_UNIT_INFO = 'Thermo King TSA'
  )
  LOOP
    V_POL_CODES(EACH_POL.CODE) := EACH_POL.CODE;
  END LOOP;
  --MAIN LOOP TO ITERATE OVER ALL THE RECORDS AND VALIDATE INDIVIDUAL ELEMENTS
  FOR EACH_REC IN ALL_REC
  LOOP
    BEGIN
      --RESET THE VARIABLE
      V_ERROR_CODE      := NULL;
      V_COMMIT_COUNT    := V_COMMIT_COUNT + 1;
      V_VAR             := 0;
      V_UNIT_OWNER_TYPE := 'DEALER';
      BEGIN
        SELECT UPPER(CFO.VALUE)
        INTO V_ALLOW_OTHER_DLRS_STOCK
        FROM CONFIG_PARAM_OPTION CFO,
          CONFIG_VALUE CV,
          CONFIG_PARAM CP
        WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
        AND CV.CONFIG_PARAM       = CP.ID
        AND CP.NAME               = 'allowWntyRegOnOthersStock'
        AND CV.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        V_ALLOW_OTHER_DLRS_STOCK := 'FALSE';
      END;
      BEGIN
        SELECT UPPER(CFO.VALUE)
        INTO V_CAP_INST_DLR_DATE
        FROM CONFIG_PARAM_OPTION CFO,
          CONFIG_VALUE CV,
          CONFIG_PARAM CP
        WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
        AND CV.CONFIG_PARAM       = CP.ID
        AND CP.NAME               = 'enableDealerAndInstallationDate'
        AND CV.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        V_CAP_INST_DLR_DATE := 'FALSE';
      END;
      BEGIN
        SELECT UPPER(CFO.VALUE)
        INTO V_ADD_INFO_APPLICABLE
        FROM CONFIG_PARAM_OPTION CFO,
          CONFIG_VALUE CV,
          CONFIG_PARAM CP
        WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
        AND CV.CONFIG_PARAM       = CP.ID
        AND CP.NAME               = 'additionalInformationDetailsApplicable'
        AND CV.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        V_ADD_INFO_APPLICABLE := 'FALSE';
      END;
      BEGIN
        SELECT II.id,
          II.PENDING_WARRANTY,
          II.SHIPMENT_DATE,
          II.CURRENT_OWNER
        INTO V_SERIAL_ID,
          V_PENDING_WR,
          V_SHIP_DATE,
          V_CURR_OWNER_ID
        FROM INVENTORY_ITEM II,
          ITEM I
        WHERE II.OF_TYPE          = I.ID
        AND II.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO
        AND I.BUSINESS_UNIT_INFO  = EACH_REC.BUSINESS_UNIT_INFO
        AND II.SERIAL_NUMBER      = EACH_REC.SERIAL_NUMBER
        AND I.ITEM_NUMBER         = EACH_REC.ITEM_NUMBER
        AND II.SERIALIZED_PART    = 0
        AND II.D_ACTIVE           = 1
        AND II.TYPE               = 'STOCK';
        SELECT upper(SP.SERVICE_PROVIDER_TYPE)
        INTO V_UNIT_OWNER_TYPE
        FROM SERVICE_PROVIDER SP
        WHERE SP.id = V_CURR_OWNER_ID;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        V_UNIT_OWNER_TYPE := 'DEALER';
        V_ERROR_CODE      := common_utils.addErrorMessage(V_ERROR_CODE, 'WR013');
      END;
      IF NOT(V_ALLOW_OTHER_DLRS_STOCK = 'TRUE' OR V_FILING_PARTY = 1 OR V_UNIT_OWNER_TYPE = 'OEM') AND V_FILING_PARTY > 1 AND V_FILING_PARTY <> V_CURR_OWNER_ID THEN
        --IF THE USER IS NOT AN ADMIN, THEN CHECK IF THE LOGGED IN USER OWNS THE INVENTORY
        V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR013');
      END IF;
      --ERROR CODE: SERIAL_NUMBER_VALID_HAS_PENDING_WR
      --VALIDATE THAT THE SERIAL NUMBER HAS NO PENDING WR
      IF V_PENDING_WR = 1 THEN
        V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR009');
      END IF;
      IF V_ADD_INFO_APPLICABLE = 'TRUE' THEN
        --ERROR CODES: TRANSACTION_TYPE_NULL
        --VALIDATE THAT TRANSACTION TYPE IS NOT NULL
        IF EACH_REC.TRANSACTION_TYPE IS NULL THEN
          V_ERROR_CODE               := common_utils.addErrorMessage(V_ERROR_CODE, 'WR022');
        ELSE
          BEGIN
            --ERROR CODES: TRANSACTION_TYPE_INVALID
            --VALIDATE THAT TRANSACTION_TYPE IS VALID
            SELECT 1
            INTO V_VAR
            FROM TRANSACTION_TYPE TT
            WHERE UPPER(TT.TYPE) = UPPER(EACH_REC.TRANSACTION_TYPE);
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
            V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR023');
          END;
        END IF;
        --ERROR CODES: MARKET_TYPE_NULL
        --VALIDATE THAT MARKET TYPE IS NOT NULL
        IF EACH_REC.MARKET_TYPE IS NULL THEN
          V_ERROR_CODE          := common_utils.addErrorMessage(V_ERROR_CODE, 'WR024');
        ELSE
          BEGIN
            --ERROR CODES: MARKET_TYPE_INVALID
            --VALIDATE THAT MARKET_TYPE IS VALID
            SELECT 1
            INTO V_VAR
            FROM MARKET_TYPE MT
            WHERE UPPER(MT.TITLE) = UPPER(EACH_REC.MARKET_TYPE);
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
            V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR025');
          END;
        END IF;
        --ERROR CODES: FIRST_TIME_OWNER_NULL OR INVALID
        --VALIDATE THAT FIRST TIME OWNER IS NOT NULL AND NOT INVALID
        IF EACH_REC.FIRST_TIME_OWNER           IS NULL THEN
          V_ERROR_CODE                         := common_utils.addErrorMessage(V_ERROR_CODE, 'WR026');
        ELSIF upper(EACH_REC.FIRST_TIME_OWNER) <> 'YES' AND upper(EACH_REC.FIRST_TIME_OWNER) <> 'NO' THEN
          V_ERROR_CODE                         := common_utils.addErrorMessage(V_ERROR_CODE, 'WR027');
        ELSIF upper(EACH_REC.FIRST_TIME_OWNER)  = 'YES' AND EACH_REC.IF_PREVIOUS_OWNER IS NULL THEN
          --ERROR CODES: IF_PREVIOUS_OWNER_NULL
          --VALIDATE THAT IF_PREVIOUS_OWNER IS NOT NULL IF FIRST TIME OWNER IS YES
          V_ERROR_CODE                   := common_utils.addErrorMessage(V_ERROR_CODE, 'WR028');
        ELSIF (UPPER(EACH_REC.IF_PREVIOUS_OWNER) = UPPER(('Switching to ' || EACH_REC.BUSINESS_UNIT_INFO))
			OR UPPER(EACH_REC.IF_PREVIOUS_OWNER) = UPPER(('Continuing with ' || EACH_REC.BUSINESS_UNIT_INFO))
			OR UPPER(EACH_REC.IF_PREVIOUS_OWNER) = UPPER('Unknown/Not Provided')) THEN
          --ERROR CODES: IF_PREVIOUS_OWNER_INVALID
          --VALIDATE THAT IF_PREVIOUS_OWNER IS VALID
          V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR029');
        END IF;
        --ERROR CODES: COMPETITION_TYPE_INVALID
        --VALIDATE THAT COMPETITION_TYPE IS VALID
        IF EACH_REC.COMPETITION_TYPE IS NOT NULL THEN
          BEGIN
            SELECT 1
            INTO V_VAR
            FROM COMPETITION_TYPE CT
            WHERE UPPER(CT.TYPE) = UPPER(EACH_REC.COMPETITION_TYPE);
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
            V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR030');
          END;
        END IF;
        --ERROR CODES: COMPETITOR_MAKE_INVALID
        --VALIDATE THAT COMPETITOR_MAKE IS VALID
        IF EACH_REC.COMPETITOR_MAKE IS NOT NULL THEN
          BEGIN
            SELECT 1
            INTO V_VAR
            FROM COMPETITOR_MAKE CM
            WHERE UPPER(CM.MAKE) = UPPER(EACH_REC.COMPETITOR_MAKE);
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
            V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR031');
          END;
        END IF;
        --ERROR CODES: MODEL_NUMBER_INVALID
        --VALIDATE THAT MODEL_NUMBER IS VALID
        IF EACH_REC.MODEL_NUMBER IS NOT NULL THEN
          BEGIN
            SELECT 1
            INTO V_VAR
            FROM ITEM_GROUP IG,
              ITEM_SCHEME ISCH
            WHERE IG.ITEM_GROUP_TYPE    = 'MODEL'
            AND IG.SCHEME               = ISCH.ID
            AND IG.BUSINESS_UNIT_INFO   = EACH_REC.BUSINESS_UNIT_INFO
            AND ISCH.NAME               = 'Prod Struct Scheme'
            AND ISCH.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO
            AND IG.NAME                 = EACH_REC.MODEL_NUMBER;
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
            V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR032');
          END;
        END IF;
      END IF;
      --ERROR_CODE: DELIVERY_DATE_INVALID, DELIVERY_DATE_BEFORE_SHIP_DATE, DELIVERY_DATE_IN_FUTURE
      --VALIDATE THAT DELIVERY DATE IS IN VALID FORMAT AND IS ON OR AFTER SHIPMENT DATE
      IF EACH_REC.DELIVERY_DATE                         IS NOT NULL AND NOT (COMMON_UTILS.ISVALIDDATE(EACH_REC.DELIVERY_DATE)) THEN
        V_ERROR_CODE                                    := common_utils.addErrorMessage(V_ERROR_CODE, 'WR034');
      ELSIF TO_DATE(EACH_REC.DELIVERY_DATE, 'YYYYMMDD') >= SYSDATE THEN
        V_ERROR_CODE                                    := common_utils.addErrorMessage(V_ERROR_CODE, 'WR035');
      ELSIF TO_DATE(EACH_REC.DELIVERY_DATE, 'YYYYMMDD')  < V_SHIP_DATE THEN
        V_ERROR_CODE                                    := common_utils.addErrorMessage(V_ERROR_CODE, 'WR036');
      END IF;
      IF UPPER(V_CAP_INST_DLR_DATE) = 'TRUE' THEN
        --ERROR CODES: INSTALL_DLR_NULL
        --VALIDATE THAT INSTALLING_DEALER IS NOT NULL
        IF EACH_REC.INSTALLING_DEALER_NUMBER IS NULL THEN
          V_ERROR_CODE                       := common_utils.addErrorMessage(V_ERROR_CODE, 'WR017');
        ELSE
          --ERROR CODE: INSTALL_DLR_INVALID
          --VALIDATE THAT INSTALLER NUMBER IS VALID
          BEGIN
            SELECT 1
            INTO V_VAR
            FROM SERVICE_PROVIDER SP,
              BU_ORG_MAPPING BOM
            WHERE SP.ID                            = BOM.ORG
            AND BOM.BU                             = EACH_REC.BUSINESS_UNIT_INFO
            AND SP.SERVICE_PROVIDER_NUMBER         = EACH_REC.INSTALLING_DEALER_NUMBER
            AND EACH_REC.INSTALLING_DEALER_NUMBER IS NOT NULL;
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
            V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR018');
          END;
        END IF;
        --ERROR CODES: INSTALL_DATE_NULL, INSTALL_DATE_INVALID, INSTALL_DATE_BEFORE_DEL_DATE, INSTALL_DATE_IN_FUTURE
        --VALIDATE THAT INSTALL DATE IS NOT NULL and IS IN VALID FORMAT AND IS ON OR AFTER DELIVERY DATE
        IF EACH_REC.DATE_OF_INSTALLATION IS NULL THEN
          V_ERROR_CODE                   := common_utils.addErrorMessage(V_ERROR_CODE, 'WR019');
        ELSIF NOT (COMMON_UTILS.ISVALIDDATE(EACH_REC.DATE_OF_INSTALLATION)) THEN
          V_ERROR_CODE                                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR037');
        ELSIF TO_DATE(EACH_REC.DATE_OF_INSTALLATION, 'YYYYMMDD') >= SYSDATE THEN
          V_ERROR_CODE                                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR039');
        ELSIF EACH_REC.DELIVERY_DATE                             IS NOT NULL AND COMMON_UTILS.ISVALIDDATE(EACH_REC.DELIVERY_DATE) AND TO_DATE(EACH_REC.DATE_OF_INSTALLATION, 'YYYYMMDD') > TO_DATE(EACH_REC.DELIVERY_DATE, 'YYYYMMDD') THEN
          V_ERROR_CODE                                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR038');
        END IF;
      END IF;
      --ERROR CODE: HRS_ON_MACH_INVALID
      --VALIDATE THAT HOURS ON MACHINE IS VALID
      IF EACH_REC.HOURS_ON_MACHINE IS NOT NULL AND NOT(COMMON_UTILS.ISNUMBER(EACH_REC.HOURS_ON_MACHINE)) THEN
        V_ERROR_CODE               := common_utils.addErrorMessage(V_ERROR_CODE, 'WR033');
      END IF;
      --ERROR_CODE: COMP_PART_NO_AND_INSTALL_DATES_MISMATCH
      --VALIDATE THAT COMPONENT PART NUMBERS AND INSTALL DATES HAVE THE SAME COUNT
      IF EACH_REC.COMPONENT_PART_NUMBER IS NOT NULL THEN
        COMMON_UTILS.ParseAnySeperatorList(EACH_REC.COMPONENT_PART_NUMBER,'#$#',V_COMP_PART_ARRAY ,V_COMP_PART_COUNT);
        IF EACH_REC.COMPONENT_SERIAL_NUMBER IS NOT NULL THEN
          COMMON_UTILS.ParseAnySeperatorList(EACH_REC.COMPONENT_SERIAL_NUMBER,'#$#',V_COMP_SERIAL_ARRAY ,V_COMP_SERIAL_COUNT);
          IF EACH_REC.COMPONENT_INSTALLATION_DATE IS NOT NULL THEN
            COMMON_UTILS.ParseAnySeperatorList(EACH_REC.COMPONENT_INSTALLATION_DATE,'#$#',V_COMP_INSTALL_ARRAY ,V_COMP_INSTALL_COUNT);
            --ERROR_CODE: COMP_PART_NO_AND_SERIAL_NO_MISMATCH
            --VALIDATE THAT COMPONENT PART AND SERIAL NUMBERS HAVE THE SAME COUNT
            IF V_COMP_PART_COUNT <> V_COMP_SERIAL_COUNT THEN
              V_ERROR_CODE       := common_utils.addErrorMessage(V_ERROR_CODE, 'WR040');
            END IF;
            IF V_COMP_PART_COUNT <> V_COMP_INSTALL_COUNT THEN
              V_ERROR_CODE       := common_utils.addErrorMessage(V_ERROR_CODE, 'WR041');
            END IF;
            FOR I IN 1..V_COMP_PART_COUNT
            LOOP
              BEGIN
                SELECT 1
                INTO V_VAR
                FROM ITEM
                WHERE ITEM_TYPE        = 'PART'
                AND ITEM_NUMBER        = V_COMP_PART_ARRAY(I)
                AND OWNED_BY           = 1
                AND BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
              EXCEPTION
              WHEN NO_DATA_FOUND THEN
                V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR042');
                EXIT
              WHEN INSTR(NVL(V_ERROR_CODE,'X'), 'WR042') > 0;
              END;
            END LOOP;
            --ERROR_CODE: COMP ALREADY EXISTS ON DIFFERENT UNIT
            --VALIDATE THAT COMPONENT SN ALREADY EXISTS ON ANOTHER UNIT
            IF INSTR(NVL(V_ERROR_CODE,'X'), 'WR040') = 0 AND INSTR(NVL(V_ERROR_CODE,'X'), 'WR041') = 0 THEN
              FOR N                                 IN 1..V_COMP_PART_COUNT
              LOOP
                BEGIN
                  SELECT II.id
                  INTO V_COMPONENT_ID
                  FROM ITEM I,
                    INVENTORY_ITEM II
                  WHERE I.ITEM_TYPE        = 'PART'
                  AND I.ITEM_NUMBER        = V_COMP_PART_ARRAY(N)
                  AND I.OWNED_BY           = 1
                  AND I.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO
                  AND II.OF_TYPE           = I.ID
                  AND II.SERIAL_NUMBER     = V_COMP_SERIAL_ARRAY(N)
                  AND II.SERIALIZED_PART   = 1
                  AND II.D_ACTIVE          = 1;
                  SELECT common_utils.addErrorMessage(V_ERROR_CODE, 'WR054')
                  INTO V_ERROR_CODE
                  FROM inventory_item_composition iic,
                    inventory_item ii
                  WHERE iic.PART_OF = ii.id
                  AND iic.PART      = V_COMPONENT_ID
                  AND iic.D_ACTIVE  = 1
                  AND ii.id        <> V_SERIAL_ID
                  AND II.D_ACTIVE   = 1;
                  EXIT
                WHEN INSTR(NVL(V_ERROR_CODE,'X'), 'WR054') > 0;
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  V_COMPONENT_ID := 0;
                END;
              END LOOP;
            END IF;
            --ERROR_CODE: COMP_INSTALL_DATE_INVALID
            --VALIDATE THAT INSTALL DATES FOR MAJOR COMPONENTS IS A VALID DATE
            FOR I IN 1..V_COMP_INSTALL_COUNT
            LOOP
              IF NOT COMMON_UTILS.ISVALIDDATE(V_COMP_INSTALL_ARRAY(I)) THEN
                V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR043');
                EXIT
              WHEN INSTR(NVL(V_ERROR_CODE,'X'), 'WR043') > 0;
              END IF;
            END LOOP;
          END IF;
        END IF;
      END IF;
      --ERROR_CODE: NUMBER_OF_MONTHS_INVALID
      --VALIDATE THAT NUMBER_OF_MONTHS IS A VALID NUMBER
      IF EACH_REC.NUMBER_OF_MONTHS IS NOT NULL AND NOT (COMMON_UTILS.ISNUMBER(EACH_REC.NUMBER_OF_MONTHS)) THEN
        V_ERROR_CODE               := common_utils.addErrorMessage(V_ERROR_CODE, 'WR044');
      END IF;
      --ERROR_CODE: NUMBER_OF_YEARS_INVALID
      --VALIDATE THAT NUMBER_OF_YEARS IS A VALID NUMBER
      IF EACH_REC.NUMBER_OF_YEARS IS NOT NULL AND NOT (COMMON_UTILS.ISNUMBER(EACH_REC.NUMBER_OF_YEARS)) THEN
        V_ERROR_CODE              := common_utils.addErrorMessage(V_ERROR_CODE, 'WR045');
      END IF;
      --ERROR_CODE: POLICY_INVALID_<POLICY CODE>
      --IF ADDITIONAL POLICIES ARE GIVEN, VALIDATE THAT THEY ARE VALID
      IF EACH_REC.ADDITIONAL_APPLICABLE_POLICIES IS NOT NULL THEN
        BEGIN
          --GET AN ARRAY OUT OF ALL THE COMMA SEPARATED ITEMS
          COMMON_UTILS.ParseAnySeperatorList(EACH_REC.ADDITIONAL_APPLICABLE_POLICIES,'#$#',V_POL_ARRAY ,V_POL_COUNT);
          FOR I IN 1..V_POL_COUNT
          LOOP
            IF NOT V_POL_CODES.EXISTS(V_POL_ARRAY(I)) THEN
              V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR046');
              EXIT
            WHEN INSTR(NVL(V_ERROR_CODE,'X'), 'WR046') > 0;
            END IF;
          END LOOP;
        END;
      END IF;
      --ERROR CODES: REQUEST_FOR_EXT IS INVALID
      --VALIDATE THAT REQUEST FOR EXT IS VALID
      IF EACH_REC.REQUEST_FOR_EXTENSION          IS NOT NULL THEN
        IF upper(EACH_REC.REQUEST_FOR_EXTENSION) <> 'YES' AND upper(EACH_REC.REQUEST_FOR_EXTENSION) <> 'NO' THEN
          V_ERROR_CODE                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR052');
        END IF;
      END IF;
      IF V_ERROR_CODE IS NULL AND EACH_REC.ERROR_CODE IS NULL THEN
        --RECORD IS CLEAN AND IS SUCCESSFULLY VALIDATED
        UPDATE STG_WARRANTY_REGISTRATIONS
        SET ERROR_STATUS = 'Y',
          ERROR_CODE     = NULL
        WHERE ID         = EACH_REC.ID;
      ELSE
        --RECORD HAS ERRORS
        UPDATE STG_WARRANTY_REGISTRATIONS
        SET ERROR_STATUS = 'N',
          ERROR_CODE     = ERROR_CODE
          || DECODE (ERROR_CODE,NULL, V_ERROR_CODE,','
          || V_ERROR_CODE)
        WHERE ID = EACH_REC.ID;
      END IF;
      COMMIT;
    END;
  END LOOP;
  COMMIT;
END;
BEGIN
  SELECT file_upload_mgt_id
  INTO v_file_upload_mgt_id
  FROM STG_WARRANTY_REGISTRATIONS
  WHERE ROWNUM = 1;
  BEGIN
    SELECT COUNT(*)
    INTO v_success_count
    FROM STG_WARRANTY_REGISTRATIONS
    WHERE file_upload_mgt_id = v_file_upload_mgt_id
    AND ERROR_STATUS         = 'Y';
  EXCEPTION
  WHEN OTHERS THEN
    v_success_count := 0;
  END;
  BEGIN
    SELECT COUNT(*)
    INTO v_error_count
    FROM STG_WARRANTY_REGISTRATIONS
    WHERE file_upload_mgt_id = v_file_upload_mgt_id
    AND ERROR_STATUS         = 'N';
  EXCEPTION
  WHEN OTHERS THEN
    v_error_count := 0;
  END;
  SELECT COUNT(*)
  INTO v_count
  FROM STG_WARRANTY_REGISTRATIONS
  WHERE file_upload_mgt_id = v_file_upload_mgt_id;
  UPDATE file_upload_mgt
  SET success_records= v_success_count,
    error_records    = v_error_count,
    total_records    = v_count
  WHERE id           = v_file_upload_mgt_id;
EXCEPTION
WHEN OTHERS THEN
  v_error_code := SUBSTR(SQLERRM, 1, 4000);
  UPDATE file_upload_mgt
  SET error_message = v_error_code
  WHERE id          = v_file_upload_mgt_id;
END;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
END;
/
commit
/