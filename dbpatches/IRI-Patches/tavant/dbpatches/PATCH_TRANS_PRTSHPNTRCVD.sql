--Purpose    :INSERT TRANSITION,EVENT AND ACTION RELATED TO PART SHIPPED NOT RECEIVED NODE
--Author     : pradyot.rout
--Created On : 26-Aug-08

CREATE OR REPLACE PROCEDURE PROC_TRANS_PRTSHPNTRCVD AS
	V_PROCESSDEFINITIONID NUMBER :=0;
	V_JBPMNODEID NUMBER:=0;
	V_JBPMTASKID NUMBER:=0;
	
-- The transition ids of the existing nodes affected
	V_CLOSENODE NUMBER :=0;
	V_HOLDPARTNODE NUMBER :=0;
	V_REPLIESNODE NUMBER :=0;
	V_APPEALNODE NUMBER :=0;
	V_REJECTNODE NUMBER:=0;
	V_PROREVNODE NUMBER:=0;
	V_WAITNODE NUMBER:=0;
	V_DENYNODE NUMBER:=0;
	V_REPROCESSNODE NUMBER:=0;
	V_HOLDNODE NUMBER:=0;
	V_FORWARDNODE NUMBER:=0;
	V_TRANSFERNODE NUMBER:=0;
	V_ADVICENODE NUMBER:=0;
	
-- The new transition ids
	V_TRANS1 NUMBER:=0;
	V_TRANS2 NUMBER:=0;
	V_TRANS3 NUMBER:=0;
	V_TRANS4 NUMBER:=0;
	V_TRANS5 NUMBER:=0;
	V_TRANS6 NUMBER:=0;
	V_TRANS7 NUMBER:=0;
		
--The action ids       
      V_ACTION1 NUMBER:=0;
      V_ACTION2 NUMBER:=0;
      V_ACTION3 NUMBER:=0;
      V_ACTION4 NUMBER:=0;
      V_ACTION5 NUMBER:=0;
      V_ACTION6 NUMBER:=0;
      V_ACTION7 NUMBER:=0;
      
      BEGIN 
      
      
      -- SET PROCESSDEFINTION ID , NODE ID AND TASK ID
        SELECT ID_
	       INTO   V_PROCESSDEFINITIONID
	       FROM JBPM_PROCESSDEFINITION
               WHERE NAME_ = 'ClaimSubmission';
        
        select id_
        into V_JBPMNODEID from jbpm_node where name_='MoveClaimToPartsShippedNotreceivedInbox';
        
        select id_ into V_JBPMTASKID
         from jbpm_task where name_='Part Shipped Not Received';
         
         
         
         -- FOR TRANSITIONS related to new :
         
         SELECT HIBERNATE_SEQUENCE.NEXTVAL INTO V_TRANS1 FROM DUAL ;
         SELECT HIBERNATE_SEQUENCE.NEXTVAL INTO V_TRANS2 FROM DUAL ;
         SELECT HIBERNATE_SEQUENCE.NEXTVAL INTO V_TRANS3 FROM DUAL ;
         SELECT HIBERNATE_SEQUENCE.NEXTVAL INTO V_TRANS4 FROM DUAL ;
         SELECT HIBERNATE_SEQUENCE.NEXTVAL INTO V_TRANS5 FROM DUAL ;
         SELECT HIBERNATE_SEQUENCE.NEXTVAL INTO V_TRANS6 FROM DUAL ;
         SELECT HIBERNATE_SEQUENCE.NEXTVAL INTO V_TRANS7 FROM DUAL ;
         SELECT HIBERNATE_SEQUENCE.NEXTVAL INTO V_ACTION1 FROM DUAL ;
         SELECT HIBERNATE_SEQUENCE.NEXTVAL INTO V_ACTION2 FROM DUAL ;
         SELECT HIBERNATE_SEQUENCE.NEXTVAL INTO V_ACTION3 FROM DUAL ;
         SELECT HIBERNATE_SEQUENCE.NEXTVAL INTO V_ACTION4 FROM DUAL ;
         SELECT HIBERNATE_SEQUENCE.NEXTVAL INTO V_ACTION5 FROM DUAL ;
         SELECT HIBERNATE_SEQUENCE.NEXTVAL INTO V_ACTION6 FROM DUAL ;
         SELECT HIBERNATE_SEQUENCE.NEXTVAL INTO V_ACTION7 FROM DUAL ;
         
         -- FETCHING THE NODES FOR TRANSITION TABLES (PART SHIPPED NOT RECEIVED NODE)
	          
	  SELECT ID_ INTO V_WAITNODE
	     FROM JBPM_NODE WHERE NAME_='WaitForPartReturnsCompletion' AND PROCESSDEFINITION_=V_PROCESSDEFINITIONID;

	  SELECT ID_ INTO V_DENYNODE
		FROM JBPM_NODE WHERE NAME_='DebitPaymentOnDenial' AND PROCESSDEFINITION_=V_PROCESSDEFINITIONID;

	  SELECT ID_ INTO V_REPROCESSNODE
		FROM JBPM_NODE WHERE NAME_='ReProcessAfterProcessorAcceptance' AND PROCESSDEFINITION_=V_PROCESSDEFINITIONID;

	  SELECT ID_ INTO V_HOLDNODE
		FROM JBPM_NODE WHERE NAME_='OnHold' AND PROCESSDEFINITION_=V_PROCESSDEFINITIONID;

	  SELECT ID_ INTO V_FORWARDNODE
		FROM JBPM_NODE WHERE NAME_='ForkForForwarded' AND PROCESSDEFINITION_=V_PROCESSDEFINITIONID;

	  SELECT ID_ INTO V_TRANSFERNODE
		FROM JBPM_NODE WHERE NAME_='Transferred' AND PROCESSDEFINITION_=V_PROCESSDEFINITIONID;

	  SELECT ID_ INTO V_ADVICENODE
                FROM JBPM_NODE WHERE NAME_='ForkForAdviceRequest' AND PROCESSDEFINITION_=V_PROCESSDEFINITIONID;
         
       -- INSERTION INTO TRANSITION TABLES FOR PART SHIPPED NOT RECEIVED NODE 
       INSERT INTO JBPM_TRANSITION (ID_,NAME_,PROCESSDEFINITION_,FROM_,TO_,FROMINDEX_) 
       VALUES (V_TRANS1,'Accept',V_PROCESSDEFINITIONID,V_JBPMNODEID,V_WAITNODE,0);
	       
       INSERT INTO JBPM_TRANSITION (ID_,NAME_,PROCESSDEFINITION_,FROM_,TO_,FROMINDEX_) 
       VALUES (V_TRANS2,'Deny',V_PROCESSDEFINITIONID,V_JBPMNODEID,V_DENYNODE,1);

       INSERT INTO JBPM_TRANSITION (ID_,NAME_,PROCESSDEFINITION_,FROM_,TO_,FROMINDEX_) 
       VALUES (V_TRANS3,'Re-process',V_PROCESSDEFINITIONID,V_JBPMNODEID,V_REPROCESSNODE,2);

       INSERT INTO JBPM_TRANSITION (ID_,NAME_,PROCESSDEFINITION_,FROM_,TO_,FROMINDEX_) 
       VALUES (V_TRANS4,'Hold',V_PROCESSDEFINITIONID,V_JBPMNODEID,V_HOLDNODE,3);

       INSERT INTO JBPM_TRANSITION (ID_,NAME_,PROCESSDEFINITION_,FROM_,TO_,FROMINDEX_) 
       VALUES (V_TRANS5,'Forward to Dealer',V_PROCESSDEFINITIONID,V_JBPMNODEID,V_FORWARDNODE,4);

       INSERT INTO JBPM_TRANSITION (ID_,NAME_,PROCESSDEFINITION_,FROM_,TO_,FROMINDEX_) 
       VALUES (V_TRANS6,'Transfer',V_PROCESSDEFINITIONID,V_JBPMNODEID,V_TRANSFERNODE,5);

       INSERT INTO JBPM_TRANSITION (ID_,NAME_,PROCESSDEFINITION_,FROM_,TO_,FROMINDEX_) 
       VALUES (V_TRANS7,'Seek Advice',V_PROCESSDEFINITIONID,V_JBPMNODEID,V_ADVICENODE,6); 
       
       
       -- INSERTION INTO JBPM_EVENT TABLES
          
             DECLARE
             CURSOR GET_TRANSITIONID  IS
             SELECT ID_
             FROM JBPM_TRANSITION WHERE FROM_=
             (SELECT ID_ FROM JBPM_NODE WHERE NAME_='MoveClaimToPartsShippedNotreceivedInbox');
             
             BEGIN
             FOR TRANSITIONIDS IN GET_TRANSITIONID LOOP
             			   	 	     
             	INSERT INTO JBPM_EVENT (ID_,EVENTTYPE_,TYPE_,GRAPHELEMENT_,TRANSITION_) VALUES 
             	(HIBERNATE_SEQUENCE.NEXTVAL,
             	'transition','T',TRANSITIONIDS.ID_,TRANSITIONIDS.ID_);
             	
             END LOOP;
          END;
          
          
       -- insertion into jbpm_action
       
       INSERT INTO JBPM_ACTION (ID_,CLASS,ISPROPAGATIONALLOWED_,ISASYNC_,event_,EVENTindex_,EXPRESSION_) 
             	VALUES (V_ACTION1,
             	'S',1,0,(SELECT ID_ FROM JBPM_EVENT WHERE TRANSITION_ =V_TRANS1),0,
          	'claim.setState(tavant.twms.domain.claim.ClaimState.WAITING_FOR_PART_RETURNS);claim.setPrtShpNtrcvd(java.lang.Boolean.FALSE);');
             	
             	INSERT INTO JBPM_ACTION (ID_,CLASS,ISPROPAGATIONALLOWED_,ISASYNC_,event_,EVENTindex_,EXPRESSION_)
             	VALUES (V_ACTION2,
             	'S',1,0,(SELECT ID_ FROM JBPM_EVENT WHERE TRANSITION_ =V_TRANS2),0,
          	'claim.setPrtShpNtrcvd(java.lang.Boolean.FALSE);claim.setState(tavant.twms.domain.claim.ClaimState.DENIED);');
             	
             	INSERT INTO JBPM_ACTION (ID_,CLASS,ISPROPAGATIONALLOWED_,ISASYNC_,event_,EVENTindex_,EXPRESSION_)
             	VALUES (V_ACTION3,
             	'S',1,0,(SELECT ID_ FROM JBPM_EVENT WHERE TRANSITION_ =V_TRANS3),0,'claim.getRuleFailures().clear()');
             	
             	INSERT INTO JBPM_ACTION (ID_,CLASS,ISPROPAGATIONALLOWED_,ISASYNC_,event_,EVENTindex_,EXPRESSION_)
             	VALUES (V_ACTION4,
             	'S',1,0,(SELECT ID_ FROM JBPM_EVENT WHERE TRANSITION_ =V_TRANS4),0,
          	'claim.setState(tavant.twms.domain.claim.ClaimState.ON_HOLD);claim.setPrtShpNtrcvd(java.lang.Boolean.FALSE);');
             	
             	INSERT INTO JBPM_ACTION (ID_,CLASS,ISPROPAGATIONALLOWED_,ISASYNC_,event_,EVENTindex_,EXPRESSION_)
             	VALUES (V_ACTION5,
             	'S',1,0,(SELECT ID_ FROM JBPM_EVENT WHERE TRANSITION_ =V_TRANS5),0,
          	'claim.setState(tavant.twms.domain.claim.ClaimState.FORWARDED);claim.setPrtShpNtrcvd(java.lang.Boolean.FALSE);');
             	
             	INSERT INTO JBPM_ACTION (ID_,CLASS,ISPROPAGATIONALLOWED_,ISASYNC_,event_,EVENTindex_,EXPRESSION_)
             	VALUES (V_ACTION6,
             	'S',1,0,(SELECT ID_ FROM JBPM_EVENT WHERE TRANSITION_ = V_TRANS6),0,
          	'claim.setState(tavant.twms.domain.claim.ClaimState.TRANSFERRED);claim.setPrtShpNtrcvd(java.lang.Boolean.FALSE);');
             	
             	INSERT INTO JBPM_ACTION (ID_,CLASS,ISPROPAGATIONALLOWED_,ISASYNC_,event_,EVENTindex_,EXPRESSION_)
             	VALUES (V_ACTION7,
             	'S',1,0,(SELECT ID_ FROM JBPM_EVENT WHERE TRANSITION_ =V_TRANS7),0,
   	'claim.setState(tavant.twms.domain.claim.ClaimState.ADVICE_REQUEST);claim.setPrtShpNtrcvd(java.lang.Boolean.FALSE);');
   
   END;
/
BEGIN
PROC_TRANS_PRTSHPNTRCVD();
END;
/
COMMIT
/