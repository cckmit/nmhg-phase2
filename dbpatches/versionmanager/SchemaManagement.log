 INFO 08-Nov-11 23:47:28 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 08-Nov-11 23:47:28 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


CREATE TABLE CLAIM_AUDIT_NEW AS SELECT ID, EXTERNAL_COMMENTS, INTERNAL,INTERNAL_COMMENTS,PREVIOUS_STATE,UPDATED_ON,VERSION,FOR_CLAIM,UPDATED_BY,LIST_INDEX,D_CREATED_ON,D_INTERNAL_COMMENTS,D_UPDATED_ON,D_LAST_UPDATED_BY,UPDATED_TIME,DECISION,MULTI_CLAIM_MAINTENANCE,PAYMENT from claim_audit

 INFO 08-Nov-11 23:47:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Nov-11 23:47:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


alter table CLAIM_AUDIT_NEW add (CLAIM_SNAPSHOT number (19,0))

 INFO 08-Nov-11 23:47:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Nov-11 23:47:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create unique index TEMP_CLAIM_AUDIT_NEW_IDX on CLAIM_AUDIT_NEW(ID)

 INFO 08-Nov-11 23:47:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Nov-11 23:47:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


update CLAIM_AUDIT_NEW set CLAIM_SNAPSHOT = ID where id in (select ID from CLAIM_AUDIT where prev_claim_snapshot_string is not null)

 INFO 08-Nov-11 23:48:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Nov-11 23:48:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

commit

 INFO 08-Nov-11 23:48:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Nov-11 23:48:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

drop index TEMP_CLAIM_AUDIT_NEW_IDX

 INFO 08-Nov-11 23:48:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Nov-11 23:48:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


alter table CLAIM_AUDIT rename to CLAIM_SNAPSHOT_XML

 INFO 08-Nov-11 23:48:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Nov-11 23:48:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


alter table CLAIM_AUDIT_NEW rename to CLAIM_AUDIT

 INFO 08-Nov-11 23:48:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Nov-11 23:48:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


ALTER TABLE CLAIM_SNAPSHOT_XML DROP (EXTERNAL_COMMENTS,INTERNAL,INTERNAL_COMMENTS,PREVIOUS_STATE,UPDATED_ON,VERSION,FOR_CLAIM,UPDATED_BY,LIST_INDEX,D_CREATED_ON,D_INTERNAL_COMMENTS,D_UPDATED_ON,D_LAST_UPDATED_BY,UPDATED_TIME,DECISION,MULTI_CLAIM_MAINTENANCE,PAYMENT)

 INFO 09-Nov-11 00:06:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:06:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


alter table CLAIM_SNAPSHOT_XML drop constraint CLAIM_AUDIT_PK

 INFO 09-Nov-11 00:06:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:06:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


drop index CLAIM_AUDIT_PK

 INFO 09-Nov-11 00:06:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:06:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


alter table CLAIM_SNAPSHOT_XML add constraint CLAIM_SNAPSHOT_XML_PK PRIMARY KEY(ID)

 INFO 09-Nov-11 00:06:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:06:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


delete from CLAIM_SNAPSHOT_XML where prev_claim_snapshot_string is null

 INFO 09-Nov-11 00:09:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:09:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

commit

 INFO 09-Nov-11 00:09:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:09:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


alter table claim_audit add constraint CLAIM_SNAPSHOT_XML_FK FOREIGN KEY(CLAIM_SNAPSHOT) REFERENCES CLAIM_SNAPSHOT_XML(ID)

 INFO 09-Nov-11 00:09:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:09:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

alter table claim_audit add constraint CLAIMAUDIT_FORCLAIM_FK FOREIGN KEY(FOR_CLAIM) REFERENCES CLAIM(ID)

 INFO 09-Nov-11 00:09:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:09:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

alter table claim_audit add constraint CLAIMAUDIT_UPDATEDBY_FK FOREIGN KEY(UPDATED_BY) REFERENCES ORG_USER(ID)

 INFO 09-Nov-11 00:09:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:09:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

alter table claim_audit add constraint CLAIM_AUDIT_PAYMENT_FK1 FOREIGN KEY(PAYMENT) REFERENCES PAYMENT(ID)

 INFO 09-Nov-11 00:09:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:09:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

alter table claim_audit add constraint CLM_AUDIT_LST_UPDT_BY_FK FOREIGN KEY(D_LAST_UPDATED_BY) REFERENCES ORG_USER(ID)

 INFO 09-Nov-11 00:09:34 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:09:34 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

alter table claim_audit add constraint CLAIM_AUDIT_PK PRIMARY KEY(ID)

 INFO 09-Nov-11 00:09:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:09:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


create index CLAIM_AUDIT_I2 on CLAIM_AUDIT(FOR_CLAIM, PREVIOUS_STATE)

 INFO 09-Nov-11 00:09:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:09:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create index CLAIMAUDIT_FORCLAIM_IX on CLAIM_AUDIT(FOR_CLAIM)

 INFO 09-Nov-11 00:10:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:10:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create index CLAIMAUDIT_UPDATEDBY_IX on CLAIM_AUDIT(UPDATED_BY)

 INFO 09-Nov-11 00:10:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:10:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create index CLAIM_AUDIT_UPDATED_TIME_IDX on CLAIM_AUDIT(UPDATED_TIME)

 INFO 09-Nov-11 00:10:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:10:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create unique index CLAIM_AUDIT_SNAP_SHOT_IDX on CLAIM_AUDIT(CLAIM_SNAPSHOT)

 INFO 09-Nov-11 00:10:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:10:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


DECLARE
startNum number;
temp number;
BEGIN
select (max(id) + 1) into startNum from claim_audit;
temp := mod(startNum,100);
temp := (100 - temp);
startNum := startNum + temp; -- nearest 100th value :)
EXECUTE immediate 'CREATE SEQUENCE CLAIM_SNAPSHOT_XML_SEQ INCREMENT BY 20 START WITH ' || startNum || ' NOCACHE NOCYCLE' ;
END;

ERROR 09-Nov-11 00:10:23 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00955: name is already used by an existing object
ORA-06512: at line 10

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00955: name is already used by an existing object
ORA-06512: at line 10

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00955: name is already used by an existing object
ORA-06512: at line 10

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:573)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1891)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1093)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2047)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1940)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2709)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:854)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 09-Nov-11 00:10:23 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\TWMS_6.2_RC\dbpatches\R43_Upgrade-Patches\6.1\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\TWMS_6.2_RC\dbpatches\R43_Upgrade-Patches\6.1\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 09-Nov-11 00:10:23 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 09-Nov-11 00:13:50 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 09-Nov-11 00:13:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


DECLARE 
startNum number; 
temp number; 
BEGIN 
select (max(id) + 1) into startNum from claim_audit; 
temp := mod(startNum,100); 
temp := (100 - temp); 
startNum := startNum + temp; -- nearest 100th value :) 
EXECUTE immediate 'CREATE SEQUENCE CLAIM_SNAPSHOT_XML_SEQ INCREMENT BY 20 START WITH ' || startNum || ' NOCACHE NOCYCLE' ; 
END;

ERROR 09-Nov-11 00:13:50 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00955: name is already used by an existing object
ORA-06512: at line 10

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00955: name is already used by an existing object
ORA-06512: at line 10

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00955: name is already used by an existing object
ORA-06512: at line 10

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:573)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1891)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1093)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2047)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1940)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2709)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:854)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 09-Nov-11 00:13:50 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\TWMS_6.2_RC\dbpatches\R43_Upgrade-Patches\6.1\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\TWMS_6.2_RC\dbpatches\R43_Upgrade-Patches\6.1\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 09-Nov-11 00:13:50 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 09-Nov-11 00:14:22 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 09-Nov-11 00:14:22 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


DECLARE 
startNum number; 
temp number; 
BEGIN 
select (max(id) + 1) into startNum from claim_audit; 
temp := mod(startNum,100); 
temp := (100 - temp); 
startNum := startNum + temp; -- nearest 100th value :) 
EXECUTE immediate 'CREATE SEQUENCE CLAIM_SNAPSHOT_XML_SEQ INCREMENT BY 20 START WITH ' || startNum || ' NOCACHE NOCYCLE' ; 
END;

ERROR 09-Nov-11 00:14:23 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00955: name is already used by an existing object
ORA-06512: at line 10

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00955: name is already used by an existing object
ORA-06512: at line 10

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00955: name is already used by an existing object
ORA-06512: at line 10

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:573)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1891)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1093)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2047)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1940)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2709)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:854)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 09-Nov-11 00:14:23 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\TWMS_6.2_RC\dbpatches\R43_Upgrade-Patches\6.1\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\TWMS_6.2_RC\dbpatches\R43_Upgrade-Patches\6.1\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 09-Nov-11 00:14:23 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 09-Nov-11 00:15:50 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 09-Nov-11 00:15:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


CREATE TABLE CLAIM_AUDIT_NEW AS SELECT ID, EXTERNAL_COMMENTS, INTERNAL,INTERNAL_COMMENTS,PREVIOUS_STATE,UPDATED_ON,VERSION,FOR_CLAIM,UPDATED_BY,LIST_INDEX,D_CREATED_ON,D_INTERNAL_COMMENTS,D_UPDATED_ON,D_LAST_UPDATED_BY,UPDATED_TIME,DECISION,MULTI_CLAIM_MAINTENANCE,PAYMENT from claim_audit

 INFO 09-Nov-11 00:16:46 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 09-Nov-11 00:16:46 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


DECLARE
startNum number;
temp number;
BEGIN
select (max(id) + 1) into startNum from claim_audit;
temp := mod(startNum,100);
temp := (100 - temp);
startNum := startNum + temp; -- nearest 100th value :)
EXECUTE immediate 'CREATE SEQUENCE CLAIM_SNAPSHOT_XML_SEQ INCREMENT BY 20 START WITH ' || startNum || ' NOCACHE NOCYCLE' ;
END;

ERROR 09-Nov-11 00:16:46 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00955: name is already used by an existing object
ORA-06512: at line 10

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00955: name is already used by an existing object
ORA-06512: at line 10

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00955: name is already used by an existing object
ORA-06512: at line 10

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:573)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1891)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1093)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2047)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1940)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2709)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:854)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 09-Nov-11 00:16:46 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\TWMS_6.2_RC\dbpatches\R43_Upgrade-Patches\6.1\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\TWMS_6.2_RC\dbpatches\R43_Upgrade-Patches\6.1\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 09-Nov-11 00:16:46 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 09-Nov-11 00:23:21 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 09-Nov-11 00:23:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 




insert into upload_error values(UPLOAD_ERROR_SEQ.nextval,'IB054','PRICE MATRIX')

 INFO 09-Nov-11 00:23:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:23:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

insert into upload_mgt_upload_errors values((select id from upload_mgt where name_of_template='installBaseUpload'), (select id from upload_error where code='IB054'))

 INFO 09-Nov-11 00:23:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:23:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

insert into i18nupload_error_text values(I18N_Upload_Error_SEQ.nextval,'en_US', 'Price Matrix is not set up for this date range and currency',(select id from upload_error where code='IB054'))

 INFO 09-Nov-11 00:23:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:23:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

insert into upload_error values(UPLOAD_ERROR_SEQ.nextval,'IB053','DEALER GROUP')

 INFO 09-Nov-11 00:23:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:23:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

insert into upload_mgt_upload_errors values((select id from upload_mgt where name_of_template='installBaseUpload'), (select id from upload_error where code='IB053'))

 INFO 09-Nov-11 00:23:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:23:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

insert into i18nupload_error_text values(I18N_Upload_Error_SEQ.nextval,'en_US', 'This dealer is currently not mapped to any DCAP Dealer Category',(select id from upload_error where code='IB053'))

 INFO 09-Nov-11 00:23:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:23:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

commit

 INFO 09-Nov-11 00:23:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:23:47 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 09-Nov-11 00:23:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create or replace
PROCEDURE STG_ALTER_SN_VALIDATION AS 
	CURSOR ALL_REC IS
		SELECT * FROM STG_ALTER_SERIALNUMBER
		WHERE NVL(ERROR_STATUS,'N') = 'N'
			AND UPLOAD_STATUS IS NULL 
		ORDER BY ID ASC;

    v_error_code			    VARCHAR2(4000) := NULL;
    v_error                     VARCHAR2(4000) := NULL;
    v_uploaded_by               VARCHAR2(255);
    v_bu_name                   VARCHAR2(255);
    v_success_count             NUMBER  := 0;
    v_error_count               NUMBER  := 0;
    v_count                     NUMBER  := NULL;
    v_file_upload_mgt_id        NUMBER  := 0;

    v_item_id                   NUMBER  := NULL;
    v_clm_count                 NUMBER;
    v_compgn_clm_count          NUMBER;
    v_sn_id                     NUMBER;
    v_pending_wnty              NUMBER;

BEGIN

	SELECT u.login, f.business_unit_info 
	INTO v_uploaded_by, v_bu_name
	FROM org_user u,file_upload_mgt f
	WHERE u.id = f.uploaded_by  AND f.id in
		(SELECT file_upload_mgt_id FROM STG_ALTER_SERIALNUMBER WHERE rownum = 1);



	FOR EACH_REC IN ALL_REC
	LOOP


	v_error_code              := NULL;
	v_clm_count               := 0;
	v_compgn_clm_count        := 0;
	v_sn_id                   :=  NULL;
	v_item_id                 := NULL;
	v_pending_wnty            := 0;


	IF each_rec.item_number IS NULL THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'SAS002');
	ELSIF NOT COMMON_VALIDATION_UTILS.isValidItemNumber(each_rec.item_number, v_bu_name) THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'SAS005');
	ELSE
	BEGIN
		SELECT i.id
		INTO v_item_id
		FROM ITEM i, PARTY p 
		WHERE ( lower(i.alternate_item_number) = lower(ltrim(rtrim(each_rec.item_number)))  OR 
			lower(i.item_number) = lower(ltrim(rtrim(each_rec.item_number))) )
			AND lower(i.business_unit_info) = lower(v_bu_name)
			AND i.owned_by = p.ID 
			AND p.NAME = common_utils.constant_oem_name and i.d_active = 1 AND ROWNUM = 1;
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'SAS005');
	END;
	END IF;


	IF each_rec.action IS NULL THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'SAS003');
	ELSIF UPPER(TRIM(EACH_REC.action)) NOT IN ('ACTIVATE', 'DEACTIVATE') THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'SAS006');
	END IF;


	IF each_rec.internal_comments IS NOT NULL and LENGTH(each_rec.internal_comments) > 255 THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'SAS007');
	END IF;


	IF each_rec.serial_number IS NULL THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'SAS001');
	ELSIF v_item_id is not null THEN
	BEGIN
		IF each_rec.action IS NOT NULL AND UPPER(TRIM(EACH_REC.action)) = 'DEACTIVATE' THEN
			SELECT inv.id,inv.pending_warranty 
				INTO v_sn_id, v_pending_wnty
			FROM inventory_item inv
			WHERE UPPER(inv.serial_number) = UPPER(each_rec.serial_number) 
				AND inv.business_unit_info = v_bu_name
				AND inv.of_type = v_item_id
				AND inv.d_active=1; 
		ELSIF each_rec.action IS NOT NULL AND UPPER(TRIM(EACH_REC.action)) = 'ACTIVATE' THEN
			SELECT inv.id,inv.pending_warranty 
			INTO v_sn_id, v_pending_wnty
			FROM inventory_item inv
			WHERE UPPER(inv.serial_number) = UPPER(each_rec.serial_number) 
				AND inv.business_unit_info = v_bu_name
				AND inv.of_type = v_item_id
				AND inv.d_active=0 AND ROWNUM=1; 
		END IF;
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		BEGIN
			SELECT inv.id INTO v_sn_id
			FROM inventory_item inv
			WHERE UPPER(inv.serial_number) = UPPER(each_rec.serial_number) 
				AND inv.business_unit_info = v_bu_name
				AND inv.of_type = v_item_id
				AND ROWNUM=1; 
		IF UPPER(TRIM(EACH_REC.action)) = 'DEACTIVATE' THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'SAS012');
		ELSIF UPPER(TRIM(EACH_REC.action)) = 'ACTIVATE' THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'SAS013');
		END IF;
			v_sn_id := NULL;
		EXCEPTION
		WHEN NO_DATA_FOUND THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'SAS004');
		END;
	WHEN OTHERS THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'SAS004');
	END;
	END IF;


	IF (v_sn_id IS NOT NULL AND UPPER(TRIM(EACH_REC.action)) = 'DEACTIVATE') THEN 
		select count(*) as cnt into v_clm_count 
		from claim c,claimed_item ci
		where ci.item_ref_inv_item = v_sn_id 
     and  ci.claim=c.id and c.state not in ('DELETED','DEACTIVATED','DRAFT_DELETED','DRAFT');
		IF v_clm_count > 0 THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'SAS008');
		END IF;


		select  count(*) as cnt1 into v_compgn_clm_count  
		from campaign_notification
		where item = v_sn_id and notification_status = 'PENDING';
		IF(v_compgn_clm_count > 0) THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'SAS009');
		END IF;


		IF(v_pending_wnty > 0) THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'SAS010');
		END IF; 
	END IF ;

	IF v_error_code IS NULL THEN
		UPDATE STG_ALTER_SERIALNUMBER
		SET ERROR_STATUS = 'Y',
			ERROR_CODE = NULL,
			SN_ID = v_sn_id 
		WHERE id = EACH_REC.id;
	ELSE
		UPDATE STG_ALTER_SERIALNUMBER
		SET ERROR_STATUS = 'N',
			ERROR_CODE = v_error_code
		WHERE id = EACH_REC.id;						
	END IF;
	commit;

	END LOOP;				

	BEGIN
        SELECT file_upload_mgt_id INTO v_file_upload_mgt_id 
        FROM STG_ALTER_SERIALNUMBER WHERE ROWNUM = 1;


        BEGIN
            SELECT count(*) INTO v_success_count
            FROM STG_ALTER_SERIALNUMBER 
            WHERE file_upload_mgt_id = v_file_upload_mgt_id and error_status = 'Y';
        EXCEPTION
            WHEN OTHERS THEN
                v_success_count := 0;
        END;


        BEGIN
            SELECT count(*) INTO v_error_count
            FROM STG_ALTER_SERIALNUMBER 
            WHERE file_upload_mgt_id = v_file_upload_mgt_id and error_status = 'N';
        EXCEPTION
            WHEN OTHERS THEN
                v_error_count := 0;
        END;


        SELECT count(*) INTO v_count
        FROM STG_ALTER_SERIALNUMBER 
        WHERE file_upload_mgt_id = v_file_upload_mgt_id;

        UPDATE file_upload_mgt SET 
            success_records= v_success_count, 
            error_records= v_error_count,
            total_records = v_count
        WHERE id = v_file_upload_mgt_id;

		COMMIT;
    EXCEPTION
    WHEN OTHERS THEN
		ROLLBACK;
		v_error := SUBSTR(SQLERRM, 1, 4000);
		UPDATE file_upload_mgt 
		SET error_message = v_error
		WHERE id = v_file_upload_mgt_id;
    END;
    commit;

END STG_ALTER_SN_VALIDATION;
 INFO 09-Nov-11 00:23:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:26:09 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 09-Nov-11 00:26:09 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





update claimed_item c set model_ref_for_unszed = (select model from item where id in (select of_type from inventory_item where id = c.item_ref_inv_item)), d_updated_on=sysdate,d_updated_time=sysdate, d_internal_comments = 'ESESA-1873 :: '|| d_internal_comments  where model_ref_for_unszed is null and item_ref_inv_item is not null

 INFO 09-Nov-11 00:31:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Nov-11 00:31:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

commit

 INFO 09-Nov-11 00:31:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
ERROR 31-May-12 12:17:22 tavant.platform.exceptions.LoggedTavantRuntimeException: Invalid input path specified for db patches
tavant.platform.exceptions.LoggedTavantRuntimeException: Invalid input path specified for db patches
	at tavant.platform.tools.dbPatches.core.DbPatchLoaderFactory.createDbPatchLoader(DbPatchLoaderFactory.java:76)
	at tavant.platform.tools.dbPatches.VersionManager.<init>(VersionManager.java:48)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:66)
ERROR 17-Jul-12 11:18:34 tavant.platform.exceptions.LoggedTavantRuntimeException: Invalid input path specified for db patches
tavant.platform.exceptions.LoggedTavantRuntimeException: Invalid input path specified for db patches
	at tavant.platform.tools.dbPatches.core.DbPatchLoaderFactory.createDbPatchLoader(DbPatchLoaderFactory.java:76)
	at tavant.platform.tools.dbPatches.VersionManager.<init>(VersionManager.java:48)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:66)
ERROR 17-Jul-12 11:20:57 tavant.platform.exceptions.LoggedTavantRuntimeException: Invalid input path specified for db patches
tavant.platform.exceptions.LoggedTavantRuntimeException: Invalid input path specified for db patches
	at tavant.platform.tools.dbPatches.core.DbPatchLoaderFactory.createDbPatchLoader(DbPatchLoaderFactory.java:76)
	at tavant.platform.tools.dbPatches.VersionManager.<init>(VersionManager.java:48)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:66)
ERROR 17-Jul-12 11:21:55 tavant.platform.exceptions.LoggedTavantRuntimeException: Invalid input path specified for db patches
tavant.platform.exceptions.LoggedTavantRuntimeException: Invalid input path specified for db patches
	at tavant.platform.tools.dbPatches.core.DbPatchLoaderFactory.createDbPatchLoader(DbPatchLoaderFactory.java:76)
	at tavant.platform.tools.dbPatches.VersionManager.<init>(VersionManager.java:48)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:66)
ERROR 17-Jul-12 12:00:48 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01017: invalid username/password; logon denied

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01017: invalid username/password; logon denied

	at tavant.platform.tools.dbPatches.VersionManager.initConnectionForReadingAlreadyAppliedPatches(VersionManager.java:219)
	at tavant.platform.tools.dbPatches.VersionManager.getAppliedPatches(VersionManager.java:79)
	at tavant.platform.tools.dbPatches.VersionManager.getPatchNamesToBeApplied(VersionManager.java:92)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:129)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-01017: invalid username/password; logon denied

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.O3log.receive2nd(O3log.java:497)
	at oracle.jdbc.ttc7.TTC7Protocol.logon(TTC7Protocol.java:279)
	at oracle.jdbc.driver.OracleConnection.<init>(OracleConnection.java:365)
	at oracle.jdbc.driver.OracleDriver.getConnectionInstance(OracleDriver.java:547)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:347)
	at tavant.platform.tools.dbPatches.core.DynamicJDBCDriverSource.getConnection(DynamicJDBCDriverSource.java:131)
	at tavant.platform.tools.dbPatches.VersionManager.initConnectionForReadingAlreadyAppliedPatches(VersionManager.java:215)
	... 5 more
ERROR 17-Jul-12 12:01:19 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01017: invalid username/password; logon denied

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01017: invalid username/password; logon denied

	at tavant.platform.tools.dbPatches.VersionManager.initConnectionForReadingAlreadyAppliedPatches(VersionManager.java:219)
	at tavant.platform.tools.dbPatches.VersionManager.getAppliedPatches(VersionManager.java:79)
	at tavant.platform.tools.dbPatches.VersionManager.getPatchNamesToBeApplied(VersionManager.java:92)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:129)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-01017: invalid username/password; logon denied

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.O3log.receive2nd(O3log.java:497)
	at oracle.jdbc.ttc7.TTC7Protocol.logon(TTC7Protocol.java:279)
	at oracle.jdbc.driver.OracleConnection.<init>(OracleConnection.java:365)
	at oracle.jdbc.driver.OracleDriver.getConnectionInstance(OracleDriver.java:547)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:347)
	at tavant.platform.tools.dbPatches.core.DynamicJDBCDriverSource.getConnection(DynamicJDBCDriverSource.java:131)
	at tavant.platform.tools.dbPatches.VersionManager.initConnectionForReadingAlreadyAppliedPatches(VersionManager.java:215)
	... 5 more
ERROR 17-Jul-12 12:02:12 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01017: invalid username/password; logon denied

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01017: invalid username/password; logon denied

	at tavant.platform.tools.dbPatches.VersionManager.initConnectionForReadingAlreadyAppliedPatches(VersionManager.java:219)
	at tavant.platform.tools.dbPatches.VersionManager.getAppliedPatches(VersionManager.java:79)
	at tavant.platform.tools.dbPatches.VersionManager.getPatchNamesToBeApplied(VersionManager.java:92)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:129)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-01017: invalid username/password; logon denied

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.O3log.receive2nd(O3log.java:497)
	at oracle.jdbc.ttc7.TTC7Protocol.logon(TTC7Protocol.java:279)
	at oracle.jdbc.driver.OracleConnection.<init>(OracleConnection.java:365)
	at oracle.jdbc.driver.OracleDriver.getConnectionInstance(OracleDriver.java:547)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:347)
	at tavant.platform.tools.dbPatches.core.DynamicJDBCDriverSource.getConnection(DynamicJDBCDriverSource.java:131)
	at tavant.platform.tools.dbPatches.VersionManager.initConnectionForReadingAlreadyAppliedPatches(VersionManager.java:215)
	... 5 more
 INFO 17-Jul-12 12:02:51 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:02:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 






alter table claim add (pending_recovery NUMBER(1))

 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create index pending_recovery_idx on claim (pending_recovery)

 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 






update claim set pending_recovery = 1 where id in (
    select
        claim1_.id 
    from
        jbpm_taskinstance taskinstan0_ cross 
    join
        claim claim1_ 
    inner join
        claim_claimed_items claimedite2_ 
            on claim1_.id=claimedite2_.claim 
    inner join
        claimed_item claimedite3_ 
            on claimedite2_.claimed_items=claimedite3_.id cross 
    join
        jbpm_task task4_ 
    where
        claim1_.business_unit_info in (
            'Thermo King TSA'
        ) 
        and taskinstan0_.task_=task4_.id_ 
        and taskinstan0_.isopen_=1 
        and taskinstan0_.claim_id=claim1_.id 
        and task4_.name_ = 'Pending Recovery Initiation'
        and (
            taskinstan0_.actorid_='towlejs' 
            or taskinstan0_.actorid_ in (
                'dealer', 'dealerSalesAdministration', 'processor', 'inspector', 'inventorylisting', 'SDataAdmin', 'dealerAdministrator', 'baserole', 'dsm', 'internalUserAdmin', 'dealerWarrantyAdmin', 'admin', 
                'receiver', 'inventoryFullView', 'supplierRecoveryInitiator', 'reducedCoverageRequestsApprover', 'inventoryAdmin', 'partshipper', 'dcapAdmin', 'dsmAdvisor', 'inventorysearch', 'readOnly'
            )
        ) 
      )

 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

COMMIT

 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





alter table STG_DRAFT_CLAIM rename column REPLACED_IR_PARTS to REPLACED_OEM_PARTS

 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

alter table STG_DRAFT_CLAIM rename column REPLACED_IR_PARTS_QUANTITY to REPLACED_OEM_PARTS_QUANTITY

 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

alter table STG_DRAFT_CLAIM rename column REPLACED_NON_IR_PARTS to REPLACED_NON_OEM_PARTS

 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

alter table STG_DRAFT_CLAIM rename column REPLACED_NON_IR_PARTS_QUANTITY to REPLACED_NON_OEM_PARTS_QTY

 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

alter table STG_DRAFT_CLAIM rename column REPLACED_NON_IR_PARTS_PRICE to REPLACED_NON_OEM_PARTS_PRICE

 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

alter table STG_DRAFT_CLAIM rename column REPLACED_NON_IR_PARTS_DESC to REPLACED_NON_OEM_PARTS_DESC

 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

alter table STG_DRAFT_CLAIM rename column IS_PART_INSTALLED_ON_TKTSA to IS_PART_INSTALLED_ON_OEM

 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

alter table STG_DRAFT_CLAIM rename column REPLACED_IR_PARTS_SERIAL_NUM to REPLACED_OEM_PARTS_SERIAL_NUM

 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

alter table STG_DRAFT_CLAIM rename column INSTALLED_IR_PARTS to INSTALLED_OEM_PARTS

 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

alter table STG_DRAFT_CLAIM rename column INSTALLED_IR_PARTS_QUANTITY to INSTALLED_OEM_PARTS_QUANTITY

 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

alter table STG_DRAFT_CLAIM rename column INSTALLED_IR_PARTS_SERIAL_NUM to INSTALLED_OEM_PARTS_SERIAL_NUM

 INFO 17-Jul-12 12:02:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:53 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:02:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create or replace
PROCEDURE                 UPLOAD_DRAFT_CLAIM_VALIDATION AS
CURSOR ALL_REC IS
	SELECT * FROM STG_DRAFT_CLAIM
	WHERE NVL(ERROR_STATUS,'N') = 'N' -- AND

		 ORDER BY ID ASC;

CURSOR DUP_REC IS
SELECT serial_number,campaign_code,COUNT(*)
          FROM STG_DRAFT_CLAIM
          WHERE claim_type='FIELDMODIFICATION'
          GROUP BY serial_number,campaign_code
          HAVING COUNT(*)>1;  

    v_loop_count            NUMBER         := 0;
    v_success_count         NUMBER         := 0;
    v_error_count           NUMBER         := 0;
    v_count                 NUMBER         := 0;
    v_count2                NUMBER         := 0;
    v_file_upload_mgt_id    NUMBER         := 0;
    v_number_temp           NUMBER         := 0;
    isFaultFoundValid       BOOLEAN        := FALSE;
    v_error                 VARCHAR2(4000) := NULL;
    v_error_code            VARCHAR2(4000) := NULL;
    v_model                 NUMBER := NULL;
	v_causal_part           VARCHAR2(255) := NULL;
	v_replaced_parts        VARCHAR2(255) := NULL;
	v_installed_parts       VARCHAR2(255) := NULL;
    v_temp_part_number      VARCHAR2(255) := NULL;
    v_product               NUMBER := NULL;
    v_machine_serial_number VARCHAR2(4000) := NULL;
    v_replaced_part      NUMBER := NULL;
    v_flag                  BOOLEAN := FALSE;
    v_valid_bu              BOOLEAN;
    v_valid_fault_found     BOOLEAN := FALSE;
    v_valid_campaign_code   BOOLEAN := FALSE;
    v_user_locale           VARCHAR2(255) := NULL;
    v_dealer                VARCHAR2(255) := NULL;
    v_dealer_id             NUMBER := NULL;
    v_bu_name               VARCHAR2(255) := NULL;
    v_smr_reason_id         VARCHAR2(255) := NULL;
    v_service_provider      NUMBER := NULL;
    v_service_provider_number  VARCHAR2(255) := NULL;
    v_delimiter             VARCHAR2(10) := '#$#';
    v_fault_code            VARCHAR2(255);
    v_job_codes_delimited   VARCHAR2(255);
    v_job_code              VARCHAR2(255);
    v_fault_found           VARCHAR2(255);    
    v_item_number           VARCHAR2(255) := NULL;   
    v_competitor_model_id   NUMBER := NULL;
    v_ac_input      		    NUMBER         := 0;
    v_id                    NUMBER := NULL;   
    v_repairdate        DATE := NULL;
    v_installeddate      VARCHAR2(255) := NULL;
    v_failuredate       VARCHAR2(255) := NULL;
    v_serial_number       VARCHAR2(20) := NULL;
	v_serialized BOOLEAN;
	v_part_installed BOOLEAN;
	v_part_installed_on_tktsa BOOLEAN;
	v_bu_config_display_item BOOLEAN := FALSE;
	v_err VARCHAR2(20);
	v_inv NUMBER;
	v_item NUMBER;
	v_part_serial NUMBER;
	v_part NUMBER;
	v_model_id NUMBER;

BEGIN

    BEGIN
     FOR EACH_DUP_REC IN DUP_REC
      LOOP
        UPDATE STG_DRAFT_CLAIM
        SET ERROR_STATUS    = 'N',
          ERROR_CODE        = 'Field modification code is duplicate for same Serial Number'
        WHERE serial_number = EACH_DUP_REC.serial_number
        AND campaign_code   = EACH_DUP_REC.campaign_code;
      END LOOP;
    END;

    BEGIN
    SELECT u.locale, u.login, f.business_unit_info, o.id INTO v_user_locale, v_dealer, v_bu_name, v_dealer_id
    FROM org_user u,file_upload_mgt f,org_user_belongs_to_orgs orgu,organization o
    WHERE u.id = f.uploaded_by 
        and orgu.org_user=u.id and orgu.belongs_to_organizations=o.id AND f.id=(SELECT file_upload_mgt_id FROM stg_draft_claim WHERE rownum = 1);
       /* SELECT u.locale, u.login, f.business_unit_info, u.belongs_to_organization  INTO v_user_locale, v_dealer, v_bu_name, v_dealer_id
        FROM org_user u,file_upload_mgt f
        WHERE u.id = f.uploaded_by AND f.id = 
            (SELECT file_upload_mgt_id FROM stg_draft_claim WHERE rownum = 1);*/
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            v_user_locale := 'en_US';
    END;


    BEGIN
        SELECT id, service_provider_number 
		INTO v_service_provider,v_service_provider_number 
        FROM service_provider WHERE id=v_dealer_id;
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            NULL;
    END;

	IF common_validation_utils.isConfigParamSet('isItemNumberDisplayRequired', v_bu_name) THEN
		v_bu_config_display_item := TRUE;
	END IF;

  FOR EACH_REC IN ALL_REC
  LOOP

    v_error_code := '';
    v_model := NULL;
	v_causal_part := NULL;
	v_replaced_parts := NULL;
	v_installed_parts := NULL;
    v_product := NULL;
    v_valid_bu := FALSE;
    v_valid_fault_found := FALSE;
    v_job_codes_delimited := NULL;
    v_valid_campaign_code := FALSE;
    v_smr_reason_id := NULL;
    v_fault_code := NULL;
    v_job_code := NULL;
    v_fault_found := NULL;
	v_serial_number := ltrim(rtrim(each_rec.serial_number));
	v_err := NULL;
	v_inv := NULL;
	v_item := NULL;
	v_part_serial := NULL;
	v_part := NULL;
	v_model_id := NULL;
	v_machine_serial_number := NULL;
	v_item_number := NULL;
	v_competitor_model_id := NULL;
	v_serialized := TRUE;
	v_part_installed := FALSE;
	v_part_installed_on_tktsa := FALSE;
	v_repairdate := NULL;
	v_failuredate := NULL;
	v_installeddate := NULL;

	IF EACH_REC.REPAIR_DATE IS NOT NULL AND 
		COMMON_VALIDATION_UTILS.isValidDate(each_rec.REPAIR_DATE, 'YYYY-MM-DD') THEN
		v_repairdate := TO_DATE(each_rec.repair_date,'YYYY-MM-DD');
	ELSIF EACH_REC.REPAIR_DATE IS NOT NULL AND 
		COMMON_VALIDATION_UTILS.isValidDate(each_rec.REPAIR_DATE, 'YYYYMMDD') THEN
		v_repairdate := TO_DATE(each_rec.repair_date,'YYYYMMDD');
	ELSE
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC018');
	END IF;

	IF UPPER(EACH_REC.CLAIM_TYPE) NOT IN ('FIELDMODIFICATION') THEN
		IF EACH_REC.FAILURE_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.FAILURE_DATE, 'YYYY-MM-DD') THEN
			v_failuredate := TO_DATE(each_rec.FAILURE_DATE,'YYYY-MM-DD');
		ELSIF EACH_REC.FAILURE_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.FAILURE_DATE, 'YYYYMMDD') THEN
			v_failuredate := TO_DATE(each_rec.FAILURE_DATE,'YYYYMMDD');
		ELSE
			v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC019');
		END IF;
	END IF;

	IF UPPER(EACH_REC.CLAIM_TYPE) IN ('MACHINE NON SERIALIZED', 'PARTS WITH HOST') THEN
		IF EACH_REC.INSTALLATION_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.INSTALLATION_DATE, 'YYYY-MM-DD') THEN
			v_installeddate := TO_DATE(each_rec.INSTALLATION_DATE,'YYYY-MM-DD');
		ELSIF EACH_REC.INSTALLATION_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.INSTALLATION_DATE, 'YYYYMMDD') THEN
			v_installeddate := TO_DATE(each_rec.INSTALLATION_DATE,'YYYYMMDD');
		ELSE
			v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC020');
		END IF;
	END IF;


    BEGIN
        IF v_bu_name IS NULL OR lower(v_bu_name) != lower(each_rec.business_unit_name) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC001');
        ELSIF NOT (COMMON_VALIDATION_UTILS.isUserBelongsToBU(v_bu_name,v_dealer)) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC044');
        ELSE
            v_valid_bu := TRUE;
        END IF;
	END;

	IF EACH_REC.UNIQUE_IDENTIFIER IS NULL THEN
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC002');
	END IF;

	BEGIN
        IF each_rec.claim_type IS NULL OR UPPER(each_rec.claim_type) NOT IN 
            ('MACHINE SERIALIZED', 'MACHINE NON SERIALIZED', 'PARTS WITH HOST', 
            'PARTS WITHOUT HOST', 'FIELDMODIFICATION')
        THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC003');
        ELSIF v_valid_bu = TRUE AND NOT common_validation_utils.isClaimTypeAllowed(each_rec.claim_type, v_bu_name) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC066');
        END IF;
	END;


    IF UPPER(each_rec.claim_type) IN ('FIELDMODIFICATION') THEN
        IF each_rec.campaign_code IS NULL THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC026');
        ELSIF NOT common_validation_utils.isValidCampaignCode(each_rec.campaign_code, v_service_provider, v_bu_name,v_repairdate,v_service_provider_number,v_serial_number) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC065');
        ELSE
            v_valid_campaign_code := TRUE;
        END IF;
    END IF;

	IF UPPER(each_rec.is_serialized) = 'N' THEN
		v_serialized := FALSE;
	END IF;
	IF UPPER(each_rec.is_part_installed) = 'Y' THEN
		v_part_installed := TRUE;
	END IF;
	IF UPPER(each_rec.is_part_installed_on_oem) = 'Y' THEN
		v_part_installed_on_tktsa := TRUE;
	END IF;

	IF UPPER(each_rec.claim_type) = 'PARTS WITHOUT HOST' THEN
		v_serialized := NULL;
		v_part_installed_on_tktsa := NULL;
	ELSIF UPPER(each_rec.claim_type) in ('FIELDMODIFICATION',
		'MACHINE SERIALIZED','MACHINE NON SERIALIZED') THEN
		v_part_installed := NULL;
		v_part_installed_on_tktsa := NULL;
	ELSIF UPPER(each_rec.claim_type) = 'PARTS WITH HOST' AND v_serialized THEN
		v_part_installed_on_tktsa := NULL;
	END IF;

	IF NOT v_serialized AND UPPER(each_rec.claim_type) IN 
			('MACHINE SERIALIZED','FIELDMODIFICATION') THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC101');
	ELSIF v_serialized AND UPPER(each_rec.claim_type) IN 
			('MACHINE NON SERIALIZED') THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC107');
	END IF;
	IF UPPER(each_rec.claim_type) = 'PARTS WITH HOST' 
			AND NOT v_part_installed THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC102');
	END IF;
	IF UPPER(each_rec.claim_type) = 'PARTS WITHOUT HOST' 
			AND v_part_installed THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC103');
	END IF;

	IF UPPER(each_rec.claim_type) IN ('PARTS WITHOUT HOST','PARTS WITH HOST') THEN
		IF each_rec.part_serial_number IS NOT NULL THEN
			v_part_serial := common_validation_utils.getValidPartSerialNumber(
								each_rec.part_serial_number, v_bu_name);
			IF v_part_serial IS NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC073_PS');
			ELSE
			SELECT of_type INTO v_part 
			FROM inventory_item WHERE id=v_part_serial;
			BEGIN
				select id,serial_number into v_inv,v_machine_serial_number 
				from inventory_item where id in ( 
					select part_of from inventory_item_composition  
					where part = v_part_serial);
			EXCEPTION 
				WHEN NO_DATA_FOUND THEN
					NULL;
			END;
			END IF;
		ELSIF each_rec.part_item_number IS NOT NULL THEN
			v_part := common_validation_utils.isValidItemForPartsClaim(
								each_rec.PART_ITEM_NUMBER, v_bu_name,v_err);
			IF v_err IS NOT NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_'||v_err);
				v_err := NULL;
			END IF;
		ELSE
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC014');
		END IF;
	END IF;

	IF v_machine_serial_number IS NOT NULL THEN
		IF UPPER(each_rec.claim_type)='PARTS WITHOUT HOST' THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC104');
		ELSIF NOT v_serialized THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC105');
		ELSIF v_serial_number IS NULL THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC004');
		ELSIF UPPER(v_serial_number) != UPPER(v_machine_serial_number) THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_90');
		END IF;
	ELSIF v_serialized THEN
		IF v_serial_number IS NOT NULL THEN
			IF UPPER(each_rec.claim_type)='FIELDMODIFICATION' THEN
				v_inv := common_validation_utils.isValidInventoryForFieldMod(
							v_serial_number,each_rec.campaign_code,
							v_service_provider,v_bu_name,v_repairdate,v_err);
			ELSE
				v_inv := common_validation_utils.isValidMachineSerialNumber(
								v_serial_number, v_bu_name, each_rec.model_number,
								v_service_provider, v_err);
			END IF;
		ELSIF each_rec.container_number IS NOT NULL THEN
			IF UPPER(each_rec.claim_type)='FIELDMODIFICATION' THEN
				v_inv := common_validation_utils.isValidInventoryForFieldModWCN(
							each_rec.container_number,each_rec.campaign_code,
							v_service_provider,v_bu_name,v_repairdate,v_err);
			ELSE 
				v_inv := common_validation_utils.isValidInventoryWithConNum(
								each_rec.container_number, v_bu_name,v_err);
			END IF;
		ELSE
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC004');
		END IF;
		IF v_err IS NOT NULL THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_'||v_err);
			v_err := NULL;
			v_inv := NULL;
		END IF;
	ELSIF NOT v_serialized THEN
		IF v_part_installed AND NOT v_part_installed_on_tktsa THEN
			IF each_rec.competitor_model IS NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC106');
			ELSE
				v_competitor_model_id := common_validation_utils.getValidCompetitorModelId(
					each_rec.competitor_model, v_user_locale, v_bu_name);
				IF v_competitor_model_id IS NULL THEN
					v_error_code := common_utils.addErrorMessage(v_error_code,'DC071_CM');
				END IF;
			END IF;
		ELSIF (v_part_installed AND v_part_installed_on_tktsa)
				OR v_part_installed IS NULL THEN
			IF v_bu_config_display_item THEN
				IF each_rec.item_number IS NULL THEN
					v_error_code := common_utils.addErrorMessage(v_error_code,'DC011');
				ELSE 
					v_item := common_validation_utils.isValidItemForNonSerialized(
									each_rec.item_number,v_bu_name,v_err);
				END IF;
			ELSIF each_rec.model_number IS NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code,'DC009');
			ELSE
				v_model_id := common_validation_utils.isValidModelForNonSerialized(
									each_rec.model_number, v_bu_name, v_err);
			END IF;
			IF v_err IS NOT NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_'||v_err);
				v_err := NULL;
			END IF;
		END IF;
	END IF;

	IF v_model_id IS NOT NULL THEN
		v_model := v_model_id;
	ELSIF v_item IS NOT NULL THEN
		SELECT m.id INTO v_model
		FROM item i,item_group m
		WHERE i.id=v_item AND i.model=m.id;
	ELSIF v_inv IS NOT NULL THEN
		SELECT m.id,CASE WHEN p1.item_group_type='PRODUCT' THEN p1.id
			ELSE p2.id END INTO v_model,v_product
		FROM inventory_item ii,item i,item_group m,item_group p1,item_group p2
		WHERE ii.id=v_inv AND ii.of_type=i.id and i.model=m.id
			AND m.is_part_of=p1.id AND p1.is_part_of=p2.id;
	END IF;


     BEGIN
       IF EACH_REC.ALARM_CODES IS NOT NULL THEN          
            v_ac_input := Common_Utils.count_delimited_values(each_rec.ALARM_CODES, ',');
            FOR i IN 1 .. v_ac_input LOOP

                IF  v_product IS NOT NULL THEN       
                      IF NOT common_validation_utils.isValidAlarmCode(
                              common_utils.get_delimited_value(each_rec.ALARM_CODES, ',', i),v_product, v_bu_name)
                      THEN
                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC067_IAC');
                          EXIT;
                      END IF;
                ELSE 
                     select alarm_code.id into v_id from alarm_code where  lower(trim(code)) = lower(trim(common_utils.get_delimited_value(each_rec.ALARM_CODES, ',', i)));

                END IF;
            END LOOP;
        END IF; 
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC067_IAC');
     END;




  IF UPPER(EACH_REC.CLAIM_TYPE) IN ('MACHINE SERIALIZED', 'PARTS WITH HOST', 'FIELDMODIFICATION')
  THEN
    IF EACH_REC.HOURS_IN_SERVICE IS NULL
    THEN
      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC016');
    END IF;

    IF EACH_REC.HOURS_IN_SERVICE IS NOT NULL AND (EACH_REC.HOURS_IN_SERVICE < 0 OR EACH_REC.HOURS_IN_SERVICE > 999999)
    THEN
      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC017');
    END IF;
  END IF;

	BEGIN
		 IF EACH_REC.WORK_ORDER_NUMBER IS NULL
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC021');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.CONDITIONS_FOUND IS NULL
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC022');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.WORK_PERFORMED IS NULL
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC023');
		 END IF;
	END;




	BEGIN
    IF UPPER(EACH_REC.CLAIM_TYPE) NOT IN ('PARTS WITHOUT HOST', 'FIELDMODIFICATION') THEN
        IF (EACH_REC.CAUSAL_PART IS NOT NULL) THEN
            v_causal_part := COMMON_VALIDATION_UTILS.getValidCausalPart(EACH_REC.CAUSAL_PART, v_bu_name);
        END IF;
        IF EACH_REC.CAUSAL_PART IS NULL OR (EACH_REC.CAUSAL_PART IS NOT NULL AND v_causal_part IS NULL) THEN
		    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC025');
        ELSIF v_causal_part != each_rec.causal_part THEN
            UPDATE stg_draft_claim SET causal_part=v_causal_part WHERE id=each_rec.id;
		END IF;
    END IF;
	END;







    IF UPPER(each_rec.claim_type) NOT IN ('PARTS WITHOUT HOST') AND 
            each_rec.replaced_oem_parts IS NOT NULL THEN

         IF  each_rec.INSTALLED_OEM_PARTS IS NULL THEN            
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045_ADD_INP');         
         END IF;    

        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_oem_parts, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045');
            v_flag := FALSE;
        ELSE
            v_count := Common_Utils.count_delimited_values(each_rec.replaced_oem_parts, v_delimiter);
             IF  each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN            
                IF NOT common_validation_utils.isValidDelimitedValue(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter) THEN
                  v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045_SE');
                  v_flag := FALSE;
                ELSE
                  v_count2 := Common_Utils.count_delimited_values(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter); 
                END IF; 
             END IF;
            IF v_flag = TRUE THEN


            IF UPPER(each_rec.claim_type) IN ('PARTS WITH HOST') AND common_validation_utils.hasDuplicateSerializedPart(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM,each_rec.replaced_oem_parts, v_delimiter) THEN
                  v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_98');          
            END IF;

            FOR i IN 1 .. v_count LOOP
                IF i <= v_count2 THEN
                IF UPPER(each_rec.claim_type) IN ('PARTS WITHOUT HOST') THEN

                            IF UPPER(each_rec.PART_SERIAL_NUMBER) IS NOT NULL THEN
                               IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NULL THEN   
                                        v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Removed part should be serialized replaced part');                                         
                               ELSE
                                                     IF each_rec.PART_SERIAL_NUMBER != each_rec.REPLACED_OEM_PARTS_SERIAL_NUM THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Replaced part serial number should be same as part serial number');

                                                     ELSIF common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Serialized replaced part quatity should be one');
                                                     END IF;

                               END IF;  
                            ELSIF UPPER(each_rec.Part_item_Number) IS NOT NULL THEN
                                 IF each_rec.Replaced_OEM_Parts IS NOT NULL THEN
                                                  IF common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, i) != each_rec.Part_item_Number THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Please add correct replaced part');
                                                   END IF;
                                  END IF;                         
                                  IF UPPER(each_rec.REPLACED_OEM_PARTS_QUANTITY) IS NOT NULL THEN
                                                  IF common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i) !=1 THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Replaced part quantity should be one only');   
                                                   END IF;
                                  END IF;                 
                             END IF;
                END IF; 
                        IF UPPER(each_rec.claim_type) IN ('PARTS WITH HOST') THEN

                            IF UPPER(each_rec.PART_SERIAL_NUMBER) IS NOT NULL THEN
                                   IF common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_79');
                                   END IF;

                                   IF each_rec.Is_Serialized in ('Y') THEN

                                          IF each_rec.Is_Part_Installed_on_OEM in ('Y') THEN                                         

                                              IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                    select count(*) into v_replaced_part from  Inventory_Item_Composition where part_of in (select id from inventory_item where serial_number = v_machine_serial_number ) and part in (select id from inventory_item where serial_number=common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i) );   

                                                     IF v_replaced_part != 1 THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_78');                                                     
                                                     END IF;
                                               END IF;


                                               IF each_rec.Installed_OEM_Parts_Serial_Num IS NOT NULL THEN
                                                    IF common_utils.get_delimited_value(each_rec.Installed_OEM_Parts_Quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_80');
                                                     END IF;
                                               END IF;

                                           ELSE 

                                              IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL AND common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i) != each_rec.Part_Serial_Number THEN
                                                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_81');
                                              END IF;   

                                              IF each_rec.Installed_OEM_Parts_Serial_Num IS NOT NULL AND common_utils.get_delimited_value(each_rec.Installed_OEM_Parts_Quantity, v_delimiter, i) !=1 THEN

                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_80');

                                               END IF;
                                           END IF;

                                    ELSE
                                             IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL AND common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i) != each_rec.Part_Serial_Number THEN
                                                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_81');
                                              END IF;    

                                              IF each_rec.Installed_OEM_Parts_Serial_Num IS NOT NULL AND common_utils.get_delimited_value(each_rec.Installed_OEM_Parts_Quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_80');
                                               END IF;  
                                    END IF;


                            ELSIF UPPER(each_rec.Part_item_Number) IS NOT NULL THEN

                                      IF each_rec.Is_Serialized in ('Y') THEN    

                                            IF each_rec.Is_Part_Installed_on_OEM in ('Y') THEN
                                                  IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_82');
                                                   END IF;        

                                            ELSE
                                                  IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_82'); 
                                                  END IF;
                                                  IF each_rec.Replaced_OEM_Parts IS NOT NULL AND UPPER(each_rec.Part_item_Number) != common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, 1) THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_85');
                                                   END IF;
                                                   IF Common_Utils.count_delimited_values(each_rec.Replaced_OEM_Parts, v_delimiter)  !=1 THEN
                                                      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Should not add more than one part');
                                                   END IF;

                                                   IF each_rec.Installed_OEM_Parts_Serial_Num is NOT NULL THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_87');
                                                   END IF;  
                                             END IF;

                                       ELSE

                                              IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_84');
                                               END IF;

                                              IF each_rec.Replaced_OEM_Parts IS NOT NULL AND UPPER(each_rec.Part_item_Number) != common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, i) THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_85');
                                              END IF;

                                              IF Common_Utils.count_delimited_values(each_rec.Replaced_OEM_Parts, v_delimiter)  !=1 THEN
                                                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Should not add more than one part');
                                              END IF;

                                              IF each_rec.Installed_OEM_Parts_Serial_Num is NOT NULL THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_87');
                                              END IF;  
                                       END IF;
                            END IF;   
                         END IF; 
                        IF NOT common_validation_utils.isValidReplacedIRPart(common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i),
                              common_utils.get_delimited_value(each_rec.replaced_OEM_parts, v_delimiter, i), v_bu_name)
                        THEN
                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC046');
                          EXIT;
                        END IF;

                ELSE          

                              IF UPPER(each_rec.Part_item_Number) IS NOT NULL THEN
                                   IF each_rec.Is_Part_Installed_on_OEM in ('N') OR each_rec.Is_Serialized in ('N') THEN                                         

                                        IF each_rec.Replaced_OEM_Parts IS NOT NULL AND UPPER(each_rec.Part_item_Number) != common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, i) THEN
                                                                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_88');
                                        END IF;

                                        IF Common_Utils.count_delimited_values(each_rec.Replaced_OEM_Parts, v_delimiter)  !=1 THEN
                                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Should not add more than one part');
                                        END IF;

                                        IF each_rec.Installed_OEM_Parts_Serial_Num is NOT NULL THEN
                                                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_87');
                                        END IF;  
                                    END IF;
                              END IF;

                      v_temp_part_number := common_validation_utils.getReplacedIRPartNumber(
		                        common_utils.get_delimited_value(each_rec.replaced_OEM_parts, v_delimiter, i), v_bu_name);
		                IF v_temp_part_number IS NULL
		                THEN
		                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC046');
		                    v_replaced_parts := NULL;
		                    EXIT;
		                END IF;
		                IF i > 1 THEN
		                    v_replaced_parts := v_replaced_parts || v_delimiter;
		                END IF;			  
						v_replaced_parts := v_replaced_parts || v_temp_part_number;
                END IF;     

            END LOOP;
			IF v_replaced_parts IS NOT NULL AND v_replaced_parts != each_rec.replaced_OEM_parts THEN
                UPDATE stg_draft_claim SET replaced_OEM_parts=v_replaced_parts WHERE id=each_rec.id;
            ENd IF;
            END IF;   
        END IF;

        IF each_rec.replaced_oem_parts_quantity IS NULL THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC027');
        ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_oem_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC047');
        ELSIF v_flag = TRUE AND v_count != Common_Utils.count_delimited_values(each_rec.replaced_oem_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC048');
        ELSIF v_flag = TRUE THEN
            FOR i IN 1 .. v_count LOOP
                IF NOT common_utils.isPositiveInteger(
                        common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i)) 
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC054');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
    END IF; 




    IF UPPER(each_rec.claim_type) NOT IN ('PARTS WITHOUT HOST') AND 
            each_rec.INSTALLED_OEM_PARTS IS NOT NULL THEN
        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.INSTALLED_OEM_PARTS, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045_INP');
            v_flag := FALSE;
        ELSE            
              IF v_count != Common_Utils.count_delimited_values(each_rec.INSTALLED_OEM_PARTS, v_delimiter) THEN
                 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC075');
              End If;
            v_count := Common_Utils.count_delimited_values(each_rec.INSTALLED_OEM_PARTS, v_delimiter);
            For I In 1 .. V_Count Loop               
                v_temp_part_number := common_validation_utils.getInstalledIRPart(
                        common_utils.get_delimited_value(each_rec.INSTALLED_OEM_PARTS, v_delimiter, i), v_bu_name);
                IF v_temp_part_number IS NULL
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC046_INP');
                    v_installed_parts := NULL;
                    EXIT;
                END IF;
                IF i > 1 THEN
                    v_installed_parts := v_installed_parts || v_delimiter;
                END IF;
                v_installed_parts := v_installed_parts || v_temp_part_number;
            END LOOP;
			IF v_installed_parts IS NOT NULL AND v_installed_parts != each_rec.INSTALLED_OEM_PARTS THEN
                UPDATE stg_draft_claim SET INSTALLED_OEM_PARTS=v_installed_parts WHERE id=each_rec.id;
            ENd IF;
        END IF;

        IF each_rec.INSTALLED_OEM_PARTS_QUANTITY IS NULL THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC027_INP');
        ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.INSTALLED_OEM_PARTS_QUANTITY, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC047_INP');
        ELSIF v_flag = TRUE AND v_count != Common_Utils.count_delimited_values(each_rec.INSTALLED_OEM_PARTS_QUANTITY, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC048_INP');
        ELSIF v_flag = TRUE THEN
            FOR i IN 1 .. v_count LOOP
                IF NOT common_utils.isPositiveInteger(
                        common_utils.get_delimited_value(each_rec.INSTALLED_OEM_PARTS_QUANTITY, v_delimiter, i)) 
                THEN
                      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC054_INP');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
    END IF;

    IF each_rec.miscellaneous_parts IS NOT NULL THEN
        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.miscellaneous_parts, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC049');
            v_flag := FALSE;
        ELSE
            v_count := Common_Utils.count_delimited_values(each_rec.miscellaneous_parts, v_delimiter);
            FOR i IN 1 .. v_count LOOP
                IF NOT common_validation_utils.isValidMiscPart(
                        common_utils.get_delimited_value(each_rec.miscellaneous_parts, v_delimiter, i), v_service_provider, v_bu_name)
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC050');
                    EXIT;
                END IF;
            END LOOP;
        END IF;

        IF each_rec.misc_parts_quantity IS NULL THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC051');
        ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.misc_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC052');
        ELSIF v_flag = TRUE AND v_count != Common_Utils.count_delimited_values(each_rec.misc_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC053');
        ELSIF v_flag = TRUE THEN
            FOR i IN 1 .. v_count LOOP
                IF NOT common_utils.isPositiveInteger(
                        common_utils.get_delimited_value(each_rec.misc_parts_quantity, v_delimiter, i)) 
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC055');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
    END IF;

    IF UPPER(each_rec.claim_type) NOT IN ('PARTS WITHOUT HOST') AND 
            each_rec.replaced_non_oem_parts IS NOT NULL 
    THEN
        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC056');
            v_flag := FALSE;
        ELSE
            v_count := common_utils.count_delimited_values(each_rec.replaced_non_oem_parts, v_delimiter);
            IF each_rec.replaced_non_oem_parts_qty IS NULL THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC028');
            ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts_qty, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC057');
            ELSIF v_count != common_utils.count_delimited_values(each_rec.replaced_non_oem_parts_qty, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC058');
            ELSE
                FOR i IN 1 .. v_count LOOP
                    IF NOT common_utils.isPositiveInteger(
                            common_utils.get_delimited_value(each_rec.replaced_non_oem_parts_qty, v_delimiter, i)) 
                    THEN
                        v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC059');
                        EXIT;
                    END IF;
                END LOOP;
            END IF;

            IF each_rec.replaced_non_oem_parts_price IS NULL THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC029');
            ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts_price, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC060');
            ELSIF v_count != common_utils.count_delimited_values(each_rec.replaced_non_oem_parts_price, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC061');
            END IF;

            IF each_rec.replaced_non_oem_parts_desc IS NULL THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC030');
            ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts_desc, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC062');
            ELSIF v_count != common_utils.count_delimited_values(each_rec.replaced_non_oem_parts_desc, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC063');
            END IF;        
        END IF;
    END IF;




	BEGIN
		 IF EACH_REC.SMR_CLAIM IS NOT NULL AND EACH_REC.SMR_CLAIM NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC031');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.COMMERCIAL_POLICY IS NOT NULL AND EACH_REC.COMMERCIAL_POLICY NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC068_CP');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.IS_PART_INSTALLED IS NOT NULL AND EACH_REC.IS_PART_INSTALLED NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC069_IPI');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.IS_PART_INSTALLED_ON_OEM IS NOT NULL AND EACH_REC.IS_PART_INSTALLED_ON_OEM NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC070_PITKTSA');
		 END IF;
	END;



	BEGIN
		 IF EACH_REC.SMR_CLAIM IS NOT NULL AND each_rec.smr_claim = 'Y' THEN
            IF EACH_REC.REASON_FOR_SMR_CLAIM IS NULL THEN
			    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC032');
            ELSE
                v_smr_reason_id := common_validation_utils.getValidSMRReasonId(each_rec.reason_for_smr_claim, v_user_locale, v_bu_name);
                IF v_smr_reason_id IS NULL THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC033');
                END IF;
            END IF;
		 END IF;
	END;

	IF (UPPER(each_rec.claim_type) = 'MACHINE NON SERIALIZED' OR
			(UPPER(each_rec.claim_type) = 'PARTS WITH HOST' 
				AND NOT v_serialized AND v_part_installed_on_tktsa))
			AND COMMON_VALIDATION_UTILS.isConfigParamSet('invoiceNumberApplicable', v_bu_name) 
			AND EACH_REC.INVOICE_NUMBER IS NULL THEN
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC034');
	END IF;

	BEGIN
		 IF TO_NUMBER(EACH_REC.HOURS_ON_PARTS) IS NOT NULL  AND (TO_NUMBER(EACH_REC.HOURS_ON_PARTS)<0) 

		 THEN

			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC035');
		 END IF;
	END;





	BEGIN

		 IF UPPER(EACH_REC.CLAIM_TYPE) NOT IN ('PARTS WITHOUT HOST') AND 
		 EACH_REC.LABOUR_HOURS IS NOT NULL  
		 THEN
        IF EACH_REC.REASON_FOR_EXTRA_LABOR_HOURS IS NULL THEN 
        	 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036');
        ELSE 
         select count(1)  into v_id  from add_lbr_egl_service_providers alesp,additional_labor_eligibility ale where 
          alesp.additional_labor_eligibility=ale.id and ale.business_unit_info=v_bu_name and alesp.d_active = 1;
           IF v_id =0 then
              null;               
            ELSE             
                select count(1) into v_id from add_lbr_egl_service_providers alesp,additional_labor_eligibility ale where 
                alesp.SERVICE_PROVIDERS = v_dealer_id and alesp.additional_labor_eligibility=ale.id and ale.business_unit_info=v_bu_name
                and alesp.d_active = 1; 
                IF v_id = 0 then
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_ALH');
                END IF; 
            END IF; 
        END IF;  
		 END IF;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_ALH');

	END;

IF v_product IS NOT NULL THEN     




BEGIN
       IF UPPER(EACH_REC.LABOUR_HOURS)IS NOT NULL THEN 
               IF NOT common_validation_utils.isAllowedCostCategory('LABOR',v_product,v_bu_name) THEN
                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC072');                                
               END IF;
        END IF;

        EXCEPTION 
          WHEN OTHERS THEN
          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC072');
END;




BEGIN
       IF UPPER(EACH_REC.REPLACED_OEM_PARTS)IS NOT NULL THEN 
               IF NOT common_validation_utils.isAllowedCostCategory('OEM_PARTS',v_product,v_bu_name) THEN
                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_RP');                                
              END IF;
        END IF;

    EXCEPTION 
        WHEN OTHERS THEN
        v_error_code := Common_Utils.addErrorMessage(v_error_code, '123');
END;





BEGIN
       IF UPPER(EACH_REC.MISCELLANEOUS_PARTS)IS NOT NULL THEN 
            IF NOT common_validation_utils.isAllowedCostCategory('MISC_PARTS',v_product,'v_bu_name') THEN
                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_MP');                                
              END IF;
       END IF;
END;

END IF;

	IF v_repairdate IS NOT NULL AND v_failuredate IS NOT NULL 
			AND v_repairdate < v_failuredate THEN
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC037');
	END IF;

	BEGIN
        v_fault_code := common_utils.getValidFaultCode(EACH_REC.fault_location);
		 IF v_model IS NOT NULL  AND EACH_REC.fault_location IS NOT NULL AND 
     NOT COMMON_VALIDATION_UTILS.isValidFaultCodeForModelId(v_model, v_fault_code, v_bu_name)
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC038');
		 END IF;
	END;


	IF each_rec.job_code IS NOT NULL THEN
        v_count := Common_Utils.count_delimited_values_new(each_rec.job_code, ',');
        FOR i IN 1 .. v_count LOOP
            v_job_code := common_utils.getValidJobCode(common_utils.get_delimited_value(each_rec.job_code, ',', i));
            IF v_job_code IS NULL THEN
                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC039');
                EXIT;
            ELSIF v_model IS NOT NULL AND
                NOT common_validation_utils.isValidJobCodeForModelId(v_model, v_job_code, v_bu_name)
		    THEN
			    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC039');
                EXIT;
            ELSE
                IF v_job_codes_delimited IS NULL THEN
                    v_job_codes_delimited := '';
                ELSE
                    v_job_codes_delimited := v_job_codes_delimited || ',';
                END IF;
                v_job_codes_delimited := v_job_codes_delimited || v_job_code;
            END IF;

        END LOOP;
        IF each_rec.labour_hours IS NOT NULL AND Common_Utils.count_delimited_values(each_rec.labour_hours, ',') > 0 THEN
            IF Common_Utils.count_delimited_values_new(each_rec.labour_hours, ',') < v_count THEN
                v_count := Common_Utils.count_delimited_values_new(each_rec.labour_hours, ',');
            END IF;
            FOR i IN 1 .. v_count LOOP
                IF common_utils.get_delimited_value(each_rec.labour_hours, ',', i) IS NOT NULL AND 
                        common_utils.get_delimited_value(each_rec.labour_hours, ',', i) != '0' AND 
                        common_utils.get_delimited_value(each_rec.reason_for_extra_labor_hours, v_delimiter, i) IS NULL THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
	END IF;





	BEGIN
		 IF v_model IS NOT NULL  AND EACH_REC.FAULT_FOUND IS NOT NULL THEN
            IF NOT COMMON_VALIDATION_UTILS.isValidFaultFoundForModelId(v_model, EACH_REC.FAULT_FOUND, v_bu_name)
		    THEN
			    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC040');
            ELSE
                v_valid_fault_found := TRUE;
                SELECT ftd.name INTO v_fault_found
                FROM failure_type ft, 
                    i18nfailure_type_definition i18n_ftd,
                    failure_type_definition ftd
                where 
                    ft.definition_id = i18n_ftd.failure_type_definition
                    AND lower(i18n_ftd.name) = lower(ltrim(rtrim(each_rec.fault_found))) 
                    AND ft.for_item_group_id = v_model 
                    AND ft.d_active = 1
                    AND ftd.id = i18n_ftd.failure_type_definition
                    AND ROWNUM = 1;
            END IF;
		 END IF;
	END;


	BEGIN
		 IF v_valid_fault_found  AND EACH_REC.failure_detail IS NOT NULL AND 
     NOT COMMON_VALIDATION_UTILS.isValidRootCauseForModelId(v_model, EACH_REC.FAULT_FOUND, EACH_REC.failure_detail, v_bu_name)
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC042');
		 END IF;
	END;

    BEGIN
		 IF each_rec.technician_id IS NOT NULL AND 
            NOT COMMON_VALIDATION_UTILS.isValidTechnician(each_rec.technician_id, v_dealer, v_bu_name)
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC043');
		 END IF;
	END;


 IF v_error_code IS NULL
	THEN

	   UPDATE STG_DRAFT_CLAIM
	   SET
		  ERROR_STATUS = 'Y',
			ERROR_CODE = NULL,
            business_unit_name = v_bu_name,
            reason_for_smr_claim = v_smr_reason_id,
            competitor_model_id = v_competitor_model_id,
            fault_location = v_fault_code,
            job_code = v_job_codes_delimited,
            fault_found = v_fault_found,
            part_number=  v_item_number,
            repair_date= CAST (each_rec.REPAIR_DATE AS number(8,0)),                      
            failure_date= CAST (each_rec.FAILURE_DATE AS number(8,0)) ,                    
            installation_date=CAST (each_rec.INSTALLATION_DATE AS number(8,0)),
			serial_number_id = v_inv,
			item_number_id = v_item,
			model_id = v_model_id,
			part_id = v_part,
			part_serial_id = v_part_serial

		WHERE
		  ID = EACH_REC.ID;
	ELSE

		UPDATE STG_DRAFT_CLAIM
	   SET
		  ERROR_STATUS = 'N',
		  ERROR_CODE = v_error_code
		WHERE
		  ID = EACH_REC.ID;
	END IF;

    v_loop_count := v_loop_count + 1;

    IF v_loop_count = 10 THEN

      COMMIT;
      v_loop_count := 0; -- Initialize the count size
    END IF;

  END LOOP;

    BEGIN
     FOR EACH_DUP_REC IN DUP_REC
      LOOP
        UPDATE STG_DRAFT_CLAIM
        SET ERROR_STATUS    = 'N',
          ERROR_CODE        = 'Field modification code is duplicate for same Serial Number'
        WHERE serial_number = EACH_DUP_REC.serial_number
        AND campaign_code   = EACH_DUP_REC.campaign_code;
      END LOOP;
    END;

    IF v_loop_count > 0 THEN
        COMMIT;
    END IF;

  BEGIN



    SELECT DISTINCT file_upload_mgt_id 
    INTO v_file_upload_mgt_id
    FROM STG_DRAFT_CLAIM 
    WHERE ROWNUM < 2;


    BEGIN
      SELECT count(*)
      INTO v_success_count
      FROM STG_DRAFT_CLAIM 
      where file_upload_mgt_id = v_file_upload_mgt_id and error_status = 'Y';
    EXCEPTION
    WHEN OTHERS THEN
      v_success_count := 0;
    END;


    BEGIN
      SELECT count(*)
      INTO v_error_count
      FROM STG_DRAFT_CLAIM 
      where file_upload_mgt_id = v_file_upload_mgt_id and error_status = 'N';
    EXCEPTION
    WHEN OTHERS THEN
      v_error_count := 0;
    END;


    SELECT count(*)
    INTO v_count
    FROM STG_DRAFT_CLAIM 
    where file_upload_mgt_id = v_file_upload_mgt_id ;

    UPDATE FILE_UPLOAD_MGT 
    SET 
      SUCCESS_RECORDS= v_success_count, 
      ERROR_RECORDS= v_error_count,
      TOTAL_RECORDS = v_count
    WHERE ID = v_file_upload_mgt_id;

  EXCEPTION
  WHEN OTHERS THEN

    v_error := SUBSTR(SQLERRM, 1, 4000);
    UPDATE FILE_UPLOAD_MGT 
    SET 
      ERROR_MESSAGE = v_error
    WHERE ID = v_file_upload_mgt_id;

  END;
  COMMIT; -- Final Commit for the procedure

END UPLOAD_DRAFT_CLAIM_VALIDATION;

 INFO 17-Jul-12 12:02:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:55 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:02:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





alter table STG_INSTALL_BASE drop column DCAP_MODEL_CODE

 INFO 17-Jul-12 12:02:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:56 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:02:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create or replace
PROCEDURE                 "UPLOAD_INSTALL_BASE_UPLOAD" 
AS
  CURSOR ALL_REC
  IS
    SELECT *
    FROM STG_INSTALL_BASE
    WHERE NVL(ERROR_STATUS, 'N') = 'Y'
    AND ERROR_CODE              IS NULL
    AND NVL(UPLOAD_STATUS, 'N')  = 'N'
    ORDER BY ID ASC;

  v_inv_id                   NUMBER := NULL;
  v_type_of                  NUMBER := NULL;
  v_product                  NUMBER := NULL;
  v_model                    NUMBER := NULL;
  v_bu_name                  VARCHAR2(255);
  v_transacted_item          NUMBER := NULL;
  v_trans_type               NUMBER := NULL;
  v_oem_id                   NUMBER;
  v_dealer_id                NUMBER;
  v_end_customer_id          NUMBER;
  v_cust_addr_id             NUMBER;
  v_address_book_id          NUMBER;
  v_invoice_date             VARCHAR2(255);
  v_warranty_start_date      VARCHAR2(255);
  v_trans_id                 NUMBER := NULL;
  v_warranty_seq             NUMBER := NULL;
  v_mark_info_id             NUMBER := NULL;
  v_address_trans_id         NUMBER;
  v_warranty_audit_id        NUMBER := NULL;
  v_waranty_task_instance_id NUMBER := NULL;
  v_condition_type           VARCHAR2(255);
  v_competitor_model_id      NUMBER        := NULL;
  v_competitor_make_id       NUMBER        := NULL;
  v_transaction_type_id      NUMBER        := NULL;
  v_competition_type_id      NUMBER        := NULL;
  v_inventory_type           VARCHAR2(255) := NULL;
  v_source_warehouse         NUMBER;
  v_manufacturing_site       NUMBER;
  v_datasource_attr          NUMBER;
  v_engine_serno_attr        NUMBER;
  v_attr_value               NUMBER;
  v_count                    NUMBER;
  v_ownership_state_id       NUMBER;
  V_MULTIDRETRNUMBER         NUMBER := NULL;
  v_current_date DATE;
  v_buyer_id           NUMBER         := NULL;
  v_seller_id          NUMBER         := NULL;
  v_upload_error       VARCHAR2(4000) := NULL;
  v_warranty_id        NUMBER         := NULL;
  v_policy_id          NUMBER         := NULL;
  v_policy_audit_id    NUMBER         := NULL;
  v_policy_def_id      NUMBER         := NULL;
  v_list_of_values     NUMBER         := NULL;
  v_months_covered     NUMBER         := NULL;
  IS_POLICY_APPLICABLE VARCHAR2(255)  := NULL;
  v_coverage_till_date DATE;
  v_ship_coverage_till_date DATE;
  V_COVERAGE_END_DATE DATE;
  v_months_frm_shipment NUMBER;
  v_months_frm_delivery NUMBER;
  v_hours_in_service varchar2(255);  
  v_registration_date DATE;  
  v_serialized_part    NUMBER := 0;
  v_source             VARCHAR2(255)  := NULL;
  v_vin_number         VARCHAR2(255)  := NULL;
  v_installing_dealer  NUMBER := NULL;
  v_operator           NUMBER := NULL;
  v_fleet_number       VARCHAR2(255)  := NULL;  
  v_equipment_vin      VARCHAR2(255)  := NULL;
  v_uploaded_by		NUMBER := NULL;	
  v_max_list_index NUMBER := -1;
  v_wnty_start_date DATE  := NULL;
  V_Wnty_End_Date Date    := Null;

 v_item_group_id	NUMBER;
 V_Mod_Cat		Number;
 v_price_matrix_id	NUMBER;
 V_Split_Type 		VARCHAR2(20);
 v_split_percentage	NUMBER;
 V_Sca_Amount		Number;
 V_Sea_Amount		Number;
 V_Grid_Amount		Number;
 v_grid_amount_curr	VARCHAR2(20);
 v_currency VARCHAR2(20);

 V_Dcap_Dealer_Group  Dealers_In_Group.Dealer_Group%Type;
 v_dcap_scheme_id            DEALER_SCHEME.ID%TYPE;

BEGIN
  SELECT id
  INTO v_oem_id
  FROM party
  WHERE name = common_utils.constant_oem_name;
  SELECT id
  INTO v_ownership_state_id
  FROM ownership_state
  WHERE name='First Owner';

  FOR each_rec IN all_rec
  Loop

    Begin


      v_bu_name             := common_validation_utils.getValidBusinessUnitName(each_rec.business_unit_name);
      v_inventory_type      := UPPER(EACH_REC.STOCK_OR_RETAIL);
      v_condition_type      := UPPER(NVL(each_rec.inventory_item_type, 'NEW'));
      v_invoice_date        := NVL(each_rec.invoice_date, each_rec.shipment_date);
      v_warranty_start_date := NVL(each_rec.warranty_start_date, each_rec.delivery_date);
      v_hours_in_service    := NVL(each_rec.hours_in_service, '0');
      v_warranty_id         := 0;
      v_policy_id           := 0;
      v_policy_audit_id     := 0;
      v_policy_def_id       :=0;
      v_end_customer_id     := NULL;
      v_cust_addr_id        := NULL;
      v_address_book_id     := NULL;
      V_Manufacturing_Site  := Null;



	    select uploaded_by into v_uploaded_by from file_upload_mgt where id = each_rec.file_upload_mgt_id;
      SELECT id,
        product,
        model
      INTO v_type_of,
        v_product,
        v_model
      FROM item
      WHERE (UPPER(item_number)       = UPPER(each_rec.item_number)
      OR UPPER(alternate_item_number) = UPPER(each_rec.item_number))
      AND business_unit_info          = v_bu_name
	    AND item_type 				  = 'MACHINE'
      AND owned_by 		              = v_oem_id -- Added to fix ESESA-838 / ESESA-839
      AND ROWNUM                      =1;

      BEGIN
        SELECT id
        INTO v_source_warehouse
        FROM source_warehouse
        WHERE business_unit_info=v_bu_name
        AND UPPER(code)         =UPPER(each_rec.ship_from_warehouse) AND d_active=1;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN

		  IF (upper(v_bu_name) = 'HUSSMANN') then
			select id into v_source_warehouse from source_warehouse where business_unit_info = 'Hussmann'  and name = 'BGN' and d_active=1;
		  END IF;
      END;

      IF each_rec.manufacturing_site IS NOT NULL THEN
        BEGIN
          SELECT id
          INTO v_manufacturing_site
          FROM list_of_values
          WHERE business_unit_info=v_bu_name
          AND UPPER(code)         =UPPER(each_rec.manufacturing_site)
          AND type                ='MANUFACTURINGSITEINVENTORY';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          v_manufacturing_site := NULL;
        END;
      End If;

      SELECT inventory_item_seq.NEXTVAL-1 INTO v_inv_id FROM DUAL;


      INSERT
      INTO inventory_item
        (
          id,
          built_on,
          hours_on_machine,
          serial_number,
          shipment_date,
          version,
          condition_type,
          type,
          of_type,
          ownership_state,
          business_unit_info,
          manufacturing_site_inventory,
          factory_order_number,
          pending_warranty,
          d_active,
          source_warehouse,
          d_updated_on,
          d_created_on,
          d_updated_time,
          d_created_time,
		  d_internal_comments,
		  d_last_updated_by,
	      serialized_part
        )
        VALUES
        (
          v_inv_id,
          TO_DATE(each_rec.machine_build_date,'YYYYMMDD'),
          v_hours_in_service,
          each_rec.serial_number,
          TO_DATE(each_rec.shipment_date,'YYYYMMDD'),
          1,
          v_condition_type,
          v_inventory_type,
          v_type_of,
          v_ownership_state_id,
          v_bu_name,
          v_manufacturing_site,
          each_rec.factory_order_number,
          0,
          1,
          v_source_warehouse,
          sysdate,
          sysdate,
          SYSTIMESTAMP,
          SYSTIMESTAMP,
		  'InstallBase Upload',
	      v_uploaded_by,
	      v_serialized_part
        );




      SELECT dealer.id
      INTO v_dealer_id
      FROM service_provider dealer,
        organization org,
        bu_org_mapping buorg
      WHERE UPPER(service_provider_number) = UPPER(each_rec.dealer_number)
      AND dealer.id                        = org.id
      AND org.id                           = buorg.org
      AND buorg.bu                         = v_bu_name;

      IF v_inventory_type                  ='RETAIL' THEN
        BEGIN
          IF each_rec.end_customer_number IS NOT NULL THEN
            SELECT c.id
            INTO v_end_customer_id
            FROM customer c,
              customer_addresses ca,
              address_book_address_mapping abam,
              address_book ab
            WHERE c.customer_id         = each_rec.end_customer_number
            AND c.id                    = ca.customer
            AND ca.addresses            = abam.address_id
            AND abam.address_book_id    = ab.id
            AND ab.belongs_to           = v_dealer_id
            AND ab.type                 = 'ENDCUSTOMER'
            AND ROWNUM                  = 1;
          ELSIF UPPER(each_rec.country) = 'US' THEN
            SELECT c.id
            INTO v_end_customer_id
            FROM customer c,
              customer_addresses ca,
              address a
            WHERE c.id                 = ca.customer
            AND ca.addresses           = a.id
            AND UPPER(c.company_name)  = UPPER(each_rec.end_customer_name)
            AND UPPER(a.address_line1) = UPPER(each_rec.address_line1)
            AND UPPER(a.email)         = UPPER(each_rec.e_mail)
            AND UPPER(a.country)       = UPPER(each_rec.country)
            AND UPPER(a.state)         = UPPER(each_rec.state)
            AND UPPER(a.city)          = UPPER(each_rec.city)
            AND UPPER(a.zip_code)      = UPPER(each_rec.zipcode)
            AND ROWNUM                 = 1;
          ELSE
            SELECT c.id
            INTO v_end_customer_id
            FROM customer c,
              customer_addresses ca,
              address a
            WHERE c.id                 = ca.customer
            AND ca.addresses           = a.id
            AND UPPER(c.company_name)  = UPPER(each_rec.end_customer_name)
            AND UPPER(a.address_line1) = UPPER(each_rec.address_line1)
            AND UPPER(a.email)         = UPPER(each_rec.e_mail)
            AND UPPER(a.country)       = UPPER(each_rec.country)
            AND UPPER(a.city)          = UPPER(each_rec.city)
            AND ROWNUM                 = 1;
          END IF;

          SELECT addresses
          INTO v_cust_addr_id
          FROM customer_addresses
          WHERE customer                   = v_end_customer_id
          AND ROWNUM                       = 1;

          IF each_rec.end_customer_number IS NOT NULL THEN
            UPDATE party
            SET name = each_rec.end_customer_name
            WHERE id = v_end_customer_id;

            UPDATE customer
            SET company_name = each_rec.end_customer_name,
              customer_id    = each_rec.end_customer_number,
              locale         = each_rec.prefered_language
            WHERE id         = v_end_customer_id;

            UPDATE address
            SET address_line1     = each_rec.address_line1,
              address_line2       = each_rec.address_line2,
              address_line3       = each_rec.address_line3,
              country             = each_rec.country,
              state               = each_rec.state,
              city                = each_rec.city,
              zip_code            = each_rec.zipcode,
              contact_person_name = each_rec.contact_person_name,
              email               = each_rec.e_mail,
              phone               = each_rec.phone_number,
              secondary_phone     = each_rec.fax_number,
              version             = version+1,
              d_updated_on        = SYSDATE
            WHERE id              = v_cust_addr_id;

          END IF;

        EXCEPTION
        WHEN NO_DATA_FOUND THEN

          BEGIN
            SELECT id
            INTO v_address_book_id
            FROM address_book
            WHERE belongs_to = v_dealer_id
            AND type         = 'ENDCUSTOMER'
            AND ROWNUM       = 1;
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
            SELECT address_book_seq.nextval-1 INTO v_address_book_id FROM DUAL;
            INSERT
            INTO address_book
              (
                id,
                type,
                version,
                belongs_to,
                d_internal_comments,
                d_active,
                d_updated_on,
                d_created_on,
                d_updated_time,
                d_created_time
              )
              VALUES
              (
                v_address_book_id,
                'ENDCUSTOMER',
                0,
                v_dealer_id,
                'InstallBase Upload',
                1,
                sysdate,
                sysdate,
                SYSTIMESTAMP,
                SYSTIMESTAMP
              );
          END;
          SELECT address_seq.nextval-1 INTO v_cust_addr_id FROM DUAL;
          INSERT
          INTO address
            (
              id,
              address_line1,
              address_line2,
              address_line3,
              country,
              state,
              city,
              zip_code,
              contact_person_name,
              email,
              phone,
              secondary_phone,
              version,
              d_active,
              d_internal_comments,
              d_updated_on,
              d_created_on,
              d_updated_time,
              d_created_time
            )
            VALUES
            (
              v_cust_addr_id,
              each_rec.address_line1,
              each_rec.address_line2,
              each_rec.address_line3,
              UPPER(each_rec.country),
              UPPER(each_rec.state),
              UPPER(each_rec.city),
              each_rec.zipcode,
              each_rec.contact_person_name,
              each_rec.e_mail,
              each_rec.phone_number,
              each_rec.fax_number,
              0,
              1,
              'InstallBase Upload',
              sysdate,
              sysdate,
              SYSTIMESTAMP,
              SYSTIMESTAMP
            );
          SELECT party_seq.nextval-1 INTO v_end_customer_id FROM DUAL;
          INSERT
          INTO PARTY
            (
              id,
              name,
              version,
              address,
              d_active,
              d_internal_comments,
              d_updated_on,
              d_created_on,
              d_updated_time,
              d_created_time
            )
            VALUES
            (
              v_end_customer_id,
              each_rec.end_customer_name,
              0,
              v_cust_addr_id,
              1,
              'InstallBase Upload',
              sysdate,
              sysdate,
              SYSTIMESTAMP,
              SYSTIMESTAMP
            );
          INSERT
          INTO customer
            (
              id,
              company_name,
              individual,
              locale,
              customer_id
            )
            VALUES
            (
              v_end_customer_id,
              each_rec.end_customer_name,
              0,
              each_rec.prefered_language,
              each_rec.end_customer_number
            );
          UPDATE address SET belongs_to = v_end_customer_id WHERE id = v_cust_addr_id;
          INSERT
          INTO customer_addresses
            (
              customer,
              addresses
            )
            VALUES
            (
              v_end_customer_id,
              v_cust_addr_id
            );
          INSERT
          INTO address_book_address_mapping
            (
              id,
              is_primary,
              type,
              version,
              address_id,
              address_book_id,
              d_created_on,
              d_internal_comments,
              d_active
            )
            VALUES
            (
              addressbook_addmap_seq.nextval-1,
              1,
              'SHIPPING',
              0,
              v_cust_addr_id,
              v_address_book_id,
              SYSDATE,
              'InstallBase Upload',
              1
            );
        END;
      END IF;


      BEGIN
        IF v_inventory_type='STOCK' THEN
          UPDATE inventory_item
          SET current_owner = v_dealer_id ,
              latest_buyer    = v_dealer_id,
			  D_UPDATED_ON   = sysdate,               ---added for the tracking(TWMS4.3U-834)
			  D_UPDATED_TIME = SYSTIMESTAMP ,         ---added for the tracking(TWMS4.3U-834)
			  d_last_updated_by =  v_uploaded_by          ---added for the tracking(TWMS4.3U-834)
          WHERE id          = v_inv_id;
        END IF;
        IF v_inventory_type='RETAIL' THEN
          UPDATE inventory_item
          SET delivery_date = TO_DATE(each_rec.delivery_date, 'YYYYMMDD'),
            current_owner   = v_dealer_id ,
            latest_buyer    = v_end_customer_id,
			 D_UPDATED_ON   = sysdate,                 ---added for the tracking(TWMS4.3U-834)
			 D_UPDATED_TIME = SYSTIMESTAMP,             ---added for the tracking(TWMS4.3U-834)
			 d_last_updated_by =  v_uploaded_by        ---added for the tracking(TWMS4.3U-834)
          WHERE id          = v_inv_id;
        END IF;
      END;
      v_transacted_item := v_inv_id;
      SELECT id
      INTO v_trans_type
      FROM inventory_transaction_type
      WHERE trnx_type_key = 'IB';
      SELECT inventory_transaction_seq.NEXTVAL-1 INTO v_trans_id FROM DUAL;
      INSERT
      INTO inventory_transaction
        (
          id,
          invoice_date,
          invoice_number,
          sales_order_number,
          transaction_date,
          version,
          buyer,
          transacted_item,
          seller,
          inv_transaction_type,
          owner_ship,
          transaction_order,
          status,
          ship_to_site_number,
          d_active,
          d_updated_on,
          d_created_on,
          d_updated_time,
          d_created_time,
		  d_last_updated_by,
		  hours_on_machine
        )
        VALUES
        (
          v_trans_id,
          TO_DATE(v_invoice_date,'YYYYMMDD'),
          each_rec.invoice_number,
          each_rec.sales_order_number,
          sysdate,
          0,
          v_dealer_id,
          v_transacted_item,
          v_oem_id,
          v_trans_type,
          v_dealer_id,
          1,
          'ACTIVE',
          each_rec.dealer_site_number,
          1,
          sysdate,
          sysdate,
          SYSTIMESTAMP,
          SYSTIMESTAMP,
		  v_uploaded_by,
		  v_hours_in_service
        );


     IF each_rec.engine_serial_number IS NOT NULL THEN
        BEGIN
          SELECT id
          INTO v_engine_serno_attr
          FROM attribute
          WHERE business_unit_info=v_bu_name
          AND name                ='EngineSerialNo'
          AND ROWNUM              =1;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          SELECT attribute_seq.nextval-1 INTO v_engine_serno_attr FROM DUAL;
          INSERT
          INTO attribute
            (
              id,
              name,
              version,
              d_active,
              business_unit_info,
              d_internal_comments,
              d_updated_on,
              d_created_on,
              d_updated_time,
              d_created_time
            )
            VALUES
            (
              v_engine_serno_attr,
              'EngineSerialNo',
              0,
              1,
              v_bu_name,
              'InstallBase Upload',
              sysdate,
              sysdate,
              SYSTIMESTAMP,
              SYSTIMESTAMP
            );
        End;


        SELECT attr_value_seq.nextval-1 INTO v_attr_value FROM DUAL;
        INSERT
        INTO attr_value
          (
            id,
            version,
            attribute,
            value,
            d_internal_comments,
            d_active,
            d_updated_on,
            d_created_on,
            d_updated_time,
            d_created_time
          )
          VALUES
          (
            v_attr_value,
            0,
            v_engine_serno_attr,
            each_rec.engine_serial_number,
            'Install Base Upload',
            1,
            sysdate,
            sysdate,
            SYSTIMESTAMP,
            SYSTIMESTAMP
          );
        INSERT INTO inv_item_attr_value
          (id
          ) VALUES
          (v_attr_value
          );
        INSERT
        INTO inv_item_attr_vals
          (
            inv_item_id,
            inv_item_attr_val_id
          )
          VALUES
          (
            v_inv_id,
            v_attr_value
          );
      End If;


      BEGIN
        SELECT id
        INTO v_datasource_attr
        FROM attribute
        WHERE business_unit_info=v_bu_name
        AND name                ='DataSource'
        AND ROWNUM              =1;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        SELECT attribute_seq.nextval-1 INTO v_datasource_attr FROM DUAL;
        INSERT
        INTO attribute
          (
            id,
            name,
            version,
            d_active,
            business_unit_info,
            d_internal_comments,
            d_updated_on,
            d_created_on,
            d_updated_time,
            d_created_time
          )
          VALUES
          (
            v_datasource_attr,
            'DataSource',
            0,
            1,
            v_bu_name,
            'InstallBase Upload',
            sysdate,
            sysdate,
           SYSTIMESTAMP,
            SYSTIMESTAMP
          );
      END;

      SELECT attr_value_seq.nextval-1 INTO v_attr_value FROM DUAL;
      INSERT
      INTO attr_value
        (
          id,
          version,
          attribute,
          value,
          d_internal_comments,
          d_active,
          d_updated_on,
          d_created_on,
          d_updated_time,
          d_created_time
        )
        VALUES
        (
          v_attr_value,
          0,
          v_datasource_attr,
          'Upload Management',
          'Install Base Upload',
          1,
          sysdate,
          sysdate,
          SYSTIMESTAMP,
          SYSTIMESTAMP
        );

      INSERT INTO inv_item_attr_value
        (id
        ) VALUES
        (v_attr_value
        );
      INSERT
      INTO inv_item_attr_vals
        (
          inv_item_id,
          inv_item_attr_val_id
        )
        VALUES
        (
          v_inv_id,
          v_attr_value
        );

      IF v_inventory_type='RETAIL' THEN
        SELECT id
        INTO v_trans_type
        FROM inventory_transaction_type
        WHERE trnx_type_key = 'DR' ;
        SELECT inventory_transaction_seq.NEXTVAL-1 INTO v_trans_id FROM DUAL;
        INSERT
        INTO inventory_transaction
          (
            id,
            invoice_date,
            invoice_number,
            sales_order_number,
            transaction_date,
            version,
            buyer,
            transacted_item,
            seller,
            inv_transaction_type,
            owner_ship,
            transaction_order,
            status,
            d_active,
            d_updated_on,
            d_created_on,
            d_updated_time,
            d_created_time,
			d_last_updated_by,
			hours_on_machine
          )
          VALUES
          (
            v_trans_id,
            TO_DATE(v_invoice_date,'YYYYMMDD'),
            each_rec.invoice_number,
            each_rec.sales_order_number,
            sysdate,
            1,
            v_end_customer_id,
            v_transacted_item,
            v_dealer_id,
            v_trans_type,
            v_dealer_id,
            2,
            'ACTIVE',
            1,
            sysdate,
            sysdate,
           SYSTIMESTAMP,
            SYSTIMESTAMP,
			V_Uploaded_By,
			v_hours_in_service
          );


        SELECT address INTO v_cust_addr_id FROM party WHERE id = v_end_customer_id;
        BEGIN
          SELECT id
          INTO v_competitor_model_id
          FROM competitor_model
          WHERE model            = 'UNKNOWN/NOT PROVIDED'
          AND business_unit_info = v_bu_name;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          v_competitor_model_id := NULL;
        END;
        BEGIN
          SELECT id
          INTO v_competitor_make_id
          FROM competitor_make
          WHERE make             = 'UNKNOWN/NOT PROVIDED'
          AND business_unit_info = v_bu_name;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          v_competitor_model_id := NULL;
        END;
        BEGIN
          SELECT id
          INTO v_transaction_type_id
          FROM transaction_type
          WHERE type             = 'Cash Sales'
          AND business_unit_info = v_bu_name;

        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          v_competitor_model_id := NULL;
        END;
        BEGIN
          SELECT id
          INTO v_competition_type_id
          FROM competition_type
          WHERE type             = 'UNKNOWN/NOT PROVIDED'
          AND business_unit_info = v_bu_name;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          v_competitor_model_id := NULL;
        End;

        SELECT marketing_information_seq.nextval-1 INTO v_mark_info_id FROM DUAL;
        INSERT
        INTO MARKETING_INFORMATION
          (
            id,
            customer_first_time_owner,
            months,
            version,
            years,
            market_type,
            competition_type,
            transaction_type,
            sales_man,
            if_previous_owner,
            competitor_model,
            competitor_make,
            d_active,
            d_updated_on,
            d_created_on,
            d_updated_time,
            d_created_time
          )
          VALUES
          (
            v_mark_info_id,
            0,
            NULL, --need to ask
            0,
            NULL,
            NULL, --need to ask, how we will decide this attribute value. CHANGE THIS VALUE TO PROBABLY REFLECT SOMETHING RELATED TO MIGARTION OR CAPTURE IT
            v_competition_type_id,
            v_transaction_type_id, --need to ask, why specifically given this value only, whereas other options r also there
            '',
            NULL,
            v_competitor_model_id,
            v_competitor_make_id,
            1,
            sysdate,
            sysdate,
            SYSTIMESTAMP,
            SYSTIMESTAMP
          );

        SELECT addressfortrans_seq.nextval-1 INTO v_address_trans_id FROM DUAL;
        INSERT INTO ADDRESS_FOR_TRANSFER
        SELECT v_address_trans_id,
          address_line1,
          city,
          contact_person_name,
          country,
          email,
          phone,
          secondary_phone,
          state,
          'BILLING',
          0,
          zip_code,
          NULL,
          NULL,
          NULL,
          NULL,
          NULL,
          NULL,
          1,
          address_line2,
          address_line3
        FROM ADDRESS
        WHERE ID = v_cust_addr_id;
        SELECT warranty_seq.nextval-1 INTO v_warranty_seq FROM DUAL;
        INSERT
        INTO WARRANTY
          (
            id,
            delivery_date,
            draft,
            version,
            marketing_information,
            for_transaction,
            customer,
            for_item,
            list_index,
            status,
            for_dealer,
            address_for_transfer,
            transaction_type,
            customer_type,
            d_active,
            d_updated_on,
            d_created_on,
            d_updated_time,
            d_created_time,
		filed_by,
	    d_internal_comments,
	    d_last_updated_by,
	    multidretrnumber,
	    modify_delete_comments,
	    operator,
	    installing_dealer,
	    oem,
	    fleet_number,
	    equipment_vin,
	    installation_date,
	    certified_installer,
	    non_certified_installer,
	    operator_type,
	    operator_address_for_transfer
          )
          VALUES
          (
            v_warranty_seq,
            TO_DATE(v_warranty_start_date,'YYYYMMDD'),
            0,
            0,
            v_mark_info_id,
            v_trans_id,
            v_end_customer_id,
            v_transacted_item,
            0,
            'ACCEPTED',
            v_dealer_id,
            v_address_trans_id,
            v_trans_type,
            'EndCustomer',
            1,
            sysdate,
            sysdate,
            SYSTIMESTAMP,
            SYSTIMESTAMP,
	    v_uploaded_by,
	    'InstallBase Upload',
	    v_uploaded_by,
	    v_multidretrnumber,
	    null,
	    v_operator,
	    v_installing_dealer,
	    null,
	    v_fleet_number,
	    v_equipment_vin,
	    TO_DATE(each_rec.installation_date,'YYYYMMDD'),
	    null,
	    null,
	    null,
	    null
          );

        SELECT warranty_audit_seq.nextval-1 INTO v_warranty_audit_id FROM DUAL;
        INSERT
        INTO WARRANTY_AUDIT
          (
            id,
            d_created_on,
            d_internal_comments,
            d_updated_on,
            status,
            for_warranty,
            list_index, --need to ask
            version,
            d_active,
            d_updated_time,
            d_created_time,
			d_last_updated_by
          )
          VALUES
          (
            v_warranty_audit_id,
            sysdate,
            NULL,
            sysdate,
            'SUBMITTED',
            v_warranty_seq,
            0,
            0,
            1,
            SYSTIMESTAMP,
           SYSTIMESTAMP,
			v_uploaded_by
          );


	  INSERT
        INTO WARRANTY_AUDIT
          (
            id,
            d_created_on,
            d_internal_comments,
            d_updated_on,
            status,
            for_warranty,
            list_index, --need to ask
            version,
            d_active,
            d_updated_time,
            d_created_time,
			d_last_updated_by
          )
          VALUES
          (
            warranty_audit_seq.nextval-1,
            sysdate,
            NULL,
            sysdate,
            'ACCEPTED',
            v_warranty_seq,
            1,
            0,
            1,
            SYSTIMESTAMP,
           SYSTIMESTAMP,
			v_uploaded_by
          );


        SELECT CURRENT_DATE INTO v_current_date FROM dual;
        IF UPPER(NVL(each_rec.apply_coverage, 'Y')) = 'Y' THEN
          DECLARE
            CURSOR all_policy_plans
            IS
              SELECT *
              FROM policy_definition
              WHERE ID IN
                (SELECT policy_defn
                FROM policy_for_products
                WHERE for_product IN (v_product, v_model)
                )
            AND business_unit_info            = v_bu_name
            AND UPPER(warranty_type)          = 'STANDARD'
            AND currently_inactive            = 0
            AND availability_ownership_state IN
              (SELECT id FROM ownership_state WHERE name IN ('First Owner', 'Both')
              );
          BEGIN
            FOR each_plan IN all_policy_plans
            LOOP
              BEGIN
                v_months_frm_shipment   := each_plan.months_frm_shipment;
                v_months_frm_delivery   := each_plan.months_frm_delivery;
                IF v_months_frm_shipment > 60000 THEN
                  v_months_frm_shipment := 60000;
                END IF;
                IF v_months_frm_delivery > 60000 THEN
                  v_months_frm_delivery := 60000;
                END IF;
                SELECT ADD_MONTHS(TO_DATE(each_rec.shipment_date, 'YYYYMMDD'), v_months_frm_shipment)-1
                INTO v_ship_coverage_till_date
                FROM DUAL;
                SELECT ADD_MONTHS(TO_DATE(v_warranty_start_date, 'YYYYMMDD'), v_months_frm_delivery)-1
                INTO v_coverage_till_date
                FROM DUAL;
                IF v_ship_coverage_till_date < v_coverage_till_date THEN
                  v_coverage_end_date       := v_ship_coverage_till_date;
                ELSE
                  v_coverage_end_date := v_coverage_till_date;
                END IF;
                is_policy_applicable   := 'TRUE';
                IF TO_DATE(v_warranty_start_date, 'YYYYMMDD') < each_plan.active_from 
                        OR TO_DATE(v_warranty_start_date, 'YYYYMMDD') > each_plan.active_till THEN
                  is_policy_applicable := 'FALSE';
                END IF;
                IF v_hours_in_service > each_plan.service_hrs_covered THEN
                  is_policy_applicable      := 'FALSE';
                END IF;
                SELECT COUNT(*)
                INTO v_count
                FROM applicable_customer_types
                WHERE policy_definition = each_plan.id
                AND type                = 'EndCustomer';
                IF v_count              = 0 THEN
                  is_policy_applicable := 'FALSE';
                END IF;
                SELECT COUNT(*)
                INTO v_count
                FROM policy_for_itemconditions
                WHERE policy_defn       = each_plan.id
                AND lower(for_itemcondition)   = lower(v_condition_type);
                IF v_count              = 0 THEN
                  is_policy_applicable := 'FALSE';
                END IF;



				if ( V_COVERAGE_END_DATE  < TO_DATE(v_warranty_start_date,'YYYYMMDD')) then
					V_COVERAGE_END_DATE := TO_DATE(v_warranty_start_date,'YYYYMMDD');
				end if ;

                IF is_policy_applicable = 'TRUE' THEN
                  SELECT policy_seq.NEXTVAL-1 INTO v_policy_id FROM DUAL;
                  INSERT
                  INTO POLICY
                    (
                      id,
                      amount,
                      currency,
                      policy_definition,
                      warranty,
                      d_active,
                      d_updated_on,
                      d_created_on,
                      d_updated_time,
                      d_created_time,
					  d_last_updated_by
                    )
                    VALUES
                    (
                      v_policy_id,
                      0,    --HARD CODED AND HAVE TO GET THE CLARIFICATION       -- NEED TO ASK, DO WE NEED TO PASS THESE VALUES
                      'USD',--HARD CODED AND HAVE TO GET THE CLARIFICATION
                      each_plan.id,
                      v_warranty_seq,
                      1,
                      sysdate,
                      sysdate,
                      SYSTIMESTAMP,
                     SYSTIMESTAMP,
					  v_uploaded_by
                    );

                  SELECT policy_audit_seq.NEXTVAL-1 INTO v_policy_audit_id FROM DUAL;
                  INSERT
                  INTO POLICY_AUDIT
                    (
                      id,
                      comments,
                      d_internal_comments,
                      created_on,
                      status,
                      from_date,
                      till_date,
                      created_by,
                      for_policy,
                      service_hours_covered,
                      d_active,
                      d_updated_on,
                      d_created_on,
                      d_updated_time,
                      d_created_time,
					  d_last_updated_by
                    )
                    VALUES
                    (
                      v_policy_audit_id,
                      NULL,
                      'Uploaded through InstallBase Upload',--HARD CODED AND HAVE TO GET THE CLARIFICATION
                      0,                                    --HARD CODED AND HAVE TO GET THE CLARIFICATION   -- NEED TO ASK, CAN V PASS SYSDATE HERE
                      'Active',
                      TO_DATE(v_warranty_start_date,'YYYYMMDD'),
                      V_COVERAGE_END_DATE,
                      NULL,
                      v_policy_id,
                      each_plan.service_hrs_covered,
                      1,
                      sysdate,
                      sysdate,
                     SYSTIMESTAMP,
                     SYSTIMESTAMP,
					  v_uploaded_by
                    );

                END IF;
              END;    --end of inner loop begin    

            END LOOP; --end of inner loop
          END;        --end of inner cursor begin
        END IF;       --end of apply coverage
      END IF;         -- end of check," if transaction_type = 'RETAIL'"

          v_max_list_index := -1;
          BEGIN
            SELECT MAX(list_index)
            INTO v_max_list_index
            FROM warranty
            WHERE for_item = v_inv_id;

            SELECT MIN(from_date)
            INTO v_wnty_start_date
            FROM INVENTORY_ITEM a,
              WARRANTY b,
              POLICY c,
              POLICY_AUDIT d
            WHERE b.for_item = a.id
            AND c.warranty   = b.id
            AND d.for_policy = c.id
            AND a.id         = v_inv_id
            AND c.d_active   = 1
            AND d.d_active   = 1
            AND b.list_index = v_max_list_index
            AND d.status     ='Active'
            AND d.id         =
              (SELECT MAX(id) FROM policy_audit WHERE for_policy=c.id
              );

            SELECT MAX(till_date)
            INTO v_wnty_end_date
            FROM INVENTORY_ITEM a,
              WARRANTY b,
              POLICY c,
              POLICY_AUDIT d
            WHERE b.for_item = a.id
            AND c.warranty   = b.id
            AND d.for_policy = c.id
            AND a.id         = v_inv_id
            AND c.d_active   = 1
            AND d.d_active   = 1
            AND b.list_index = v_max_list_index
            AND d.status     ='Active'
            AND d.id         =
              (SELECT MAX(id) FROM policy_audit WHERE for_policy=c.id
              );
            UPDATE INVENTORY_ITEM
            SET wnty_start_date = v_wnty_start_date,
              wnty_end_date     = v_wnty_end_date
            WHERE ID            = v_inv_id;
          EXCEPTION
          WHEN no_data_found THEN

            NULL;
          End;


      UPDATE stg_install_base
      SET upload_status = 'Y',
        upload_date     = SYSDATE,
        upload_error    = NULL
      WHERE id          = each_rec.id;
      COMMIT;
    EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      v_upload_error := SUBSTR(SQLERRM,0,3500);
      UPDATE stg_install_base
      SET upload_status = 'N',
        upload_date     = SYSDATE,
        upload_error    = v_upload_error
      WHERE id          = each_rec.id;
      COMMIT;
    END;
  END LOOP;
  COMMIT;
END UPLOAD_INSTALL_BASE_UPLOAD;

 INFO 17-Jul-12 12:02:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:02:59 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:02:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create or replace
PROCEDURE "ITEM_UPLOAD"
AS
  CURSOR ALL_REC
  IS
    SELECT *
    FROM ITEM_STAGING
    WHERE ERROR_STATUS         = 'Y'
    AND NVL(UPLOAD_STATUS,'N') = 'N'
    ORDER BY ID ASC;
  v_upload_error    VARCHAR2(4000) := NULL;
  v_parent_group_id VARCHAR2(255)  := NULL;
  v_supp_name       VARCHAR2(255)  := NULL;
  v_make_name       VARCHAR2(255)  := NULL;
  v_owner_id        VARCHAR2(255)  := NULL;
  v_oem_id          VARCHAR2(255)  := NULL;
  v_prod_id         VARCHAR2(255)  := NULL;
  v_item_id         NUMBER;
  v_item_type       VARCHAR2(255)  := NULL;
  v_bu              VARCHAR2(4000) := NULL;
  v_item_number     VARCHAR2(4000) := NULL;
  v_need_to_INSERT  NUMBER;
  v_service_part    NUMBER;
  v_uploaded_by		NUMBER := NULL;
BEGIN
  FOR EACH_REC IN ALL_REC
  LOOP
    BEGIN
      v_parent_group_id := 0;
      v_prod_id         := NULL;
      v_make_name       := NULL;
      v_owner_id        := NULL;
      v_item_type       := NULL;
      v_item_number     := NULL;
      v_need_to_INSERT  := 0;
      v_service_part    := 1;

	  select uploaded_by into v_uploaded_by from file_upload_mgt where id = each_rec.file_upload_mgt_id;

      SELECT NAME
      INTO v_bu
      FROM BUSINESS_UNIT
      WHERE UPPER(NAME) = UPPER(EACH_REC.BUSINESS_UNIT);
      SELECT EACH_REC.ITEM_NUMBER
      INTO v_item_number
      FROM dual;
      SELECT ID
      INTO v_parent_group_id
      FROM ITEM_GROUP
      WHERE UPPER(GROUP_CODE)    = UPPER(EACH_REC.ITEM_GROUP_CODE)
      AND BUSINESS_UNIT_INFO     = v_bu
      AND UPPER(ITEM_GROUP_TYPE) = 'MODEL'
	  AND d_active=1;

      BEGIN
        SELECT DECODE(UPPER(EACH_REC.ITEM_GROUP_CODE), 'PART', NULL , a.ID )
            INTO v_prod_id
            FROM
          (SELECT id,
            ITEM_GROUP_TYPE
          FROM ITEM_GROUP
          START WITH ID = v_parent_group_id
          CONNECT BY ID = PRIOR IS_PART_OF
            ) A
        WHERE A.ITEM_GROUP_TYPE = 'PRODUCT';
        EXCEPTION 
          WHEN NO_DATA_FOUND THEN
            v_prod_id := NULL;
      END;
      IF EACH_REC.OWNER      IS NOT NULL THEN
        BEGIN
          SELECT P.NAME,
            P.ID
          INTO v_make_name,
            v_owner_id
          FROM SUPPLIER S,
            PARTY P
          WHERE upper(S.SUPPLIER_NUMBER) = upper(EACH_REC.OWNER)
          AND S.ID                       = P.ID
          AND ROWNUM                     = 1;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          v_make_name:=NULL;
          v_owner_id := NULL;
        END;
      ELSE
        SELECT DECODE(P.NAME,'OEM',v_bu,P.NAME) ,
          P.ID
        INTO v_make_name,
          v_owner_id
        FROM PARTY P,
          ORGANIZATION O
        WHERE UPPER(P.NAME) = 'OEM'
        AND P.ID            = O.ID;
      END IF;
      IF UPPER(NVL(EACH_REC.UPDATES,'N')) = 'Y' THEN
        BEGIN
          SELECT ID
          INTO v_item_id
          FROM ITEM
          WHERE ITEM_NUMBER      = v_item_number
          AND BUSINESS_UNIT_INFO = V_BU AND owned_by=1;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          v_need_to_INSERT := 1;
        END;
      ELSE
        v_need_to_INSERT := 1;
      END IF;
      IF v_need_to_INSERT = 1 THEN
        SELECT ITEM_SEQ.NEXTVAL-1 INTO v_item_id FROM DUAL;
      END IF;
      SELECT DECODE(UPPER(EACH_REC.ITEM_GROUP_CODE),'PART','PART','MACHINE')
      INTO v_item_type
      FROM DUAL;

      SELECT DECODE(UPPER(EACH_REC.SERVICE_PART), NULL, 1, 'Y', 1, 0)
      INTO v_service_part
      FROM DUAL;

      IF v_need_to_INSERT = 0 THEN
        UPDATE ITEM
        SET DESCRIPTION        = EACH_REC.ITEM_DESC,
          MAKE                 = v_make_name,
          NAME                 = EACH_REC.ITEM_DESC,
          ITEM_NUMBER          = upper(v_item_number),
          SERIALIZED           = DECODE(EACH_REC.IS_SERIALIZED,'Y',1,0),
          USAGE_METER          = USAGE_METER,
          OWNED_BY             = v_owner_id,
          MODEL                = v_parent_group_id, --MODEL,
          PRODUCT              = v_prod_id,         --PRODUCT
          ITEM_TYPE            = v_item_type,
          Business_unit_info   = V_BU,
          status               =EACH_REC.ITEM_STATUS,
          UOM                  =UPPER(EACH_REC.UNIT_OF_MEASURE),
          D_ACTIVE             = DECODE(UPPER(EACH_REC.ITEM_STATUS),'INACTIVE',0,1),
		  D_UPDATED_ON         = sysdate,
		  D_UPDATED_TIME       =  SYSTIMESTAMP,
		  D_INTERNAL_COMMENTS  = D_INTERNAL_COMMENTS || ' Item Upload',
		  D_LAST_UPDATED_BY    = v_uploaded_by
        WHERE ID               = v_item_id
        AND BUSINESS_UNIT_INFO = v_bu;
        UPDATE ITEMS_IN_GROUP
        SET ITEM_GROUP = v_parent_group_id
        WHERE ITEM     = v_item_id;
        UPDATE I18NITEM_TEXT
        SET DESCRIPTION = EACH_REC.ITEM_DESC
        WHERE ITEM      = v_item_id;
      ELSE
        INSERT
        INTO ITEM
          (
            ID,
            COST_AMT,
            COST_CURR,
            DESCRIPTION,
            MAKE,
            NAME,
            ITEM_NUMBER,
            SERIALIZED,
            USAGE_METER,
            VERSION,
            ITEM_YEAR,
            OWNED_BY,
            MODEL,
            PRODUCT,
            ITEM_TYPE,
            Business_unit_info,
            status,
            UOM,
            duplicate_alternate_number,
            alternate_item_number,
            D_ACTIVE,
            service_part,
			D_CREATED_ON,
		  D_UPDATED_ON,
		  D_CREATED_TIME,
		  D_UPDATED_TIME,
		  D_INTERNAL_COMMENTS,
		  D_LAST_UPDATED_BY
          )
          VALUES
          (
            v_item_id,
            NULL,
            NULL,
            EACH_REC.ITEM_DESC,
            v_make_name,
            EACH_REC.ITEM_DESC,
            upper(v_item_number), --EACH_REC.ITEM_NUMBER,
            DECODE(EACH_REC.IS_SERIALIZED,'Y',1,0),
            DECODE(EACH_REC.HAS_HOUR_METER,'Y',1,0), --for hussmann, this should be zero by default   --DECODE(EACH_REC.HAS_HOUR_METER,'Y',1,0),    --need to ask
            0,
            NULL,
            v_owner_id,
            v_parent_group_id, --MODEL,
            v_prod_id,         --PRODUCT
            v_item_type,
            v_bu, --'Hussmann'
            EACH_REC.ITEM_STATUS,
            UPPER(EACH_REC.UNIT_OF_MEASURE),
            1,
            upper(v_item_number),
            1,
            v_service_part,
			sysdate,
			sysdate,
			 SYSTIMESTAMP,
			 SYSTIMESTAMP,
			'Item Upload',
			v_uploaded_by
          );
        INSERT
        INTO ITEMS_IN_GROUP
          (
            ITEM_GROUP,
            ITEM
          )
          VALUES
          (
            v_parent_group_id,
            v_item_id
          );
        DECLARE
        type v_Array IS varray
        (
          5
        )
        OF VARCHAR2
        (
          20
        )
        ;
        VA v_Array;
      BEGIN
        VA := v_Array
        (
          'en_EN', 'fr_FR', 'de_DE', 'en_US'
        )
        ;
        FOR i IN 1..4
        LOOP
          BEGIN
            INSERT
            INTO I18NITEM_TEXT
              (
                ID,
                LOCALE,
                DESCRIPTION,
                ITEM
              )
              VALUES
              (
                I18N_ITEM_TEXT_SEQ.NEXTVAL-1,
                VA(i),
                EACH_REC.ITEM_DESC,
                v_item_id
              );
          END;
        END LOOP;
      END;
    END IF;
    UPDATE ITEM_STAGING
    SET UPLOAD_STATUS = 'Y',
      UPLOAD_DATE     = SYSDATE,
      UPLOAD_ERROR    = NULL
    WHERE ID          = EACH_REC.ID;
    COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_upload_error := SUBSTR(SQLERRM,0,3500);
    UPDATE ITEM_STAGING
    SET UPLOAD_STATUS = 'N',
      UPLOAD_DATE     = SYSDATE,
      UPLOAD_ERROR    = v_upload_error
    WHERE ID          = EACH_REC.ID;
    COMMIT;
  END;
END LOOP;
END;

 INFO 17-Jul-12 12:03:00 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:00 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:03:00 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create or replace
PROCEDURE                "ITEM_VALIDATION" 
AS

  CURSOR ALL_REC 
  IS
  SELECT *
	FROM ITEM_STAGING
	WHERE NVL(ERROR_STATUS,'N') = 'N';

	v_error_code		            VARCHAR2(4000):= NULL;
	v_var				                NUMBER;
	v_scheme_id 	  	          NUMBER;
	v_bu_name                   VARCHAR2(255);
  v_valid_bu                  BOOLEAN;
  v_file_upload_mgt_id        NUMBER := 0;
  v_success_count             NUMBER := 0;
  v_error_count               NUMBER := 0;
  v_count                     NUMBER := 0;
  v_error                     VARCHAR2(4000) := NULL;
  V_UOM                       VARCHAR2(255);
  v_item_group_id             NUMBER := 0;
  v_item_group_code			      VARCHAR2(255);

BEGIN
SELECT f.business_unit_info INTO v_bu_name 
FROM file_upload_mgt f
WHERE f.id = (SELECT file_upload_mgt_id FROM item_staging WHERE rownum = 1);

SELECT id INTO v_scheme_id FROM item_scheme WHERE NAME = 'Prod Struct Scheme' 
AND BUSINESS_UNIT_INFO = v_bu_name;

FOR EACH_REC IN ALL_REC LOOP
BEGIN

    v_error_code := NULL;
    v_valid_bu := FALSE;

    IF each_rec.business_unit IS NULL THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'IT001');
    ELSIF UPPER(each_rec.business_unit) != UPPER(v_bu_name) THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'IT002');
    ELSE
        v_valid_bu := TRUE;
    END IF;

    IF EACH_REC.ITEM_NUMBER IS NULL THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'IT003');        
    END IF;				

    IF EACH_REC.ITEM_DESC IS NULL THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'IT004');
    END IF;				

    IF EACH_REC.ITEM_GROUP_CODE IS NULL THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'IT005');
    END IF;				

    IF EACH_REC.UNIT_OF_MEASURE IS NULL THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'IT019');
    END IF;				

    IF EACH_REC.IS_SERIALIZED IS NULL THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'IT006');
    ELSIF Upper(EACH_REC.IS_SERIALIZED) NOT IN ('Y','N') THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'IT007');
    END IF;				

    IF v_valid_bu AND v_bu_name='Hussmann' THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'IT008');
    END IF;				

    IF EACH_REC.ITEM_STATUS IS NULL  THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'IT009');
    ELSIF UPPER(EACH_REC.ITEM_STATUS) NOT IN ('ACTIVE','INACTIVE') THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'IT010');
    END IF;				

    IF EACH_REC.HAS_HOUR_METER IS NULL THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'IT011');
    ELSIF UPPER(EACH_REC.HAS_HOUR_METER) NOT IN ('N','Y') THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'IT012');
    END IF;	

	IF UPPER(EACH_REC.UNIT_OF_MEASURE) IS NOT NULL THEN
	BEGIN
		SELECT UOM INTO V_UOM FROM ITEM WHERE UOM IS NOT NULL AND UOM = UPPER(EACH_REC.UNIT_OF_MEASURE) AND ROWNUM=1;
	EXCEPTION
        WHEN NO_DATA_FOUND THEN
            v_error_code := common_utils.addErrorMessage(v_error_code, 'IT023');
	END;
	END IF;

    IF (EACH_REC.OWNER) IS NOT NULL THEN
    BEGIN
        SELECT 1 INTO v_var
        FROM SUPPLIER S, PARTY P
        WHERE UPPER(S.SUPPLIER_NUMBER) = UPPER(EACH_REC.OWNER) 
            AND S.ID = P.ID
            AND ROWNUM = 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            v_error_code := common_utils.addErrorMessage(v_error_code, 'IT013');
    END;
    END IF;


    IF UPPER(EACH_REC.ITEM_GROUP_CODE) IS NOT NULL  THEN
    BEGIN
        SELECT 1 INTO v_var
        FROM ITEM_GROUP IG
        WHERE IG.BUSINESS_UNIT_INFO = v_bu_name
            AND UPPER(IG.GROUP_CODE) = UPPER(EACH_REC.ITEM_GROUP_CODE)
            AND UPPER(ITEM_GROUP_TYPE) = 'MODEL'
            AND IG.SCHEME = v_scheme_id
            AND ROWNUM = 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            v_error_code := common_utils.addErrorMessage(v_error_code, 'IT014');
    END;					 	  
    END IF;				

    IF UPPER(NVL(EACH_REC.UPDATES,'N'))  NOT IN ('Y', 'N') THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'IT015');
    END IF;    
    BEGIN
        SELECT 1 INTO v_var
        FROM ITEM_STAGING
        WHERE ITEM_NUMBER = EACH_REC.ITEM_NUMBER AND
            NVL(OWNER,'X') = NVL(EACH_REC.OWNER,'X') AND
            ID <> EACH_REC.ID;
        v_error_code := common_utils.addErrorMessage(v_error_code, 'IT016');

    EXCEPTION
        WHEN NO_DATA_FOUND THEN       

            NULL;
    END;

    BEGIN
     IF v_bu_name='Hussmann' THEN
        IF EACH_REC.ITEM_NUMBER IS NOT NULL AND EACH_REC.OWNER IS NOT NULL
                AND UPPER(NVL(EACH_REC.UPDATES,'N')) = 'N' THEN
            BEGIN
                SELECT 1 INTO v_var
                FROM ITEM I,SUPPLIER S
                WHERE EACH_REC.OWNER = S.SUPPLIER_NUMBER AND
                    S.ID = I.OWNED_BY 
                    AND I.ITEM_NUMBER = EACH_REC.ITEM_NUMBER||'#'
                    AND I.BUSINESS_UNIT_INFO = v_bu_name 
                    AND ROWNUM = 1 ;
                v_error_code := common_utils.addErrorMessage(v_error_code, 'IT017');
            EXCEPTION WHEN
                NO_DATA_FOUND THEN
                    NULL;
            END;
        ELSIF EACH_REC.ITEM_NUMBER IS NOT NULL AND EACH_REC.OWNER IS NULL
                AND UPPER(NVL(EACH_REC.UPDATES,'N')) = 'N' THEN
            BEGIN
                SELECT 1 INTO v_var
                FROM ITEM I,PARTY P
                WHERE I.ITEM_NUMBER = EACH_REC.ITEM_NUMBER||'#'
                    AND I.BUSINESS_UNIT_INFO = v_bu_name
                    AND I.OWNED_BY = P.ID 
                    AND UPPER(P.NAME) = 'OEM'
                    AND	ROWNUM = 1;		
                v_error_code := common_utils.addErrorMessage(v_error_code, 'IT017');
            EXCEPTION WHEN
                NO_DATA_FOUND THEN
                    NULL;
            END;
        END IF;
      ELSE -- other business units(TK TSA)
      IF EACH_REC.ITEM_NUMBER IS NOT NULL AND EACH_REC.OWNER IS NOT NULL
                AND UPPER(NVL(EACH_REC.UPDATES,'N')) = 'N' THEN
            BEGIN
                SELECT 1 INTO v_var
                FROM ITEM I,SUPPLIER S
                WHERE EACH_REC.OWNER = S.SUPPLIER_NUMBER AND
                    S.ID = I.OWNED_BY 
                    AND I.ITEM_NUMBER = EACH_REC.ITEM_NUMBER
                    AND I.BUSINESS_UNIT_INFO = v_bu_name 
                    AND ROWNUM = 1 ;
                v_error_code := common_utils.addErrorMessage(v_error_code, 'IT017');
            EXCEPTION WHEN
                NO_DATA_FOUND THEN
                    NULL;
            END;
        ELSIF EACH_REC.ITEM_NUMBER IS NOT NULL AND EACH_REC.OWNER IS NULL
                AND UPPER(NVL(EACH_REC.UPDATES,'N')) = 'N' THEN
            BEGIN
                SELECT 1 INTO v_var
                FROM ITEM I,PARTY P
                WHERE I.ITEM_NUMBER = EACH_REC.ITEM_NUMBER
                    AND I.BUSINESS_UNIT_INFO = v_bu_name
                    AND I.OWNED_BY = P.ID 
                    AND UPPER(P.NAME) = 'OEM'
                    AND	ROWNUM = 1;		
                v_error_code := common_utils.addErrorMessage(v_error_code, 'IT017');
            EXCEPTION WHEN
                NO_DATA_FOUND THEN
                    NULL;
            END;
        END IF;
      END IF;
    END;


    BEGIN
     IF v_bu_name='Hussmann' THEN
        IF EACH_REC.ITEM_NUMBER IS NOT NULL AND EACH_REC.OWNER IS NOT NULL
                AND upper(EACH_REC.UPDATES) = 'Y' THEN
            BEGIN
                SELECT 1, I.MODEL INTO v_var,v_item_group_id
                FROM ITEM I,SUPPLIER S
                WHERE S.SUPPLIER_NUMBER =  EACH_REC.OWNER 
                    AND S.ID = I.OWNED_BY 
                    AND I.ITEM_NUMBER = EACH_REC.ITEM_NUMBER||'#'
                    AND I.BUSINESS_UNIT_INFO = v_bu_name
                    AND ROWNUM = 1 ;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    v_error_code := common_utils.addErrorMessage(v_error_code, 'IT018');
            END;
        ELSIF EACH_REC.ITEM_NUMBER IS NOT NULL AND EACH_REC.OWNER IS NULL AND upper(EACH_REC.UPDATES) = 'Y' THEN
                BEGIN
                    SELECT 1, I.MODEL INTO v_var,v_item_group_id
                    FROM ITEM I,PARTY P
                    WHERE I.ITEM_NUMBER = EACH_REC.ITEM_NUMBER||'#'
                        AND I.BUSINESS_UNIT_INFO = v_bu_name
                        AND I.OWNED_BY = P.ID 
                        AND UPPER(P.NAME) = 'OEM'
                        AND	ROWNUM = 1;		
                    EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                            v_error_code := common_utils.addErrorMessage(v_error_code, 'IT018');
                 END;
        END IF;
        ELSE 
        IF EACH_REC.ITEM_NUMBER IS NOT NULL AND EACH_REC.OWNER IS NOT NULL
                AND upper(EACH_REC.UPDATES) = 'Y' THEN
            BEGIN
                SELECT 1, I.MODEL INTO v_var,v_item_group_id
                FROM ITEM I,SUPPLIER S
                WHERE S.SUPPLIER_NUMBER =  EACH_REC.OWNER 
                    AND S.ID = I.OWNED_BY 
                    AND I.ITEM_NUMBER = EACH_REC.ITEM_NUMBER
                    AND I.BUSINESS_UNIT_INFO = v_bu_name
                    AND ROWNUM = 1 ;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    v_error_code := common_utils.addErrorMessage(v_error_code, 'IT018');
            END;
        ELSIF EACH_REC.ITEM_NUMBER IS NOT NULL AND EACH_REC.OWNER IS NULL AND upper(EACH_REC.UPDATES) = 'Y' THEN

                BEGIN
                    SELECT 1, I.MODEL INTO v_var,v_item_group_id
                    FROM ITEM I,PARTY P
                    WHERE I.ITEM_NUMBER = EACH_REC.ITEM_NUMBER
                        AND I.BUSINESS_UNIT_INFO = v_bu_name
                        AND I.OWNED_BY = P.ID 
                        AND UPPER(P.NAME) = 'OEM'
                        AND	ROWNUM = 1;		
                    EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                            v_error_code := common_utils.addErrorMessage(v_error_code, 'IT018');
                 END;

        END IF;
        END IF;

      IF upper(EACH_REC.UPDATES) = 'Y' THEN
        SELECT GROUP_CODE INTO v_item_group_code FROM ITEM_GROUP WHERE ID = v_item_group_id;
        IF UPPER(EACH_REC.ITEM_GROUP_CODE) <>  UPPER(v_item_group_code) THEN
          v_error_code := common_utils.addErrorMessage(v_error_code, 'IT024');
        END IF; 
      END IF;    

    END;

    IF EACH_REC.SERVICE_PART IS NOT NULL THEN
        IF UPPER(EACH_REC.SERVICE_PART) NOT IN ('Y', 'N') THEN
          v_error_code := common_utils.addErrorMessage(v_error_code, 'IT020');  
        END IF;
    END IF;

    IF v_error_code IS NULL THEN
        UPDATE ITEM_STAGING 
        SET
            ERROR_STATUS = 'Y',
            ERROR_CODE = NULL			   	
        WHERE ID = EACH_REC.ID;
    ELSE
        UPDATE ITEM_STAGING 
        SET
            ERROR_STATUS = 'N',
            ERROR_CODE = v_error_code
            WHERE ID = EACH_REC.ID;		   
    END IF;

    COMMIT;

END;	   
END LOOP; 

    BEGIN
        SELECT file_upload_mgt_id INTO v_file_upload_mgt_id 
        FROM item_staging WHERE ROWNUM = 1;


        BEGIN
            SELECT count(*) INTO v_success_count
            FROM item_staging 
            WHERE file_upload_mgt_id = v_file_upload_mgt_id and error_status = 'Y';
        EXCEPTION
            WHEN OTHERS THEN
                v_success_count := 0;
        END;


        BEGIN
            SELECT count(*) INTO v_error_count
            FROM item_staging 
            WHERE file_upload_mgt_id = v_file_upload_mgt_id and error_status = 'N';
        EXCEPTION
            WHEN OTHERS THEN
                v_error_count := 0;
        END;


        SELECT count(*) INTO v_count
        FROM item_staging 
        WHERE file_upload_mgt_id = v_file_upload_mgt_id;

        UPDATE file_upload_mgt SET 
            success_records= v_success_count, 
            error_records= v_error_count,
            total_records = v_count
        WHERE id = v_file_upload_mgt_id;

    EXCEPTION
        WHEN OTHERS THEN
            v_error := SUBSTR(SQLERRM, 1, 4000);
            UPDATE file_upload_mgt 
            SET 
                error_message = v_error
            WHERE id = v_file_upload_mgt_id;
    END;
    COMMIT;

END ITEM_Validation;

 INFO 17-Jul-12 12:03:00 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:00 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:03:00 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





alter table item_staging drop column PART_MANUFACTURING_CODE

 INFO 17-Jul-12 12:03:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:01 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:03:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





alter table STG_WARRANTY_REGISTRATIONS drop column IF_PREVIOUS_OWNER

 INFO 17-Jul-12 12:03:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:01 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:03:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create or replace
PROCEDURE UPLOAD_WARRANTY_REG_VALIDATION
AS
  CURSOR ALL_REC
  IS
    SELECT * FROM STG_WARRANTY_REGISTRATIONS WHERE ERROR_STATUS IS NULL;
  CURSOR ALL_ELIGIBLE_POLICY_PLANS(P_PRODUCT VARCHAR2, P_MODEL VARCHAR2, P_BU VARCHAR2, P_DEL_DATE DATE, P_HRS_ON_SERVICE NUMBER, P_CONDITION VARCHAR2, P_CERT_STATUS VARCHAR2, P_INSTALL_DEALER NUMBER)
  IS
    SELECT PD.*
    FROM POLICY_DEFINITION PD,
      POLICY_FOR_ITEMCONDITIONS PFI,
      (
      (SELECT PDG.POLICY_DEFN
      FROM POLICY_FOR_DEALER_GROUPS PDG,
        DEALERS_IN_GROUP DIG
      WHERE PDG.FOR_DEALER_GROUPS = DIG.DEALER_GROUP
      AND DIG.DEALER              = P_INSTALL_DEALER
      )
  UNION
    (SELECT PSP.POLICY_DEFN
    FROM POLICY_FOR_SERVICEPROVIDERS PSP
    WHERE PSP.FOR_SERVICE_PROVIDER = P_INSTALL_DEALER
    ) ) DLR_FILTER
    WHERE PD.ID IN
      (SELECT POLICY_DEFN
      FROM POLICY_FOR_PRODUCTS
      WHERE FOR_PRODUCT IN (P_PRODUCT, P_MODEL)
      )
    AND PD.ACTIVE_FROM                                           <= P_DEL_DATE
    AND PD.ACTIVE_TILL                                           >= P_DEL_DATE
    AND P_HRS_ON_SERVICE                                         <= PD.SERVICE_HRS_COVERED
    AND PD.BUSINESS_UNIT_INFO                                     = P_BU
    AND UPPER(PD.WARRANTY_TYPE)                                   = 'STANDARD'
    AND (DECODE(PD.CERTIFICATION_STATUS, 'NOTCERTIFIED', 'N', 'Y')= P_CERT_STATUS
    OR PD.CERTIFICATION_STATUS                                    = 'ANY')
    AND PD.ID                                                     = PFI.POLICY_DEFN
    AND PFI.FOR_ITEMCONDITION                                     = P_CONDITION
    AND PD.AVAILABILITY_OWNERSHIP_STATE                           = 1 --HARDCODED BECAUSE IT IS 1 FOR DATA MIGRATION
    AND PD.ID                                                     = DLR_FILTER.POLICY_DEFN(+)
    AND PD.D_ACTIVE                                               = 1
    AND NOT EXISTS
      (SELECT 1
      FROM POLICY_FEES
      WHERE POLICY        = PD.id
      AND is_transferable = 0
      AND amount          > 0
      );
    V_ERROR_CODE             VARCHAR2(4000):=NULL;
    V_ALLOW_OTHER_DLRS_STOCK VARCHAR2(10);
    V_UNIT_OWNER_TYPE        VARCHAR(50);
    V_CAP_INST_DLR_DATE      VARCHAR2(10);
    V_ADD_INFO_APPLICABLE    VARCHAR2(10);
    V_COMP_PART_ARRAY DBMS_UTILITY.UNCL_ARRAY;
    V_COMP_INSTALL_ARRAY DBMS_UTILITY.UNCL_ARRAY;
    V_COMP_SERIAL_ARRAY DBMS_UTILITY.UNCL_ARRAY;
    V_POL_ARRAY DBMS_UTILITY.UNCL_ARRAY;
    V_COMP_PART_COUNT    NUMBER := 0;
    V_COMP_INSTALL_COUNT NUMBER := 0;
    V_COMP_SERIAL_COUNT  NUMBER := 0;
    V_POL_COUNT          NUMBER;
    V_COMMIT_COUNT       NUMBER;
    V_VAR                NUMBER;
    V_FILING_PARTY       NUMBER;
    V_SHIP_DATE DATE;
    V_HOURS_ON_SERV      NUMBER(19) := 0;
    V_FILE_UPLOAD_MGT_ID NUMBER     := 0;
    V_SUCCESS_COUNT      NUMBER     := 0;
    V_ERROR_COUNT        NUMBER     := 0;
    V_COUNT              NUMBER     := 0;
    V_SERIAL_ID          NUMBER(19) := 0;
    V_CURR_OWNER_ID      NUMBER(19) := 0;
    V_COMPONENT_ID       NUMBER(19) := 0;
    V_PENDING_WR         NUMBER     := 0;
    V_BUILD_DATE DATE               := NULL;
    V_PRODUCT           NUMBER(19)            := 0;
    V_MODEL             NUMBER(19)            := 0;
    V_INSTALL_DEALER_ID NUMBER(19)            := NULL;
    V_CERT_STATUS       VARCHAR2(1)           := NULL;
    V_CONDITION         VARCHAR2(255)         :=NULL;
  BEGIN
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR047', ';WR047'),
      ERROR_STATUS            = 'N'
    WHERE BUSINESS_UNIT_INFO IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR048', ';WR048'),
      ERROR_STATUS                                = 'N'
    WHERE INSTR(NVL(TAV.ERROR_CODE,'X'), 'WR047') = 0
    AND NOT EXISTS
      ( SELECT 1 FROM BUSINESS_UNIT WHERE NAME = TAV.BUSINESS_UNIT_INFO
      )
    AND TAV.BUSINESS_UNIT_INFO IS NOT NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE       = 'WR001',
      ERROR_STATUS       = 'N'
    WHERE DEALER_NUMBER IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR002', ';WR002'),
      ERROR_STATUS = 'N'
    WHERE NOT EXISTS
      (SELECT 1
      FROM SERVICE_PROVIDER SP,
        BU_ORG_MAPPING BOM
      WHERE SP.ID                    = BOM.ORG
      AND BOM.BU                     = TAV.BUSINESS_UNIT_INFO
      AND SP.SERVICE_PROVIDER_NUMBER = TAV.DEALER_NUMBER
      )
    AND TAV.DEALER_NUMBER IS NOT NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR003', ';WR003'),
      ERROR_STATUS       = 'N'
    WHERE CUSTOMER_TYPE IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR004', ';WR004'),
      ERROR_STATUS                      = 'N'
    WHERE upper(TAV.CUSTOMER_TYPE) NOT IN
      (SELECT upper(CFO.VALUE)
      FROM CONFIG_PARAM_OPTION CFO,
        CONFIG_VALUE CV,
        CONFIG_PARAM CP
      WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
      AND CV.CONFIG_PARAM       = CP.ID
      AND CP.NAME               = 'customersFilingDR'
      AND CV.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
      )
    AND TAV.CUSTOMER_TYPE IS NOT NULL;
    COMMIT;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR005', ';WR005'),
      ERROR_STATUS         = 'N'
    WHERE CUSTOMER_NUMBER IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR006', ';WR006'),
      ERROR_STATUS = 'N'
    WHERE NOT EXISTS
      (SELECT C.CUSTOMER_ID
      FROM CUSTOMER C
      WHERE C.CUSTOMER_ID = TAV.CUSTOMER_NUMBER
      )
    AND TAV.CUSTOMER_NUMBER IS NOT NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR007', ';WR007'),
      ERROR_STATUS = 'N'
    WHERE NOT EXISTS
      (SELECT 1
      FROM ADDRESS_BOOK AB,
        SERVICE_PROVIDER SP
      WHERE SP.SERVICE_PROVIDER_NUMBER = TAV.DEALER_NUMBER
      AND SP.ID                        = AB.BELONGS_TO
      AND upper(AB.TYPE)               = upper(TAV.CUSTOMER_TYPE)
      )
    AND TAV.DEALER_NUMBER IS NOT NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR008', ';WR008'),
      ERROR_STATUS                            = 'N'
    WHERE INSTR(NVL(ERROR_CODE,'X'), 'WR007') = 0
    AND INSTR(NVL(ERROR_CODE,'X'), 'WR004')   = 0
    AND NOT EXISTS
      (SELECT 1
      FROM CUSTOMER C,
        CUSTOMER_ADDRESSES CA,
        SERVICE_PROVIDER SP,
        ADDRESS_BOOK AB,
        ADDRESS_BOOK_ADDRESS_MAPPING ABAM
      WHERE ABAM.ADDRESS_BOOK_ID     = AB.ID
      AND AB.TYPE                    = UPPER(TAV.CUSTOMER_TYPE)
      AND AB.BELONGS_TO              = SP.ID
      AND CA.CUSTOMER                = C.ID
      AND ABAM.ADDRESS_ID           IN (CA.ADDRESSES)
      AND C.CUSTOMER_ID              = TAV.CUSTOMER_NUMBER
      AND SP.SERVICE_PROVIDER_NUMBER = TAV.DEALER_NUMBER
      );
    COMMIT;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR010', ';WR010'),
      ERROR_STATUS     = 'N'
    WHERE ITEM_NUMBER IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR011', ';WR011'),
      ERROR_STATUS = 'N'
    WHERE NOT EXISTS
      (SELECT I.ID
      FROM ITEM I
      WHERE I.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
      AND I.ITEM_TYPE            = 'MACHINE'
      AND I.OWNED_BY             = 1
      AND I.ITEM_NUMBER          = TAV.ITEM_NUMBER
      AND I.D_ACTIVE             = 1
      )
    AND ITEM_NUMBER IS NOT NULL;
    COMMIT;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR012', ';WR012'),
      ERROR_STATUS       = 'N'
    WHERE SERIAL_NUMBER IS NULL;
    SELECT DISTINCT OU.BELONGS_TO_ORGANIZATION
    INTO V_FILING_PARTY
    FROM FILE_UPLOAD_MGT FUM,
      ORG_USER OU,
      STG_WARRANTY_REGISTRATIONS TAV
    WHERE TAV.FILE_UPLOAD_MGT_ID = FUM.ID
    AND FUM.UPLOADED_BY          = OU.ID;
    COMMIT;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR014', ';WR014'),
      ERROR_STATUS       = 'N'
    WHERE DELIVERY_DATE IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR015', ';WR015'),
      ERROR_STATUS          = 'N'
    WHERE HOURS_ON_MACHINE IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR050', ';WR050'),
      ERROR_STATUS             = 'N'
    WHERE TAV.OPERATOR_NUMBER IS NOT NULL
    AND TAV.OPERATOR_TYPE     IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR051', ';WR051'),
      ERROR_STATUS             = 'N'
    WHERE TAV.OPERATOR_NUMBER IS NULL
    AND TAV.OPERATOR_TYPE     IS NOT NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR016', ';WR016'),
      ERROR_STATUS                    = 'N'
    WHERE TAV.OPERATOR_TYPE          IS NOT NULL
    AND upper(TAV.OPERATOR_TYPE) NOT IN
      (SELECT upper(CFO.VALUE)
      FROM CONFIG_PARAM_OPTION CFO,
        CONFIG_VALUE CV,
        CONFIG_PARAM CP
      WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
      AND CV.CONFIG_PARAM       = CP.ID
      AND CP.NAME               = 'customersFilingDR'
      AND CV.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
      );
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR049', ';WR049'),
      ERROR_STATUS                            = 'N'
    WHERE INSTR(NVL(ERROR_CODE,'X'), 'WR016') = 0
    AND TAV.OPERATOR_NUMBER                  IS NOT NULL
    AND TAV.OPERATOR_TYPE                    IS NOT NULL
    AND NOT EXISTS
      (SELECT 1
      FROM CUSTOMER C,
        CUSTOMER_ADDRESSES CA,
        SERVICE_PROVIDER SP,
        ADDRESS_BOOK AB,
        ADDRESS_BOOK_ADDRESS_MAPPING ABAM
      WHERE ABAM.ADDRESS_BOOK_ID     = AB.ID
      AND upper(AB.TYPE)             = UPPER(TAV.OPERATOR_TYPE)
      AND AB.BELONGS_TO              = SP.ID
      AND CA.CUSTOMER                = C.ID
      AND ABAM.ADDRESS_ID           IN (CA.ADDRESSES)
      AND C.CUSTOMER_ID              = TAV.OPERATOR_NUMBER
      AND SP.SERVICE_PROVIDER_NUMBER = TAV.DEALER_NUMBER
      );
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR053', ';WR053'),
      ERROR_STATUS = 'N'
    WHERE TAV.OEM IS NOT NULL
    AND NOT EXISTS
      (SELECT 1
      FROM LIST_OF_VALUES
      WHERE TYPE             = 'OEM'
      AND DESCRIPTION        = TAV.OEM
      AND BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
      );
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR020', ';WR020'),
      ERROR_STATUS                     = 'N'
    WHERE TAV.COMPONENT_SERIAL_NUMBER IS NOT NULL
    AND TAV.COMPONENT_PART_NUMBER     IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR059', ';WR059'),
      ERROR_STATUS           = 'N'
    WHERE TAV.SERIAL_NUMBER IS NOT NULL
    AND TAV.ITEM_NUMBER     IS NOT NULL
    AND EXISTS
      (SELECT 1
      FROM INVENTORY_ITEM II,
        ITEM I
      WHERE II.SERIAL_NUMBER    = TAV.SERIAL_NUMBER
      AND II.SERIALIZED_PART    = 0
      AND II.D_ACTIVE           = 1
      AND II.OF_TYPE            = I.ID
      AND I.ITEM_NUMBER         = TAV.ITEM_NUMBER
      AND II.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
      AND I.BUSINESS_UNIT_INFO  = TAV.BUSINESS_UNIT_INFO
      AND II.CONDITION_TYPE     = 'SCRAP'
      );
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR060', ';WR0060'),
      ERROR_STATUS           = 'N'
    WHERE TAV.SERIAL_NUMBER IS NOT NULL
    AND TAV.ITEM_NUMBER     IS NOT NULL
    AND EXISTS
      (SELECT 1
      FROM INVENTORY_ITEM II,
        ITEM I
      WHERE II.SERIAL_NUMBER    = TAV.SERIAL_NUMBER
      AND II.SERIALIZED_PART    = 0
      AND II.D_ACTIVE           = 1
      AND II.OF_TYPE            = I.ID
      AND I.ITEM_NUMBER         = TAV.ITEM_NUMBER
      AND II.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
      AND I.BUSINESS_UNIT_INFO  = TAV.BUSINESS_UNIT_INFO
      AND II.TYPE               = 'RETAIL'
      );
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR021', ';WR021'),
      ERROR_STATUS                   = 'N'
    WHERE COMPONENT_PART_NUMBER     IS NOT NULL
    AND COMPONENT_INSTALLATION_DATE IS NULL;
    COMMIT;
    DECLARE
    TYPE POL_TYPE
  IS
    TABLE OF VARCHAR2(4000) INDEX BY VARCHAR2(4000);
    V_POL_CODES POL_TYPE;
  BEGIN
    FOR EACH_POL IN
    (SELECT CODE
    FROM POLICY_DEFINITION
    WHERE BUSINESS_UNIT_INFO = 'Thermo King TSA'
    )
    LOOP
      V_POL_CODES(EACH_POL.CODE) := EACH_POL.CODE;
    END LOOP;
    FOR EACH_REC IN ALL_REC
    LOOP
      BEGIN
        V_ERROR_CODE      := NULL;
        V_INSTALL_DEALER_ID := NULL;
        V_COMMIT_COUNT    := V_COMMIT_COUNT + 1;
        V_VAR             := 0;
        V_UNIT_OWNER_TYPE := 'DEALER';
        BEGIN
          SELECT UPPER(CFO.VALUE)
          INTO V_ALLOW_OTHER_DLRS_STOCK
          FROM CONFIG_PARAM_OPTION CFO,
            CONFIG_VALUE CV,
            CONFIG_PARAM CP
          WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
          AND CV.CONFIG_PARAM       = CP.ID
          AND CP.NAME               = 'allowWntyRegOnOthersStock'
          AND CV.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_ALLOW_OTHER_DLRS_STOCK := 'FALSE';
        END;
        BEGIN
          SELECT UPPER(CFO.VALUE)
          INTO V_CAP_INST_DLR_DATE
          FROM CONFIG_PARAM_OPTION CFO,
            CONFIG_VALUE CV,
            CONFIG_PARAM CP
          WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
          AND CV.CONFIG_PARAM       = CP.ID
          AND CP.NAME               = 'enableDealerAndInstallationDate'
          AND CV.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_CAP_INST_DLR_DATE := 'FALSE';
        END;
        BEGIN
          SELECT UPPER(CFO.VALUE)
          INTO V_ADD_INFO_APPLICABLE
          FROM CONFIG_PARAM_OPTION CFO,
            CONFIG_VALUE CV,
            CONFIG_PARAM CP
          WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
          AND CV.CONFIG_PARAM       = CP.ID
          AND CP.NAME               = 'additionalInformationDetailsApplicable'
          AND CV.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_ADD_INFO_APPLICABLE := 'FALSE';
        END;
        BEGIN
          SELECT II.id,
            II.PENDING_WARRANTY,
            II.SHIPMENT_DATE,
            II.BUILT_ON,
            II.CURRENT_OWNER,
            II.HOURS_ON_MACHINE,
            II.CONDITION_TYPE
          INTO V_SERIAL_ID,
            V_PENDING_WR,
            V_SHIP_DATE,
            V_BUILD_DATE,
            V_CURR_OWNER_ID,
            V_HOURS_ON_SERV,
            V_CONDITION
          FROM INVENTORY_ITEM II,
            ITEM I
          WHERE II.OF_TYPE          = I.ID
          AND II.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO
          AND I.BUSINESS_UNIT_INFO  = EACH_REC.BUSINESS_UNIT_INFO
          AND II.SERIAL_NUMBER      = EACH_REC.SERIAL_NUMBER
          AND I.ITEM_NUMBER         = EACH_REC.ITEM_NUMBER
          AND II.SERIALIZED_PART    = 0
          AND II.D_ACTIVE           = 1
          AND II.TYPE               = 'STOCK';
          SELECT upper(SP.SERVICE_PROVIDER_TYPE)
          INTO V_UNIT_OWNER_TYPE
          FROM SERVICE_PROVIDER SP
          WHERE SP.id = V_CURR_OWNER_ID;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_UNIT_OWNER_TYPE := 'DEALER';
          V_ERROR_CODE      := common_utils.addErrorMessage(V_ERROR_CODE, 'WR013');
        END;
        IF NOT(V_ALLOW_OTHER_DLRS_STOCK = 'TRUE' OR V_FILING_PARTY = 1 OR V_UNIT_OWNER_TYPE = 'OEM') AND V_FILING_PARTY > 1 AND V_FILING_PARTY <> V_CURR_OWNER_ID THEN
          V_ERROR_CODE                 := common_utils.addErrorMessage(V_ERROR_CODE, 'WR013');
        END IF;
        IF V_PENDING_WR = 1 THEN
          V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR009');
        END IF;
        IF V_ADD_INFO_APPLICABLE        = 'TRUE' THEN
          IF EACH_REC.TRANSACTION_TYPE IS NULL THEN
            V_ERROR_CODE               := common_utils.addErrorMessage(V_ERROR_CODE, 'WR022');
          ELSE
            BEGIN
              SELECT 1
              INTO V_VAR
              FROM TRANSACTION_TYPE TT
              WHERE UPPER(TT.TYPE) = UPPER(EACH_REC.TRANSACTION_TYPE)
              AND TT.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR023');            
            END;
          END IF;
          IF EACH_REC.MARKET_TYPE IS NULL THEN
            V_ERROR_CODE          := common_utils.addErrorMessage(V_ERROR_CODE, 'WR024');
          ELSE
            BEGIN
              SELECT 1
              INTO V_VAR
              FROM MARKET_TYPE MT
              WHERE UPPER(MT.TITLE) = UPPER(EACH_REC.MARKET_TYPE)
              AND MT.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR025');
            END;
          END IF;
          IF EACH_REC.FIRST_TIME_OWNER             IS NULL THEN
            V_ERROR_CODE                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR026');
          ELSIF upper(EACH_REC.FIRST_TIME_OWNER)   <> 'YES' AND upper(EACH_REC.FIRST_TIME_OWNER) <> 'NO' THEN
            V_ERROR_CODE                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR027');
          ELSIF upper(EACH_REC.FIRST_TIME_OWNER)    = 'NO' THEN
            V_ERROR_CODE                           := COMMON_UTILS.ADDERRORMESSAGE(V_ERROR_CODE, 'WR028');
          END IF;
          IF (upper(EACH_REC.FIRST_TIME_OWNER) = 'NO') THEN
            BEGIN
              SELECT 1
              INTO V_VAR
              FROM COMPETITION_TYPE CT
              WHERE UPPER(CT.TYPE) = UPPER(EACH_REC.COMPETITION_TYPE);
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR030');
            END;
            BEGIN
              SELECT 1
              INTO V_VAR
              FROM COMPETITOR_MAKE CM
              WHERE UPPER(CM.MAKE) = UPPER(EACH_REC.COMPETITOR_MAKE);
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR031');
            END;
            BEGIN
              SELECT 1
              INTO V_VAR
              FROM COMPETITOR_MODEL CM
              WHERE UPPER(CM.MODEL) = UPPER(EACH_REC.MODEL_NUMBER);
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR032');
            END;
          END IF;
        END IF;
        IF EACH_REC.DELIVERY_DATE                         IS NOT NULL AND NOT (COMMON_UTILS.ISVALIDDATE(EACH_REC.DELIVERY_DATE)) THEN
          V_ERROR_CODE                                    := common_utils.addErrorMessage(V_ERROR_CODE, 'WR034');
        ELSIF TO_DATE(EACH_REC.DELIVERY_DATE, 'YYYYMMDD') >= SYSDATE THEN
          V_ERROR_CODE                                    := common_utils.addErrorMessage(V_ERROR_CODE, 'WR035');
        ELSIF TO_DATE(EACH_REC.DELIVERY_DATE, 'YYYYMMDD')  < V_BUILD_DATE THEN
          V_ERROR_CODE                                    := common_utils.addErrorMessage(V_ERROR_CODE, 'WR056');
        ELSIF TO_DATE(EACH_REC.DELIVERY_DATE, 'YYYYMMDD')  < V_SHIP_DATE THEN
          V_ERROR_CODE                                    := common_utils.addErrorMessage(V_ERROR_CODE, 'WR036');
        END IF;
        IF UPPER(V_CAP_INST_DLR_DATE)           = 'TRUE' THEN
          IF EACH_REC.INSTALLING_DEALER_NUMBER IS NULL THEN
            V_ERROR_CODE                       := common_utils.addErrorMessage(V_ERROR_CODE, 'WR017');
          ELSE
            BEGIN
              SELECT SP.id
              INTO V_INSTALL_DEALER_ID
              FROM SERVICE_PROVIDER SP,
                BU_ORG_MAPPING BOM
              WHERE SP.ID                            = BOM.ORG
              AND BOM.BU                             = EACH_REC.BUSINESS_UNIT_INFO
              AND SP.SERVICE_PROVIDER_NUMBER         = EACH_REC.INSTALLING_DEALER_NUMBER
              AND EACH_REC.INSTALLING_DEALER_NUMBER IS NOT NULL;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR018');
            END;
          END IF;
          IF EACH_REC.DATE_OF_INSTALLATION IS NULL THEN
            V_ERROR_CODE                   := common_utils.addErrorMessage(V_ERROR_CODE, 'WR019');
          ELSIF NOT (COMMON_UTILS.ISVALIDDATE(EACH_REC.DATE_OF_INSTALLATION)) THEN
            V_ERROR_CODE                                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR037');
          ELSIF TO_DATE(EACH_REC.DATE_OF_INSTALLATION, 'YYYYMMDD') >= SYSDATE THEN
            V_ERROR_CODE                                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR039');
          ELSIF TO_DATE(EACH_REC.DATE_OF_INSTALLATION, 'YYYYMMDD')  < V_BUILD_DATE THEN
            V_ERROR_CODE                                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR058');
          ELSIF TO_DATE(EACH_REC.DATE_OF_INSTALLATION, 'YYYYMMDD')  < V_SHIP_DATE THEN
            V_ERROR_CODE                                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR057');
          ELSIF EACH_REC.DELIVERY_DATE                             IS NOT NULL AND COMMON_UTILS.ISVALIDDATE(EACH_REC.DELIVERY_DATE) AND TO_DATE(EACH_REC.DATE_OF_INSTALLATION, 'YYYYMMDD') > TO_DATE(EACH_REC.DELIVERY_DATE, 'YYYYMMDD') THEN
            V_ERROR_CODE                                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR038');
          END IF;
        END IF;
        IF EACH_REC.HOURS_ON_MACHINE IS NOT NULL AND NOT(COMMON_UTILS.ISNUMBER(EACH_REC.HOURS_ON_MACHINE)) THEN
          V_ERROR_CODE               := common_utils.addErrorMessage(V_ERROR_CODE, 'WR033');
        END IF;
        IF EACH_REC.COMPONENT_PART_NUMBER IS NOT NULL THEN
          COMMON_UTILS.ParseAnySeperatorList(EACH_REC.COMPONENT_PART_NUMBER,'#$#',V_COMP_PART_ARRAY ,V_COMP_PART_COUNT);
          IF EACH_REC.COMPONENT_SERIAL_NUMBER IS NOT NULL THEN
            COMMON_UTILS.ParseAnySeperatorList(EACH_REC.COMPONENT_SERIAL_NUMBER,'#$#',V_COMP_SERIAL_ARRAY ,V_COMP_SERIAL_COUNT);
            IF EACH_REC.COMPONENT_INSTALLATION_DATE IS NOT NULL THEN
              COMMON_UTILS.ParseAnySeperatorList(EACH_REC.COMPONENT_INSTALLATION_DATE,'#$#',V_COMP_INSTALL_ARRAY ,V_COMP_INSTALL_COUNT);
              IF V_COMP_PART_COUNT <> V_COMP_SERIAL_COUNT THEN
                V_ERROR_CODE       := common_utils.addErrorMessage(V_ERROR_CODE, 'WR040');
              END IF;
              IF V_COMP_PART_COUNT <> V_COMP_INSTALL_COUNT THEN
                V_ERROR_CODE       := common_utils.addErrorMessage(V_ERROR_CODE, 'WR041');
              END IF;
              FOR I IN 1..V_COMP_PART_COUNT
              LOOP
                BEGIN
                  SELECT 1
                  INTO V_VAR
                  FROM ITEM
                  WHERE ITEM_TYPE        = 'PART'
                  AND ITEM_NUMBER        = V_COMP_PART_ARRAY(I)
                  AND OWNED_BY           = 1
                  AND BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR042');
                  EXIT
                WHEN INSTR(NVL(V_ERROR_CODE,'X'), 'WR042') > 0;
                END;
              END LOOP;
              IF INSTR(NVL(V_ERROR_CODE,'X'), 'WR040') = 0 AND INSTR(NVL(V_ERROR_CODE,'X'), 'WR041') = 0 AND INSTR(NVL(V_ERROR_CODE,'X'), 'WR042') = 0 THEN
                FOR N                                 IN 1..V_COMP_PART_COUNT
                LOOP
                  BEGIN
                    SELECT II.id
                    INTO V_COMPONENT_ID
                    FROM ITEM I,
                      INVENTORY_ITEM II
                    WHERE I.ITEM_TYPE        = 'PART'
                    AND I.ITEM_NUMBER        = V_COMP_PART_ARRAY(N)
                    AND I.OWNED_BY           = 1
                    AND I.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO
                    AND II.OF_TYPE           = I.ID
                    AND II.SERIAL_NUMBER     = V_COMP_SERIAL_ARRAY(N)
                    AND II.SERIALIZED_PART   = 1
                    AND II.D_ACTIVE          = 1;
                    SELECT common_utils.addErrorMessage(V_ERROR_CODE, 'WR054')
                    INTO V_ERROR_CODE
                    FROM inventory_item_composition iic,
                      inventory_item ii
                    WHERE iic.PART_OF = ii.id
                    AND iic.PART      = V_COMPONENT_ID
                    AND iic.D_ACTIVE  = 1
                    AND ii.id        <> V_SERIAL_ID
                    AND II.D_ACTIVE   = 1;
                    EXIT
                  WHEN INSTR(NVL(V_ERROR_CODE,'X'), 'WR054') > 0;
                  EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                    V_COMPONENT_ID := 0;
                  END;
                END LOOP;
              END IF;
              FOR I IN 1..V_COMP_INSTALL_COUNT
              LOOP
                IF NOT COMMON_UTILS.ISVALIDDATE(V_COMP_INSTALL_ARRAY(I)) OR TO_DATE(V_COMP_INSTALL_ARRAY(I), 'YYYYMMDD') < V_BUILD_DATE THEN
                  V_ERROR_CODE                                                                                          := common_utils.addErrorMessage(V_ERROR_CODE, 'WR043');
                  EXIT
                WHEN INSTR(NVL(V_ERROR_CODE,'X'), 'WR043') > 0;
                END IF;
              END LOOP;
            END IF;
          END IF;
        END IF;
        IF EACH_REC.NUMBER_OF_MONTHS IS NOT NULL AND NOT (COMMON_UTILS.ISNUMBER(EACH_REC.NUMBER_OF_MONTHS)) THEN
          V_ERROR_CODE               := common_utils.addErrorMessage(V_ERROR_CODE, 'WR044');
        END IF;
        IF EACH_REC.NUMBER_OF_YEARS IS NOT NULL AND NOT (COMMON_UTILS.ISNUMBER(EACH_REC.NUMBER_OF_YEARS)) THEN
          V_ERROR_CODE              := common_utils.addErrorMessage(V_ERROR_CODE, 'WR045');
        END IF;
        SELECT PRODUCT,
          MODEL
        INTO V_PRODUCT,
          V_MODEL
        FROM ITEM
        WHERE ITEM_NUMBER = EACH_REC.ITEM_NUMBER
        AND OWNED_BY      =
          (SELECT ID FROM PARTY WHERE NAME = 'OEM'
          )
        AND BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;


    IF (V_INSTALL_DEALER_ID IS NOT NULL ) 
		THEN 
        SELECT  DECODE(SP.CERTIFIED, 0, 'N', 1, 'Y')
        INTO    V_CERT_STATUS
        FROM SERVICE_PROVIDER SP,
          BU_ORG_MAPPING BOM
        WHERE SP.SERVICE_PROVIDER_NUMBER = EACH_REC.INSTALLING_DEALER_NUMBER
        AND SP.ID                        = BOM.ORG
        AND BOM.BU                       = EACH_REC.BUSINESS_UNIT_INFO;		
		END IF;
DBMS_OUTPUT.PUT_LINE(V_PRODUCT || V_MODEL || EACH_REC.BUSINESS_UNIT_INFO || TO_DATE(EACH_REC.DELIVERY_DATE, 'YYYYMMDD')|| TO_NUMBER(V_HOURS_ON_SERV) || V_CONDITION || V_CERT_STATUS|| V_INSTALL_DEALER_ID);
        OPEN ALL_ELIGIBLE_POLICY_PLANS(V_PRODUCT, V_MODEL, EACH_REC.BUSINESS_UNIT_INFO, TO_DATE(EACH_REC.DELIVERY_DATE, 'YYYYMMDD'), TO_NUMBER(V_HOURS_ON_SERV), V_CONDITION, V_CERT_STATUS, V_INSTALL_DEALER_ID);

        IF ALL_ELIGIBLE_POLICY_PLANS%NOTFOUND THEN
          V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR055');
        END IF;
        CLOSE ALL_ELIGIBLE_POLICY_PLANS;

        IF EACH_REC.ADDITIONAL_APPLICABLE_POLICIES IS NOT NULL THEN
          BEGIN
            COMMON_UTILS.ParseAnySeperatorList(EACH_REC.ADDITIONAL_APPLICABLE_POLICIES,'#$#',V_POL_ARRAY ,V_POL_COUNT);
            FOR I IN 1..V_POL_COUNT
            LOOP
              IF NOT V_POL_CODES.EXISTS(V_POL_ARRAY(I)) THEN
                V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR046');
                EXIT
              WHEN INSTR(NVL(V_ERROR_CODE,'X'), 'WR046') > 0;
              END IF;
            END LOOP;
          END;
        END IF;
        IF EACH_REC.REQUEST_FOR_EXTENSION          IS NOT NULL THEN
          IF upper(EACH_REC.REQUEST_FOR_EXTENSION) <> 'YES' AND upper(EACH_REC.REQUEST_FOR_EXTENSION) <> 'NO' THEN
            V_ERROR_CODE                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR052');
          END IF;
        END IF;
        IF V_ERROR_CODE IS NULL AND EACH_REC.ERROR_CODE IS NULL THEN
          UPDATE STG_WARRANTY_REGISTRATIONS
          SET ERROR_STATUS = 'Y',
            ERROR_CODE     = NULL
          WHERE ID         = EACH_REC.ID;
        ELSE
          UPDATE STG_WARRANTY_REGISTRATIONS
          SET ERROR_STATUS = 'N',
            ERROR_CODE     = ERROR_CODE
            || DECODE (ERROR_CODE,NULL, V_ERROR_CODE,','
            || V_ERROR_CODE)
          WHERE ID = EACH_REC.ID;
        END IF;
        COMMIT;
      END;
    END LOOP;
    COMMIT;
  END;
  BEGIN
    SELECT file_upload_mgt_id
    INTO v_file_upload_mgt_id
    FROM STG_WARRANTY_REGISTRATIONS
    WHERE ROWNUM = 1;
    BEGIN
      SELECT COUNT(*)
      INTO v_success_count
      FROM STG_WARRANTY_REGISTRATIONS
      WHERE file_upload_mgt_id = v_file_upload_mgt_id
      AND ERROR_STATUS         = 'Y';
    EXCEPTION
    WHEN OTHERS THEN
      v_success_count := 0;
    END;
    BEGIN
      SELECT COUNT(*)
      INTO v_error_count
      FROM STG_WARRANTY_REGISTRATIONS
      WHERE file_upload_mgt_id = v_file_upload_mgt_id
      AND ERROR_STATUS         = 'N';
    EXCEPTION
    WHEN OTHERS THEN
      v_error_count := 0;
    END;
    SELECT COUNT(*)
    INTO v_count
    FROM STG_WARRANTY_REGISTRATIONS
    WHERE file_upload_mgt_id = v_file_upload_mgt_id;
    UPDATE file_upload_mgt
    SET success_records= v_success_count,
      error_records    = v_error_count,
      total_records    = v_count
    WHERE id           = v_file_upload_mgt_id;
  EXCEPTION
  WHEN OTHERS THEN
    v_error_code := SUBSTR(SQLERRM, 1, 4000);
    UPDATE file_upload_mgt
    SET error_message = v_error_code
    WHERE id          = v_file_upload_mgt_id;
  END;
  COMMIT;
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
END;

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from config_value where config_param_option  in (select id from config_param_option where value = 'dcapDealer')

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from config_param_options_mapping where option_id  in (select id from config_param_option where value = 'dcapDealer')

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from config_param_option where id  in (select id from config_param_option where value = 'dcapDealer')

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from dealer_scheme_purposes  where purposes in  (select id from purpose where name = 'DCAP')

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from USER_SCHEME_PURPOSES where PURPOSES  in  (select id from purpose where name = 'DCAP')

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from purpose where id in  (select id from purpose where name = 'DCAP')

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from dealer_scheme_purposes  where purposes in  (select id from purpose where name = 'SEA')

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from USER_SCHEME_PURPOSES where PURPOSES  in  (select id from purpose where name = 'SEA')

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from purpose where id in  (select id from purpose where name = 'SEA')

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from dealer_scheme_purposes  where purposes in  (select id from purpose where name = 'SCA')

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from USER_SCHEME_PURPOSES where PURPOSES  in  (select id from purpose where name = 'SCA')

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from purpose where id in  (select id from purpose where name = 'SCA')

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from dealers_in_group where dealer_group in (select id from DEALER_GROUP where scheme in (select id from dealer_scheme where name = 'DCAP'))

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from DEALER_GROUP where scheme in (select id from dealer_scheme where name = 'DCAP')

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from dealer_scheme  where name = 'DCAP'

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

commit

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





ALTER TABLE part_return_definition ADD (shipping_instructions VARCHAR2(4000), receiver_instructions VARCHAR2(4000))

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





ALTER TABLE carrier ADD description VARCHAR2(255)

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





ALTER TABLE WAREHOUSE ADD CONTACT_PERSON_NAME VARCHAR2(255)

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE SEQUENCE WAREHOUSE_SHIPPERS_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999 START WITH 1 INCREMENT BY 20 NOCACHE NOORDER NOCYCLE

 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE TABLE WAREHOUSE_SHIPPERS
  (
	ID NUMBER(19,0) ,
    WAREHOUSE      NUMBER(19,0) ,
    CARRIER        NUMBER(19,0) ,
    ACCOUNT_NUMBER VARCHAR2(255)
  )

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE CARRIER ADD CONSTRAINT CARRIER_PK PRIMARY KEY (ID)

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE WAREHOUSE_SHIPPERS ADD CONSTRAINT WRHSE_SHIPPERS_PK PRIMARY KEY (ID)

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE WAREHOUSE_SHIPPERS ADD CONSTRAINT WRHSE_SHIPPERS_WAREHOUSE_FK FOREIGN KEY (WAREHOUSE) REFERENCES WAREHOUSE(ID)

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE WAREHOUSE_SHIPPERS ADD CONSTRAINT WRHSE_SHIPPERS_CARRIER_FK FOREIGN KEY (CARRIER) REFERENCES CARRIER(ID)

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





ALTER TABLE PART_RETURN_DEFINITION ADD COMMENTS VARCHAR2(4000)

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE SEQUENCE PART_RETURN_DEFN_AUDIT_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999 START WITH 1 INCREMENT BY 20 NOCACHE NOORDER NOCYCLE

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE TABLE PART_RETURN_DEFINITION_AUDIT
  (
	ID NUMBER(19) NOT NULL,
	STATUS VARCHAR2(30),
	COMMENTS VARCHAR2(4000),
	FOR_DEFINITION NUMBER(19),
	D_CREATED_ON DATE,
	D_INTERNAL_COMMENTS VARCHAR2(255 CHAR),
	D_UPDATED_ON DATE,
	D_LAST_UPDATED_BY NUMBER(19),
	D_CREATED_TIME TIMESTAMP(6),
	D_UPDATED_TIME TIMESTAMP(6),
	LIST_INDEX NUMBER(10),
	D_ACTIVE NUMBER(1,0) DEFAULT 1
  )

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE PART_RETURN_DEFINITION_AUDIT ADD CONSTRAINT PART_RETURN_DEFNITION_AUDIT_PK PRIMARY KEY (ID)

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE PART_RETURN_DEFINITION_AUDIT ADD CONSTRAINT PART_RET_DEF_audit_for_defn_FK FOREIGN KEY (FOR_DEFINITION) REFERENCES PART_RETURN_DEFINITION(ID)

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


INSERT INTO config_param_option (id, DISPLAY_VALUE,VALUE) VALUES(config_param_option_seq.nextval,'Federal Government' ,'Federal Government' )

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_option (id, DISPLAY_VALUE,VALUE) VALUES(config_param_option_seq.nextval,'State Government' ,'State Government' )

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_option (id, DISPLAY_VALUE,VALUE) VALUES(config_param_option_seq.nextval,'County Government' ,'County Government' )

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_option (id, DISPLAY_VALUE,VALUE) VALUES(config_param_option_seq.nextval,'City/Town/Village Government' ,'City/Town/Village Government' )

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_option (id, DISPLAY_VALUE,VALUE) VALUES(config_param_option_seq.nextval,'Homeowners' ,'Homeowners' )

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_option (id, DISPLAY_VALUE,VALUE) VALUES(config_param_option_seq.nextval,'Business' ,'Business' )

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_option (id, DISPLAY_VALUE,VALUE) VALUES(config_param_option_seq.nextval,'Regional Account' ,'Regional Account' )

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

commit

 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in WR'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='Federal Government'))

ERROR 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00001: unique constraint (TWMS_OWNER.CONFIG_PARAM_OPTNS_MAPPING_PK) violated

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00001: unique constraint (TWMS_OWNER.CONFIG_PARAM_OPTNS_MAPPING_PK) violated

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00001: unique constraint (TWMS_OWNER.CONFIG_PARAM_OPTNS_MAPPING_PK) violated

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:582)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1986)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1144)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2152)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:2035)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2876)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:945)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 17-Jul-12 12:03:04 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


select cfg_param_optns_mapping_seq.NEXTVAL from dual

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in WR'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='Federal Government'))

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in WR'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='State Government'))

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in WR'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='County Government'))

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in WR'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='City/Town/Village Government'))

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in WR'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='Homeowners'))

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in WR'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='Business'))

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in WR'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='Regional Account'))

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

commit

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in ETR'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='Federal Government'))

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in ETR'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='State Government'))

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in ETR'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='County Government'))

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in ETR'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='City/Town/Village Government'))

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in ETR'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='Homeowners'))

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in ETR'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='Business'))

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in ETR'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='Regional Account'))

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

commit

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





alter table campaign add comments varchar2(4000 char)

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





CREATE TABLE CAMPAIGN_AUDIT
  (
    ID                    NUMBER(19, 0) NOT NULL ,
    COMMENTS              VARCHAR2(4000 CHAR) ,
    ACTION_TAKEN          VARCHAR2(50 CHAR) ,
    FOR_CAMPAIGN          NUMBER(19, 0) NOT NULL ,
    LIST_INDEX            NUMBER(3, 0) ,
    D_CREATED_ON          DATE ,
    D_UPDATED_ON          DATE ,
    D_CREATED_TIME        DATE ,
    D_UPDATED_TIME        DATE ,
    D_INTERNAL_COMMENTS VARCHAR2(255 CHAR) ,
    VERSION             NUMBER(10, 0) NOT NULL ,
    D_LAST_UPDATED_BY   NUMBER(19, 0) ,
    D_ACTIVE            NUMBER(1, 0)
  )

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE CAMPAIGN_AUDIT ADD CONSTRAINT FK_FOR_CAMPAIGN FOREIGN KEY
  (
    FOR_CAMPAIGN
  )
  REFERENCES CAMPAIGN
  (
    ID
  )
  ENABLE

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE SEQUENCE CAMPAIGN_AUDIT_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 20 START WITH 100000000000000 CACHE 20 NOORDER NOCYCLE 

 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:12:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

 



ALTER TABLE INVENTORY_ITEM ADD (FIELD_MOD_INV_STATUS NUMBER(19,0))

 INFO 17-Jul-12 12:12:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE INVENTORY_ITEM ADD CONSTRAINT INV_ITEM_FieldMODINVSTATUS_FK FOREIGN KEY (FIELD_MOD_INV_STATUS) REFERENCES LIST_OF_VALUES (ID) ENABLE

 INFO 17-Jul-12 12:12:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:52 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:12:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 


INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in Policy'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='Federal Government'))

 INFO 17-Jul-12 12:12:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in Policy'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='State Government'))

 INFO 17-Jul-12 12:12:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in Policy'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='County Government'))

 INFO 17-Jul-12 12:12:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in Policy'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='City/Town/Village Government'))

 INFO 17-Jul-12 12:12:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in Policy'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='Homeowners'))

 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in Policy'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='Business'))

 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in Policy'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='Regional Account'))

 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

commit

 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





DROP SEQUENCE CLAIM_NUMBER_SEQ

 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE SEQUENCE CLAIM_NUMBER_SEQ MINVALUE 20000000 MAXVALUE 999999999999999999999999999 INCREMENT BY 20 NOCACHE NOORDER NOCYCLE

 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 






ALTER TABLE document add (
"ATTACHMENT_TYPE"     NUMBER(19,0),
CONSTRAINT "ATTACHMENT_TYPE_FK" FOREIGN KEY ("ATTACHMENT_TYPE") REFERENCES LIST_OF_VALUES ("ID"))

 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





CREATE TABLE CLAIM_ADDITIONAL_ATTRIBUTES
  (
    CLAIM                                    NUMBER(19,0) NOT NULL ENABLE,
    CLAIM_ADDITIONAL_ATTRIBUTES              NUMBER(19,0) NOT NULL ENABLE,
    CONSTRAINT "CLMATTRIBUTE_CLMATT_FK" FOREIGN KEY ("CLAIM_ADDITIONAL_ATTRIBUTES") REFERENCES CLAIM_ATTRIBUTES ("ID") ENABLE,
    CONSTRAINT "CLMATTR_FK" FOREIGN KEY ("CLAIM") REFERENCES CLAIM ("ID") ENABLE
  )

 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





alter table attribute_association add SMR_Reason NUMBER(19,0)

 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE attribute_association add CONSTRAINT "SMR_REASON_FK" FOREIGN KEY ("SMR_REASON") REFERENCES "LIST_OF_VALUES" ("ID") ENABLE

 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





update additional_attributes set attribute_purpose = 'JOB_CODE_PURPOSE' where attribute_purpose = 'CLAIMED_INVENTORY_PUPOSE'

 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

COMMIT

 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Jul-12 12:12:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





ALTER TABLE CLAIM_ATTRIBUTES MODIFY ATTR_VALUE VARCHAR(4000 CHAR)

 INFO 17-Jul-12 12:12:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 06-Aug-12 15:02:20 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 06-Aug-12 15:02:20 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





ALTER TABLE CAMPAIGN_NOTIFICATION ADD (FIELD_MOD_INV_STATUS NUMBER(19,0))

ERROR 06-Aug-12 15:02:20 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01430: column being added already exists in table

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01430: column being added already exists in table

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-01430: column being added already exists in table

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:582)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1986)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1144)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2152)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:2035)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2876)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:945)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 06-Aug-12 15:02:20 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 06-Aug-12 15:02:20 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 06-Aug-12 16:05:14 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 06-Aug-12 16:05:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





ALTER TABLE CAMPAIGN_NOTIFICATION ADD (FIELD_MOD_INV_STATUS NUMBER(19,0))

ERROR 06-Aug-12 16:05:14 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01430: column being added already exists in table

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01430: column being added already exists in table

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-01430: column being added already exists in table

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:582)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1986)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1144)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2152)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:2035)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2876)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:945)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 06-Aug-12 16:05:14 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 06-Aug-12 16:05:14 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 08-Aug-12 11:49:11 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 08-Aug-12 11:49:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





ALTER TABLE CAMPAIGN_NOTIFICATION ADD (FIELD_MOD_INV_STATUS NUMBER(19,0))

ERROR 08-Aug-12 11:49:11 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01430: column being added already exists in table

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01430: column being added already exists in table

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-01430: column being added already exists in table

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:582)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1986)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1144)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2152)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:2035)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2876)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:945)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 08-Aug-12 11:49:11 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 08-Aug-12 11:49:11 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 08-Aug-12 11:50:21 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 08-Aug-12 11:50:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

CREATE INDEX invitem_bill_to_idx
  ON inventory_item (
    bill_to
  )

ERROR 08-Aug-12 11:50:21 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00955: name is already used by an existing object

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00955: name is already used by an existing object

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00955: name is already used by an existing object

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:582)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1986)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1144)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2152)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:2035)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2876)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:945)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 08-Aug-12 11:50:21 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 08-Aug-12 11:50:21 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 08-Aug-12 18:36:35 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 08-Aug-12 18:36:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





CREATE SEQUENCE MST_ADMIN_FNC_AREA_SEQ
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  INCREMENT BY 1
  NOCYCLE
  NOORDER
  CACHE 20

 INFO 08-Aug-12 18:36:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

  CREATE SEQUENCE MST_ADMIN_SUBJECT_AREA_SEQ
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  INCREMENT BY 1
  NOCYCLE
  NOORDER
  CACHE 20

 INFO 08-Aug-12 18:36:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

CREATE TABLE MST_ADMIN_FNC_AREA (ID NUMBER(19),NAME VARCHAR2(50), DESCRIPTION VARCHAR2(200),CONSTRAINT  MST_ADMIN_FNC_AREA_PK  PRIMARY KEY(ID))

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

CREATE TABLE MST_ADMIN_SUBJECT_AREA (ID NUMBER(19),NAME VARCHAR2(50), DESCRIPTION VARCHAR2(200),CONSTRAINT  MST_ADMIN_SUBJECT_AREA_PK  PRIMARY KEY(ID))

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

CREATE TABLE MST_ADMIN_ACTION (ID NUMBER(19),ACTION VARCHAR2(50), DESCRIPTION VARCHAR2(200),CONSTRAINT  MST_ADMIN_ACTION_PK  PRIMARY KEY(ID))

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

CREATE TABLE SUBJECT_FUNC_AREA_MAPPING (FUNCTIONAL_AREA NUMBER(19) NOT NULL,SUBJECT_AREA NUMBER(19) NOT NULL , CONSTRAINT SUBJECT_FUNC_AREA_MAPPING_PK PRIMARY KEY (FUNCTIONAL_AREA,SUBJECT_AREA) ENABLE )

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

ALTER TABLE SUBJECT_FUNC_AREA_MAPPING ADD CONSTRAINT SUBJ_FUNC_MAP_FUNC_ID FOREIGN KEY(FUNCTIONAL_AREA) REFERENCES MST_ADMIN_FNC_AREA(ID)

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

ALTER TABLE SUBJECT_FUNC_AREA_MAPPING ADD CONSTRAINT SUBJ_FUNC_MAP_SUBJ_ID FOREIGN KEY(SUBJECT_AREA) REFERENCES MST_ADMIN_SUBJECT_AREA(ID)

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

CREATE SEQUENCE  "ROLE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 20 START WITH 1000 NOCACHE  NOORDER  NOCYCLE 

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

ALTER TABLE ROLE ADD (DESCRIPTION VARCHAR2(50))

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

CREATE TABLE ROLE_PERMISSION_MAPPING (ID NUMBER(19),ROLE_DEF_ID NUMBER(19) NOT NULL,FUNCTIONAL_AREA NUMBER(19) NOT NULL,
ACTION NUMBER(19) NOT NULL,CONSTRAINT  ROLE_PERMISSION_MAPPING_PK  PRIMARY KEY(ID))

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

CREATE SEQUENCE  "ROLE_PERMISSION_MAPPING_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 20 START WITH 1000 NOCACHE  NOORDER  NOCYCLE

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

ALTER TABLE ROLE_PERMISSION_MAPPING ADD CONSTRAINT ROLE_PERM_MAP_ROLE_FK FOREIGN KEY(ROLE_DEF_ID) REFERENCES ROLE(ID)

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

ALTER TABLE ROLE_PERMISSION_MAPPING ADD CONSTRAINT ROLE_PERM_MAP_FNC_AREA_FK FOREIGN KEY(FUNCTIONAL_AREA) REFERENCES MST_ADMIN_FNC_AREA(ID)

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

ALTER TABLE ROLE_PERMISSION_MAPPING ADD CONSTRAINT ROLE_PERM_MAP_ACTION_FK FOREIGN KEY(ACTION) REFERENCES MST_ADMIN_ACTION(ID)

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

ALTER TABLE ROLE_PERMISSION_MAPPING ADD (SUBJECT_AREA NUMBER(19))

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

ALTER TABLE ROLE_PERMISSION_MAPPING ADD PERMISSION_STRING VARCHAR2(255)

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





Insert into MST_ADMIN_ACTION (ACTION,DESCRIPTION,ID) values ('view','View',1)

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

Insert into MST_ADMIN_ACTION (ACTION,DESCRIPTION,ID) values ('create','Create',2)

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

Insert into MST_ADMIN_ACTION (ACTION,DESCRIPTION,ID) values ('delete','Delete',3)

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

Insert into MST_ADMIN_ACTION (ACTION,DESCRIPTION,ID) values ('update','Update',4)

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

Insert into MST_ADMIN_ACTION (ACTION,DESCRIPTION,ID) values ('search','search',5)

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

INSERT INTO MST_ADMIN_SUBJECT_AREA VALUES (MST_ADMIN_SUBJECT_AREA_SEQ.nextval,'buConfigurations','BU Configurations')

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES (MST_ADMIN_FNC_AREA_SEQ.nextval,'buConfigurationsSetup','BU Configurations Setup')

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING (FUNCTIONAL_AREA,SUBJECT_AREA) VALUES ((SELECT ID FROM MST_ADMIN_FNC_AREA WHERE NAME='buConfigurationsSetup'),
(SELECT ID FROM MST_ADMIN_SUBJECT_AREA WHERE NAME='buConfigurations'))

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

INSERT INTO ROLE_PERMISSION_MAPPING(ROLE_DEF_ID, ACTION ,FUNCTIONAL_AREA, ID , SUBJECT_AREA) 
VALUES ( (SELECT ID FROM ROLE WHERE NAME ='admin'),(SELECT ID FROM MST_ADMIN_ACTION WHERE action = 'update'), 
(SELECT ID FROM MST_ADMIN_FNC_AREA WHERE NAME='buConfigurationsSetup'), ROLE_PERMISSION_MAPPING_SEQ.NEXTVAL ,
(SELECT ID FROM MST_ADMIN_SUBJECT_AREA WHERE NAME='buConfigurations'))

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

UPDATE ROLE_PERMISSION_MAPPING A SET A.PERMISSION_STRING = (SELECT NAME FROM mst_admin_subject_area WHERE ID = A.subject_area ) || ':' ||
(SELECT NAME FROM mst_admin_fnc_area WHERE ID = A.FUNCTIONAL_AREA) || ':' || (SELECT T.ACTION FROM mst_admin_action T WHERE ID = A.ACTION)

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

COMMIT

 INFO 08-Aug-12 18:36:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Aug-12 12:02:32 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 09-Aug-12 12:02:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

create or replace
PACKAGE BODY COMMON_VALIDATION_UTILS AS 

  FUNCTION getValidBusinessUnitName(p_business_unit_name VARCHAR2)
  RETURN VARCHAR2
  IS
  v_business_unit_name VARCHAR2(255) := NULL;
  BEGIN

    SELECT NAME 
    INTO v_business_unit_name
    FROM business_unit
    WHERE 
    lower(name) = lower(p_business_unit_name) AND ROWNUM = 1;
    RETURN v_business_unit_name;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN NULL;
  END getValidBusinessUnitName;


  FUNCTION isValidBusinessUnitName(p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_business_unit_name VARCHAR2(255) := NULL;
  BEGIN

    SELECT NAME 
    INTO v_business_unit_name
    FROM business_unit
    WHERE 
    lower(name) = lower(p_business_unit_name) AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidBusinessUnitName;

  FUNCTION isUserBelongsToBU(p_business_unit_name VARCHAR2, p_user_login VARCHAR2)
  RETURN BOOLEAN
  IS
  v_business_unit_name VARCHAR2(255) := NULL;
  BEGIN
    SELECT bum.bu
    INTO v_business_unit_name
    FROM org_user u, bu_user_mapping bum
    WHERE 
	lower(bum.bu) = lower(p_business_unit_name)
	AND u.login=p_user_login 
	AND u.id=bum.org_user 
	AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isUserBelongsToBU;


  FUNCTION isValidModel(p_model VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_model VARCHAR2(255) := NULL;
  BEGIN

    SELECT NAME 
    INTO v_model
    FROM item_group
    WHERE 
    lower(name) = lower(ltrim(rtrim(p_model))) 
    and lower(business_unit_info) = lower(p_business_unit_name)
    and item_group_type = 'MODEL' and d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidModel;


 FUNCTION isValidProductCode(p_product_code VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_product_code NUMBER := NULL;
  BEGIN

    SELECT id
    INTO v_product_code
    FROM item_group
    WHERE 
    lower(name) = lower(ltrim(rtrim(p_product_code))) 
    and lower(business_unit_info) = lower(p_business_unit_name)
    and item_group_type = 'PRODUCT' and d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidProductCode;


  FUNCTION isValidModelForProduct(p_model VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_model VARCHAR2(255) := NULL;
  BEGIN

    SELECT m.NAME 
    INTO v_model
    FROM item_group m,item_group p1,item_group p2
    WHERE 
    lower(m.name) = lower(ltrim(rtrim(p_model))) 
    and (lower(p1.name) = lower(ltrim(rtrim(p_product))) and p1.item_group_type='PRODUCT'
      or lower(p2.name) = lower(ltrim(rtrim(p_product))) and p1.item_group_type='PRODUCT')
    and lower(m.business_unit_info) = lower(p_business_unit_name)
    and lower(p1.business_unit_info) = lower(p_business_unit_name)
    and lower(p2.business_unit_info) = lower(p_business_unit_name)
    and m.is_part_of=p1.id and p1.d_active = 1
    and p1.is_part_of=p2.id and p2.d_active = 1
    and m.item_group_type = 'MODEL' and m.d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidModelForProduct;


  FUNCTION isValidModelCodeForProduct(p_model_code VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_model VARCHAR2(255) := NULL;
  BEGIN

    SELECT m.NAME 
    INTO v_model
    FROM item_group m,item_group p1,item_group p2
    WHERE 
    lower(m.group_code) = lower(ltrim(rtrim(p_model_code))) 
    and (lower(p1.name) = lower(ltrim(rtrim(p_product))) and p1.item_group_type='PRODUCT'
      or lower(p2.name) = lower(ltrim(rtrim(p_product))) and p2.item_group_type='PRODUCT')
    and lower(m.business_unit_info) = lower(p_business_unit_name)
    and lower(p1.business_unit_info) = lower(p_business_unit_name)
    and lower(p2.business_unit_info) = lower(p_business_unit_name)
    and m.is_part_of=p1.id and p1.d_active = 1
    and p1.is_part_of=p2.id and p2.d_active = 1
    and m.item_group_type = 'MODEL' and m.d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidModelCodeForProduct;

  FUNCTION getModelForModelCodeAndProduct(p_model_code VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN NUMBER
  IS
  v_model NUMBER := NULL;
  v_scheme NUMBER := NULL;
  BEGIN
	SELECT id INTO v_scheme
	FROM item_scheme WHERE UPPER(name)='PROD STRUCT SCHEME'
		AND business_unit_info=p_business_unit_name;

	SELECT A.id INTO v_model
	FROM
	(SELECT IG.group_code,
	  IG.item_group_type,
	  IG.business_unit_info,
	  IG.id
	FROM item_group IG
	  CONNECT BY PRIOR IG.ID = IG.IS_PART_OF
	  START WITH
	  (
		UPPER(IG.NAME)           = UPPER(LTRIM(RTRIM(p_product)))
	  AND IG.BUSINESS_UNIT_INFO = p_business_unit_name
	  AND IG.ITEM_GROUP_TYPE    = 'PRODUCT'
	  AND IG.D_ACTIVE           = 1
	  AND IG.SCHEME             = v_scheme
	  )
	) A
	WHERE A.ITEM_GROUP_TYPE  = 'MODEL'
	AND UPPER(A.group_code)               = UPPER(LTRIM(RTRIM(p_model_code)))
	AND A.BUSINESS_UNIT_INFO = p_business_unit_name
	AND ROWNUM               = 1;

    RETURN v_model;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN NULL;
  END getModelForModelCodeAndProduct;

  FUNCTION isValidItemNumber(p_item_number VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_item_id NUMBER := NULL;
  v_item_number_index NUMBER := -1;
  v_item_number VARCHAR2(255) := NULL;
  BEGIN


    SELECT i.ID 
    INTO v_item_id
    FROM ITEM i, PARTY p 
    WHERE ( UPPER(i.alternate_item_number) = UPPER(ltrim(rtrim(p_item_number)))  OR 
	UPPER(i.item_number) = UPPER(ltrim(rtrim(p_item_number))) )
    AND lower(i.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name)))
    AND i.owned_by = p.ID
    AND p.NAME = common_utils.constant_oem_name and i.d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidItemNumber;



  FUNCTION isValidPartSerialNumber(p_serial_number VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_item_id NUMBER := NULL;  
  BEGIN


    SELECT i.ID 
    INTO v_item_id
    FROM INVENTORY_ITEM i, PARTY p 
    WHERE lower(i.serial_number) = lower(ltrim(rtrim(p_serial_number))) 
    AND lower(i.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name)))
    and i.d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidPartSerialNumber;


  FUNCTION isValidSupplier(p_supplier_name VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_supplier_id NUMBER := NULL;
  BEGIN

    SELECT s.ID 
    INTO v_supplier_id
    FROM SUPPLIER s, bu_org_mapping m
    WHERE UPPER(supplier_number) = UPPER(p_supplier_name)
        AND s.id = m.org AND UPPER(m.bu) = UPPER(p_business_unit_name)
        AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidSupplier;


 FUNCTION isValidJobCode(p_job_code VARCHAR2, p_model VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_job_code VARCHAR2(256) := NULL;
  BEGIN

    select to_char(spd.code)
    INTO v_job_code
    FROM 
      action_node an,
      service_procedure sp,
      service_procedure_definition spd,
      (select id from assembly connect by prior id = is_part_of_assembly start with id in 
          ( select a.id 
            from 
            failure_structure fs,
            failure_structure_assemblies fsa,
            assembly a,
            item_group ig
            where
              a.active = 1 and
              fs.for_item_group = ig.id and
              fs.id = fsa.failure_structure and
              fsa.assemblies = a.id and
              upper(ig.name) = upper(p_model))) adata
    WHERE
      adata.id = an.defined_for and
      an.id = sp.defined_for and
      an.active = 1 and
      sp.definition = spd.id and
      lower(spd.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and
      lower(spd.code) = lower(ltrim(rtrim(p_job_code))) and spd.d_active = 1 AND ROWNUM = 1;

    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidJobCode;


 FUNCTION isValidUser(p_user_login VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_user_login VARCHAR2(256) := NULL;
  BEGIN

    SELECT OU.LOGIN  
    INTO v_user_login
    FROM ORG_USER OU, BU_USER_MAPPING BUM 
    WHERE lower(OU.login) = lower(ltrim(rtrim(p_user_login))) AND 
    OU.ID = BUM.ORG_USER AND 
    lower(bum.bu) = lower(ltrim(rtrim(p_business_unit_name))) AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidUser;


 FUNCTION isValidDealer(p_dealer_login VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_dealer_login VARCHAR2(256) := NULL;
  BEGIN

    SELECT OU.LOGIN  
    INTO v_dealer_login
    FROM ORG_USER OU, DEALERSHIP dealer, BU_USER_MAPPING BUM 
    WHERE lower(OU.login) = lower(ltrim(rtrim(p_dealer_login))) AND 
    OU.ID = BUM.ORG_USER AND dealer.id = OU.belongs_to_organization AND 
    lower(bum.bu) = lower(ltrim(rtrim(p_business_unit_name))) AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidDealer;


 FUNCTION isValidDealerByNumber(p_dealer_number VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_dealer_number VARCHAR2(256) := NULL;
  BEGIN

    SELECT dealer.dealer_number  
    INTO v_dealer_number
    from bu_org_mapping bom, dealership dealer 
    where lower(dealer.dealer_number) = lower(ltrim(rtrim(p_dealer_number))) and dealer.id = bom.org and 
    lower(bom.bu) = lower(ltrim(rtrim(p_business_unit_name))) AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidDealerByNumber;


 FUNCTION isValidInventory (p_serial_number VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_inventory VARCHAR2(256) := NULL;
  BEGIN

    SELECT ID   
    INTO v_inventory
    FROM INVENTORY_ITEM 
    WHERE lower(serial_number) = lower(ltrim(rtrim(p_serial_number))) AND 
    lower(business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and d_active=1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidInventory;


FUNCTION isValidInventoryWithConNum (
	p_container_number VARCHAR2, 
	p_business_unit_name VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
v_inventory NUMBER := NULL;
BEGIN
	p_error_code := NULL;
	SELECT ID INTO v_inventory
	FROM INVENTORY_ITEM 
	WHERE lower(vin_number) = lower(ltrim(rtrim(p_container_number)))
		AND business_unit_info=p_business_unit_name 
		AND d_active=1 AND serialized_part = 0;
	RETURN v_inventory;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN
		p_error_code := 'CN_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'CN_DUP';
		RETURN NULL;
END isValidInventoryWithConNum;

 FUNCTION isValidFaultCode(p_model VARCHAR2, p_fault_code VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_fault_code            VARCHAR2(256) := NULL;
  v_failure_structure     NUMBER := NULL;
  v_complete_fault_code   VARCHAR2(4000) := NULL;
  BEGIN

    SELECT fcd.code 
    INTO v_fault_code
    FROM 
      fault_code_definition fcd,
      fault_code fc,
        (select fault_code from assembly where fault_code is not null connect by prior id = 
            is_part_of_assembly start with id in 
            (select a.id 
            from 
              failure_structure fs,
              failure_structure_assemblies fsa,
              assembly a,
              item_group ig
            where
              a.active = 1 and
              fs.for_item_group = ig.id and
              fs.id = fsa.failure_structure and
              fsa.assemblies = a.id and
              upper(ig.name) = upper(p_model))) adata
    WHERE
      adata.fault_code = fc.id and
      fc.definition = fcd.id and
      lower(fcd.code) = lower(ltrim(rtrim(p_fault_code))) and 
      lower(fcd.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and fcd.d_active=1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidFaultCode;


 FUNCTION isValidFaultFound(p_model VARCHAR2, p_fault_found VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
 IS
  v_fault_found NUMBER := 0;
 BEGIN
    SELECT ft.id 
    INTO v_fault_found
    from FAILURE_TYPE ft, 
    FAILURE_TYPE_DEFINITION ftd, 
    ITEM_GROUP model
    where 
    ft.definition_id = ftd.id and 
    lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) and ft.for_item_group_id = model.id and 
    lower(model.name) = lower(ltrim(rtrim(p_model))) and model.d_active = 1 and ft.d_active = 1 and 
    lower(model.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and 
	lower(model.item_group_type) = 'model' AND ROWNUM = 1;

    RETURN TRUE;
 EXCEPTION
 WHEN OTHERS THEN
    RETURN FALSE;
 END isValidFaultFound;


 FUNCTION isValidCausedBy(p_model VARCHAR2, p_fault_found VARCHAR2, p_caused_by VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_caused_by VARCHAR2(256) := NULL;
  BEGIN
    select fc.id 
    INTO v_caused_by
    from FAILURE_CAUSE fc , FAILURE_CAUSE_DEFINITION fcd , FAILURE_TYPE ft, 
    FAILURE_TYPE_DEFINITION ftd, ITEM_GROUP model
    where fc.definition_id = fcd.id and lower(fcd.name) = lower(ltrim(rtrim(p_caused_by))) and 
    fc.failure_type_id = ft.id and ft.definition_id = ftd.id and 
    lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) and ft.for_item_group_id = model.id and 
    lower(model.name) = lower(ltrim(rtrim(p_model))) and model.d_active = 1 and fc.d_active = 1 and 
    lower(model.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and 
	lower(model.item_group_type) = 'model' AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
 END isValidCausedBy;


 FUNCTION isValidRootCause(p_model VARCHAR2, p_fault_found VARCHAR2, p_root_cause VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_root_cause VARCHAR2(256) := NULL;
  BEGIN
    select frc.id 
    INTO v_root_cause
    from FAILURE_ROOT_CAUSE frc , FAILURE_ROOT_CAUSE_DEFINITION frcd , FAILURE_TYPE ft, 
    FAILURE_TYPE_DEFINITION ftd, ITEM_GROUP model
    where frc.definition_id = frcd.id and lower(frcd.name) = lower(ltrim(rtrim(p_root_cause))) and 
    frc.failure_type_id = ft.id and ft.definition_id = ftd.id and 
    lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) and ft.for_item_group_id = model.id and 
    lower(model.name) = lower(ltrim(rtrim(p_model))) and model.d_active = 1 and frc.d_active = 1 and 
    lower(model.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and 
	lower(model.item_group_type) = 'model' AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidRootCause;


FUNCTION isValidTechnician(p_technician VARCHAR2, p_dealer VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_technician VARCHAR2(256) := NULL;
BEGIN

    SELECT OU.LOGIN  
    INTO v_technician
    FROM ORG_USER TECHNICIAN, BU_USER_MAPPING BUM, USER_ROLES ur, ROLE role, 
        org_user_belongs_to_orgs torgs, service_provider dealer,
        ORG_USER OU, org_user_belongs_to_orgs orgs
    WHERE 
        lower(TECHNICIAN.login) = lower(ltrim(rtrim(p_technician))) 
        AND TECHNICIAN.d_active = 1 
        AND technician.ID = BUM.ORG_USER 
        AND lower(bum.bu) = lower(ltrim(rtrim(p_business_unit_name))) 
        AND ur.org_user = TECHNICIAN.id 
        AND ur.roles = role.id 
        AND lower(role.name) = 'technician' 
        AND technician.id = torgs.org_user
        AND torgs.belongs_to_organizations = dealer.id
        AND lower(OU.login) = lower(ltrim(rtrim(p_dealer))) 
        AND ou.id = orgs.org_user
        AND orgs.belongs_to_organizations = dealer.id 
        AND ROWNUM = 1;
RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidTechnician;


 FUNCTION isValidDate (p_date VARCHAR2, p_format VARCHAR2)
 RETURN BOOLEAN
 IS
  v_date DATE := NULL;
  BEGIN
   SELECT TO_DATE(p_date,p_format)
   INTO   v_date
   FROM   DUAL;
   RETURN TRUE;
  EXCEPTION
  WHEN OTHERS THEN
   RETURN FALSE;
  END isValidDate;


 FUNCTION isValidCurrency (p_currency VARCHAR2)
 RETURN BOOLEAN
 IS
  v_currency VARCHAR2(256) := NULL;
  BEGIN
   SELECT from_currency
   INTO   v_currency
   FROM   CURRENCY_EXCHANGE_RATE
   WHERE upper(from_currency) = upper(ltrim(rtrim(p_currency))) AND ROWNUM = 1;
   RETURN TRUE;
  EXCEPTION
  WHEN OTHERS THEN
   RETURN FALSE;
  END isValidCurrency;


 FUNCTION isConfigParamSet (p_config_param VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
 IS
  v_config_value VARCHAR2(10) := NULL;
  BEGIN
    SELECT cpo.value INTO v_config_value
    FROM config_param cp, config_value cv, config_param_option cpo
    WHERE cp.id=cv.config_param AND cp.type='boolean'
	AND upper(cp.name) = upper(p_config_param) 
	AND cp.d_active=1 AND cv.d_active=1
    AND cv.business_unit_info = p_business_unit_name
	AND cv.config_param_option=cpo.id;
	IF lower(v_config_value) = 'true' THEN
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
  EXCEPTION
  WHEN OTHERS THEN
   RETURN FALSE;
  END isConfigParamSet;


FUNCTION isValidAssemblyDefinitionCode (p_code VARCHAR2, p_level NUMBER)
RETURN BOOLEAN
IS
    v_assembly_id       NUMBER;
BEGIN
    IF p_code = '0000' THEN
        RETURN FALSE;
    END IF;

    SELECT id INTO v_assembly_id
    FROM assembly_definition 
    WHERE lower(code) = lower(p_code) AND assembly_level = p_level
		AND d_active=1;
	RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidAssemblyDefinitionCode;

FUNCTION isValidActionName (p_action VARCHAR2)
RETURN BOOLEAN
IS
    v_id       NUMBER;
BEGIN
    SELECT id INTO v_id FROM action_definition 
    WHERE LOWER(name) = LOWER(p_action) AND ROWNUM=1;
    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidActionName;

FUNCTION isValidActionCode (p_action VARCHAR2)
RETURN BOOLEAN
IS
    v_id       NUMBER;
BEGIN
    SELECT id INTO v_id FROM action_definition 
    WHERE LOWER(code) = LOWER(p_action) AND d_active=1;
    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidActionCode;

FUNCTION getValidSMRReasonId (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
RETURN VARCHAR2
IS
    v_lov_id VARCHAR2(255);
BEGIN
    SELECT l.id INTO v_lov_id
    FROM list_of_values l , i18nlov_text t 
    WHERE 
	l.id=t.list_of_i18n_values 
	AND (t.locale = p_locale OR t.locale='en_US') 
	AND t.description = p_lov
        AND UPPER(l.business_unit_info) = UPPER(p_business_unit_info)
        AND l.type = 'SMRREASON'
        AND l.d_active = 1
        AND l.state='active'
	AND ROWNUM=1;

    RETURN v_lov_id;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END getValidSMRReasonId;

FUNCTION getValidCompetitorModelId (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
RETURN VARCHAR2
IS
    v_lov_id VARCHAR2(255);
BEGIN
    SELECT l.id INTO v_lov_id
    FROM list_of_values l , i18nlov_text t 
    WHERE 
	l.id=t.list_of_i18n_values 
	AND (t.locale = p_locale OR t.locale='en_US') 
	AND UPPER(t.description) = UPPER(p_lov)
        AND UPPER(l.business_unit_info) = UPPER(p_business_unit_info)
        AND l.type = 'CLAIMCOMPETITORMODEL'
        AND l.d_active = 1
        AND l.state='active'
	AND ROWNUM=1;

    RETURN v_lov_id;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END getValidCompetitorModelId;

FUNCTION isValidSMRReason (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
RETURN BOOLEAN
IS
    v_lov_id       NUMBER;
BEGIN

    SELECT l.id INTO v_lov_id
    FROM list_of_values l , i18nlov_text t 
    WHERE 
	l.id=t.list_of_i18n_values 
	AND (t.locale = p_locale OR t.locale='en_US') 
	AND t.description = p_lov
        AND UPPER(l.business_unit_info) = UPPER(p_business_unit_info)
        AND l.type = 'SMRREASON'
        AND l.d_active = 1
        AND l.state='active'
	AND ROWNUM=1;

    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidSMRReason;


FUNCTION isValidFaultCodeForModelId(p_model NUMBER, p_fault_code VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_fault_code            VARCHAR2(256) := NULL;
BEGIN

    SELECT fcd.code 
    INTO v_fault_code
    FROM fault_code_definition fcd, fault_code fc,
        (select fault_code from assembly where fault_code is not null 
            connect by prior id = is_part_of_assembly start with id in 
            (select a.id 
            from failure_structure fs, failure_structure_assemblies fsa, assembly a
            where a.active = 1 and
                fs.for_item_group = p_model and
                fs.id = fsa.failure_structure and
                fsa.assemblies = a.id )
        ) adata
    WHERE
        adata.fault_code = fc.id and
        fc.definition = fcd.id and
        lower(fcd.code) = lower(ltrim(rtrim(p_fault_code))) and 
        lower(fcd.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and 
        fcd.d_active=1 AND ROWNUM = 1;

    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidFaultCodeForModelId;


FUNCTION isValidJobCodeForModelId(p_model NUMBER, p_job_code VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_job_code VARCHAR2(256) := NULL;
BEGIN

    select to_char(spd.code)
    INTO v_job_code
    FROM action_node an,
        service_procedure sp,
        service_procedure_definition spd,
        (select id from assembly connect by prior id = is_part_of_assembly start with id in 
            ( select a.id 
            from 
                failure_structure fs,
                failure_structure_assemblies fsa,
                assembly a
            where
                a.active = 1 and
                fs.for_item_group = p_model and
                fs.id = fsa.failure_structure and
                fsa.assemblies = a.id)
        ) adata
    WHERE
        adata.id = an.defined_for and
        an.id = sp.defined_for and
        an.active = 1 and
        sp.definition = spd.id and
        lower(spd.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and
        lower(spd.code) = lower(ltrim(rtrim(p_job_code))) and spd.d_active = 1 AND ROWNUM = 1;

    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidJobCodeForModelId;


FUNCTION isValidFaultFoundForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_fault_found NUMBER := 0;
BEGIN
    SELECT ft.id 
    INTO v_fault_found
    from FAILURE_TYPE ft, 
        I18NFAILURE_TYPE_DEFINITION ftd
    where 
        ft.definition_id = ftd.failure_type_definition
        AND lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) 
        AND ft.for_item_group_id = p_model 
        AND ft.d_active = 1
        AND ROWNUM = 1;

    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidFaultFoundForModelId;


FUNCTION isValidCausedByForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_caused_by VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_caused_by VARCHAR2(256) := NULL;
BEGIN
    select fc.id 
    INTO v_caused_by
    from FAILURE_CAUSE fc , FAILURE_CAUSE_DEFINITION fcd , 
        FAILURE_TYPE ft, FAILURE_TYPE_DEFINITION ftd
    where fc.definition_id = fcd.id 
        and lower(fcd.name) = lower(ltrim(rtrim(p_caused_by))) 
        and fc.failure_type_id = ft.id and ft.definition_id = ftd.id 
        and lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) 
        and ft.for_item_group_id = p_model 
        and fc.d_active = 1
        AND ROWNUM = 1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidCausedByForModelId;

FUNCTION isValidRootCauseForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_root_cause VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_root_cause VARCHAR2(256) := NULL;
BEGIN
    select frc.id 
    INTO v_root_cause
    from FAILURE_ROOT_CAUSE frc , FAILURE_ROOT_CAUSE_DEFINITION frcd ,
        FAILURE_TYPE ft, FAILURE_TYPE_DEFINITION ftd
    where frc.definition_id = frcd.id 
        and lower(frcd.name) = lower(ltrim(rtrim(p_root_cause))) 
        and frc.failure_type_id = ft.id 
        and ft.definition_id = ftd.id 
        and lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) 
        and ft.for_item_group_id = p_model 
        and frc.d_active = 1 
        and ROWNUM = 1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidRootCauseForModelId;


FUNCTION isValidDelimitedValue(p_value VARCHAR2, p_delimiter VARCHAR2)
RETURN BOOLEAN
IS
  v_index         NUMBER := 1;
  v_cur_idx       NUMBER := 1;
  v_delim_length  NUMBER;
  v_value_length  NUMBER;
BEGIN
  v_delim_length := LENGTH(p_delimiter);
  v_value_length := LENGTH(p_value);

  IF v_value_length <= v_delim_length THEN
    RETURN TRUE;
  END IF;

  WHILE v_index != 0 AND v_cur_idx <= v_value_length LOOP
    v_index := INSTR(p_value, p_delimiter, v_cur_idx);
    IF v_index = v_cur_idx THEN
      RETURN FALSE;
    ELSIF v_index = v_value_length - v_delim_length + 1 THEN
      RETURN FALSE;
    ELSIF v_index > v_cur_idx THEN
      v_cur_idx := v_index + v_delim_length;
    END IF;
  END LOOP;

  RETURN TRUE;
END isValidDelimitedValue;

FUNCTION isValidReplacedIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN
    SELECT i.id INTO v_id
    FROM item i, item_group ig,
        config_param p,config_value v,config_param_option o
    WHERE p.name='replacedItemsOnClaimConfiguration' AND
        v.config_param=p.id AND v.config_param_option=o.id AND
        UPPER(ig.name)=UPPER(o.value) AND
        i.model=ig.id AND 
        v.business_unit_info=p_business_unit AND
        i.business_unit_info=p_business_unit AND
        p.d_active=1 AND i.d_active=1 AND
        i.owned_by in (SELECT org.id FROM party pty,organization org 
            WHERE pty.id=org.id AND pty.name='OEM') AND
        (i.item_number=p_item_number OR i.alternate_item_number=p_item_number)
        AND ROWNUM=1;

    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidReplacedIRPart;

FUNCTION isValidReplacedIRPart(p_serial_number VARCHAR2, p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN
    SELECT i.id INTO v_id
    FROM item i, item_group ig,inventory_item ii,
        config_param p,config_value v,config_param_option o
    WHERE p.name='replacedItemsOnClaimConfiguration' AND
        v.config_param=p.id AND v.config_param_option=o.id AND
        UPPER(ig.name)=UPPER(o.value) AND
        i.model=ig.id AND 
        ii.serial_number=p_serial_number AND
        ii.of_type=i.id AND
        v.business_unit_info=p_business_unit AND
        i.business_unit_info=p_business_unit AND
        p.d_active=1 AND i.d_active=1 AND
        i.owned_by in (SELECT org.id FROM party pty,organization org 
            WHERE pty.id=org.id AND pty.name='OEM') AND
        (i.item_number=p_item_number OR i.alternate_item_number=p_item_number)
        AND ROWNUM=1;

    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidReplacedIRPart;

FUNCTION isValidInstalledIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
Begin
    SELECT i.id INTO v_id
      FROM item i, item_group ig, item_group pg 
      WHERE
        I.Business_Unit_Info = P_Business_Unit And I.D_Active = 1 
        AND (i.item_number =p_item_number or i.alternate_item_number =p_item_number) 
        AND i.owned_by = 1 AND i.model = ig.ID 
        AND i.service_part = 1  AND (UPPER(pg.name) in ('PART'))  
        AND ig.tree_id = pg.tree_id  
        AND ig.lft >= pg.lft  
        And Ig.Rgt <= Pg.Rgt  
        AND rownum =1; 


    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidInstalledIRPart;

FUNCTION isValidAlarmCode(p_alarm_code VARCHAR2,p_product VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN       
      select COUNT(1) into  v_id from item_groups_alarm_code where alarm_code in (select id from alarm_code where  code = p_alarm_code);
      IF v_id=0 then
          RETURN TRUE;
      ELSE    
        SELECT COUNT(1) into v_id FROM DUAL WHERE p_product IN (
        select ITEM_GROUP from item_groups_alarm_code where alarm_code in (select id from alarm_code where  code = p_alarm_code));

         IF v_id >0 then     
          RETURN TRUE;
          else
            RETURN FALSE;
         END IF;
       END IF;   
    EXCEPTION 
        WHEN OTHERS THEN
        RETURN FALSE;
END isValidAlarmCode;

FUNCTION isAllowedCostCategory(p_cost_cat_code VARCHAR2,p_product VARCHAR2,p_business_unit_info VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN
    select COUNT(1) into  v_id from COSTCAT_APPL_PRODUCTS cp, COST_CATEGORY c,item_group g where cp.cost_category = c.id and c.code = p_cost_cat_code
      and g.id =cp.item_group  and g.business_unit_info = p_business_unit_info;
      IF v_id=0 then
          RETURN TRUE;
      ELSE    
        SELECT COUNT(1) into v_id from COSTCAT_APPL_PRODUCTS cp, COST_CATEGORY c where cp.cost_category = c.id 
        and c.code = p_cost_cat_code and cp.item_group = p_product;
         IF v_id >0 then
            RETURN TRUE;
         else
            RETURN FALSE;
         END IF;
       END IF;
    EXCEPTION 
        WHEN OTHERS THEN
        RETURN FALSE;
END isAllowedCostCategory;


FUNCTION isValidMiscPart(p_item_number VARCHAR2, p_service_provider NUMBER, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN
   select
        distinct miscellane6_.id INTO v_id
    from
        misc_item_criteria miscellane0_ 
    inner join
        misc_item_config itemconfig1_ 
            on miscellane0_.id=itemconfig1_.for_criteria 
    inner join
        misc_item miscellane6_ 
            on itemconfig1_.miscellaneous_item=miscellane6_.id 
    left outer join
        dealer_group dealergrou2_ 
            on miscellane0_.dealer_group=dealergrou2_.id cross 
    join
        dealer_group dealergrou3_ 
    inner join
        dealers_in_group includedde4_ 
            on dealergrou3_.id=includedde4_.dealer_group 
    inner join
        service_provider servicepro5_ 
            on includedde4_.dealer=servicepro5_.id 
    inner join
        organization servicepro5_1_ 
            on servicepro5_.id=servicepro5_1_.id 
    inner join
        party servicepro5_2_ 
            on servicepro5_.id=servicepro5_2_.id cross 
    join
        misc_item miscellane7_ 
    where
        miscellane0_.business_unit_info in (
            p_business_unit
        ) 
        and miscellane0_.d_active = 1 
        and dealergrou3_.business_unit_info in (
           p_business_unit
        ) 
        and dealergrou3_.d_active = 1 
        and itemconfig1_.miscellaneous_item=miscellane7_.id 
        and (
            miscellane0_.service_provider is null 
            or miscellane0_.service_provider=p_service_provider
        ) 
        and (
            dealergrou2_.id is null 
            or dealergrou2_.tree_id=dealergrou3_.tree_id 
            and dealergrou2_.lft<=dealergrou3_.lft 
            and dealergrou3_.rgt<=dealergrou2_.rgt 
            and p_service_provider=servicepro5_.id
        ) 
        and (
            upper(miscellane7_.part_number) =upper(p_item_number)
        ) 
        and miscellane0_.active=1 ;
    RETURN TRUE;
EXCEPTION 
WHEN OTHERS THEN
BEGIN 
   SELECT i.id INTO v_id
    FROM misc_item_criteria cr, misc_item_config cfg, misc_item i
    WHERE cr.active=1 AND cr.service_provider=p_service_provider AND
        cfg.for_criteria=cr.id AND cfg.active=1 AND
        cfg.miscellaneous_item=i.id AND
        i.part_number=p_item_number AND
        i.business_unit_info=p_business_unit AND ROWNUM=1;
           RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN

    BEGIN 
        SELECT i.id INTO v_id
        FROM dealers_in_group dig,dealer_group grp,dealer_scheme_purposes sp, 
            purpose pp,misc_item_criteria cr, misc_item_config cfg, misc_item i
        WHERE 
            dig.dealer=p_service_provider AND
            dig.dealer_group = grp.id AND
            grp.scheme = sp.dealer_scheme AND
            sp.purposes = pp.id AND
            pp.name='Dealer Rates' AND
            cr.dealer_group = grp.id AND
            cr.active=1 and cfg.active=1 AND
            cfg.for_criteria=cr.id AND
            cfg.miscellaneous_item=i.id AND 
            i.part_number=p_item_number AND 
            i.business_unit_info=p_business_unit AND rownum=1;
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN FALSE;
     END;
     END;
END isValidMiscPart;


FUNCTION isValidCountry(p_country_code VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
BEGIN
    SELECT id INTO v_id
    FROM country WHERE UPPER(code) = UPPER(p_country_code);
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidCountry;

FUNCTION isValidState(p_state VARCHAR2, p_country_code VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
BEGIN
    SELECT id INTO v_id
    FROM msa 
    WHERE UPPER(country) = UPPER(p_country_code) 
        AND UPPER(st) = UPPER(p_state) AND ROWNUM=1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidState;

FUNCTION isValidCity(p_city VARCHAR2, p_state VARCHAR2, p_country_code VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
BEGIN
    SELECT id INTO v_id
    FROM msa 
    WHERE UPPER(country) = UPPER(p_country_code) 
        AND UPPER(st) = UPPER(p_state)
        AND UPPER(city) = UPPER(p_city) AND ROWNUM=1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidCity;

FUNCTION isValidZipcode(p_zipcode VARCHAR2, p_city VARCHAR2, p_state VARCHAR2, p_country_code VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
BEGIN
    SELECT id INTO v_id
    FROM msa 
    WHERE UPPER(country) = UPPER(p_country_code) 
        AND UPPER(st) = UPPER(p_state)
        AND UPPER(city) = UPPER(p_city)
        AND UPPER(zip2) = UPPER(p_zipcode) AND ROWNUM=1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidZipcode;

FUNCTION isValidCampaignCode(p_campaign_code VARCHAR2, p_dealer NUMBER, p_business_unit VARCHAR2,p_date DATE,v_service_provider_number VARCHAR2,p_serial_number VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;     
BEGIN

    SELECT c.id INTO v_id 
    FROM campaign_notification n, campaign c
    WHERE UPPER(c.business_unit_info) = UPPER(p_business_unit) 
        AND n.campaign = c.id 
        AND n.dealership = p_dealer
        AND n.notification_status = 'PENDING'
        AND p_date >= c.from_date AND p_date <= c.till_date
        AND UPPER(c.code) = UPPER(p_campaign_code)
        AND n.d_active=1 
        AND ROWNUM = 1;

    RETURN TRUE;
EXCEPTION  WHEN others THEN 
   BEGIN    
    select   distinct inventoryi0_.id as id86_ into v_id

        from
            inventory_item inventoryi0_ cross 
        join
            campaign_notification campaignno1_ cross 
        join
            service_provider servicepro2_ 
        inner join
            organization servicepro2_1_ 
                on servicepro2_.id=servicepro2_1_.id 
        inner join
            party servicepro2_2_ 
                on servicepro2_.id=servicepro2_2_.id cross 
        join
            campaign campaign3_ 
        where
            inventoryi0_.business_unit_info in (p_business_unit) 
            and inventoryi0_.d_active = 1 
            and campaignno1_.d_active = 1 
            and servicepro2_2_.d_active = 1 
            and campaignno1_.campaign=campaign3_.id 
            and campaignno1_.item=inventoryi0_.id 
            and campaignno1_.dealership=servicepro2_.id 
            and (
                servicepro2_.service_provider_number=p_dealer
                and inventoryi0_.type='STOCK' 
                or inventoryi0_.type='RETAIL'
            ) 
            and (
                campaignno1_.claim is null
            ) 
            and campaignno1_.notification_status='PENDING' 
            and campaign3_.from_date<=sysdate 
            and campaign3_.code=p_campaign_code
            and (
                upper(inventoryi0_.serial_number)=p_serial_number
            ) 
            and inventoryi0_.serialized_part=0        
          AND ROWNUM = 1;
    RETURN TRUE; 
EXCEPTION
    WHEN others THEN    
        RETURN FALSE;  
 END;
END isValidCampaignCode;

FUNCTION isValidInventoryForFieldMod(
	p_serial_number VARCHAR2, 
	p_campaign_code VARCHAR2, 
	p_dealer NUMBER, 
	p_business_unit VARCHAR2,
	p_rep_date DATE,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_id NUMBER;
	v_date DATE;
BEGIN
	p_error_code := NULL;
	v_date := p_rep_date;
	IF v_date IS NULL THEN
		v_date := sysdate;
	END IF;
    SELECT i.id INTO v_id 
    FROM campaign_notification n,inventory_item i, campaign c
    WHERE UPPER(i.business_unit_info) = UPPER(p_business_unit) 
        AND n.item = i.id
        AND n.campaign = c.id 
        AND (n.dealership=p_dealer AND i.type='STOCK'
			OR i.type='RETAIL')
        AND n.notification_status = 'PENDING'
        AND v_date >= c.from_date and v_date <= c.till_date
        AND UPPER(i.serial_number) = UPPER(p_serial_number)
        AND UPPER(c.code) = UPPER(p_campaign_code)
		AND i.serialized_part=0
		AND i.d_active=1 AND c.d_active=1 and n.d_active=1;

    RETURN v_id;  
EXCEPTION
    WHEN NO_DATA_FOUND THEN
		p_error_code := 'SN_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'SN_DUP';
		RETURN NULL;
END isValidInventoryForFieldMod;

FUNCTION isValidInventoryForFieldModWCN(
	p_container_number VARCHAR2, 
	p_campaign_code VARCHAR2, 
	p_dealer NUMBER, 
	p_business_unit VARCHAR2,
	p_rep_date DATE,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_id    NUMBER;
	v_date DATE;
BEGIN
	p_error_code := NULL;
	v_date := p_rep_date;
	IF v_date IS NULL THEN
		v_date := sysdate;
	END IF;
    SELECT i.id INTO v_id 
    FROM campaign_notification n,inventory_item i, campaign c
    WHERE i.business_unit_info=p_business_unit
        AND n.item = i.id
        AND n.campaign = c.id 
        AND (n.dealership=p_dealer AND i.type='STOCK'
			OR i.type='RETAIL')
        AND n.notification_status = 'PENDING'
        AND v_date >= c.from_date and v_date <= c.till_date
        AND UPPER(i.vin_number) = UPPER(p_container_number)
        AND UPPER(c.code) = UPPER(p_campaign_code)
        AND i.serialized_part=0
		AND i.d_active=1 AND c.d_active=1 and n.d_active=1;

    RETURN v_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
		p_error_code := 'CN_INV';
        RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'CN_DUP';
		RETURN NULL;
END isValidInventoryForFieldModWCN;

FUNCTION isClaimTypeAllowed(p_type VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
    v_type  VARCHAR2(255);
BEGIN

    IF UPPER(p_type) IN ('MACHINE SERIALIZED','MACHINE NON SERIALIZED') THEN
        v_type := 'Machine';
    ELSIF UPPER(p_type) IN ('ATTACHMENT SERIALIZED','ATTACHMENT NON SERIALIZED') THEN
        v_type := 'Attachment';    
    ELSIF UPPER(p_type) IN ('PARTS WITH HOST','PARTS WITHOUT HOST') THEN
        v_type := 'Parts';
    ELSE
        v_type := 'Campaign';
    END IF;

    SELECT o.id INTO v_id
    FROM config_param p,config_value v,config_param_option o
    WHERE p.d_active=1 AND p.id=v.config_param 
        AND v.d_active=1 AND v.config_param_option=o.id
        AND p.name='claimType'
        AND o.value=v_type
        AND UPPER(v.business_unit_info)=UPPER(p_business_unit)
        AND ROWNUM = 1;

    IF UPPER(p_type) IN ('MACHINE SERIALIZED','ATTACHMENT SERIALIZED','PARTS WITH HOST','FIELDMODIFICATION') THEN
        RETURN TRUE;
    ELSIF UPPER(p_type) IN ('MACHINE NON SERIALIZED','ATTACHMENT NON SERIALIZED','PARTS WITHOUT HOST') THEN
        IF UPPER(p_type) in ('MACHINE NON SERIALIZED','ATTACHMENT NON SERIALIZED') THEN
            v_type := 'nonSerializedClaimAllowed';
        ELSE
            v_type := 'partsClaimWithoutHostAllowed';
        END IF;

        SELECT o.id INTO v_id
        FROM config_param p,config_value v,config_param_option o
        WHERE p.d_active=1 AND p.id=v.config_param 
            AND v.d_active=1 AND v.config_param_option=o.id
            AND p.name=v_type
            AND o.value='true'
            AND UPPER(v.business_unit_info)=UPPER(p_business_unit)
            AND ROWNUM = 1;

        RETURN TRUE;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isClaimTypeAllowed;

FUNCTION hasDuplicateSerializedPart
  (
    p_value_serialNo     VARCHAR2,
    p_value_partNo     VARCHAR2,
    p_delimiter VARCHAR2)
  RETURN BOOLEAN
IS
       v_serial_count                NUMBER         := 0;
       v_part_count                NUMBER         := 0;
       p_serialized_part     VARCHAR2(4000) := NULL;
       v_count                NUMBER         := 0;
BEGIN
  v_serial_count := Common_Utils.count_delimited_values(p_value_serialNo, p_delimiter);
  v_part_count := Common_Utils.count_delimited_values(p_value_partNo, p_delimiter);
   FOR i IN 1 .. v_serial_count LOOP
      p_serialized_part := getSerialNoPartNo( p_value_serialNo,p_value_partNo,p_delimiter,i);

            v_count := 0;
            FOR j IN 1 .. v_serial_count LOOP  

               IF upper(p_serialized_part)= upper(getSerialNoPartNo( p_value_serialNo,p_value_partNo,p_delimiter,j)) THEN                              
                  v_count := v_count+1;                  
                  IF v_count > 1 THEN
                    RETURN TRUE; 
                  END IF;                

               END IF;               
            END LOOP;
    END LOOP;
  RETURN FALSE;
END hasDuplicateSerializedPart;



FUNCTION getSerialNoPartNo
  (
    p_value_serialNo     VARCHAR2,
    p_value_partNo     VARCHAR2,
    p_delimiter VARCHAR2,
    p_index     NUMBER)
  RETURN VARCHAR2
IS
   p_serial_no     VARCHAR2(4000) := NULL;
   p_part_no VARCHAR2(4000) := NULL;
BEGIN
  p_serial_no := common_utils.get_delimited_value(p_value_serialNo, p_delimiter, p_index); 
  p_part_no := common_utils.get_delimited_value(p_value_partNo, p_delimiter, p_index);   
  RETURN CONCAT(p_serial_no, p_part_no);
END getSerialNoPartNo;

FUNCTION getValidCausalPart(p_item_number VARCHAR2, p_business_unit_name VARCHAR2)
RETURN VARCHAR2
IS
    v_item_id NUMBER := NULL;
    v_item_number_index NUMBER := -1;
    v_item_number VARCHAR2(255) := NULL;
BEGIN
SELECT i.item_number 
    INTO v_item_number
    FROM ITEM i, PARTY p, item_group ig, item_group pg
    WHERE ( UPPER(i.alternate_item_number) = UPPER(ltrim(rtrim(p_item_number)))  OR 
    UPPER(i.item_number) = UPPER(ltrim(rtrim(p_item_number))) )
    AND (i.business_unit_info) = (ltrim(rtrim(p_business_unit_name)))
    AND i.owned_by = p.ID
    AND p.NAME = common_utils.constant_oem_name and i.d_active = 1 
    AND i.model=ig.id 
    AND UPPER(pg.name) in (SELECT UPPER(co.value)
        FROM config_param cp, config_value cv, config_param_option co
        WHERE cp.name='causalItemsOnClaimConfiguration' 
		AND cp.id=cv.config_param
            AND cv.d_active=1
			AND cv.config_param_option=co.id
            AND (cv.business_unit_info) = (ltrim(rtrim(p_business_unit_name))))
    AND ig.tree_id=pg.tree_id
    AND ig.lft >= pg.lft
    AND ig.rgt <= pg.rgt 
    AND rownum  < 2; 
    RETURN v_item_number;
EXCEPTION 
WHEN OTHERS THEN
    RETURN NULL;
END getValidCausalPart;

FUNCTION getReplacedIRPartNumber(p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN VARCHAR2
IS
  v_item_number         VARCHAR2(255) := NULL;
BEGIN
    SELECT i.item_number
    INTO v_item_number
    FROM item i,
      item_group ig,
      item_group pg,
      config_param p,
      config_value v,
      config_param_option o
    WHERE p.name             ='replacedItemsOnClaimConfiguration'
    AND v.config_param       =p.id
    AND v.config_param_option=o.id
    AND UPPER(ig.name)       =UPPER(o.value)
    AND i.model              =pg.id
    AND v.business_unit_info = p_business_unit
    AND i.business_unit_info =p_business_unit
    AND p.d_active           =1
    AND i.d_active           =1
    AND pg.tree_id           = ig.tree_id
    AND pg.lft              >= ig.lft
    AND pg.rgt              <= ig.rgt
    AND i.owned_by          IN
      (SELECT org.id
      FROM party pty,
        organization org
      WHERE pty.id=org.id
      AND pty.name='OEM'
      )
    AND (i.item_number        =p_item_number
    OR i.alternate_item_number=p_item_number)
    AND rownum                < 2;      
    RETURN v_item_number;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN NULL;
END getReplacedIRPartNumber;

FUNCTION getInstalledIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN VARCHAR2
IS
  v_item_number         VARCHAR2(255) := NULL;
Begin
    SELECT i.item_number INTO v_item_number
      FROM item i, item_group ig, item_group pg 
      WHERE
        I.Business_Unit_Info = P_Business_Unit And I.D_Active = 1 
        AND (i.item_number =p_item_number or i.alternate_item_number =p_item_number) 
        AND i.owned_by = 1 AND i.model = ig.ID 
        AND i.service_part = 1  
        AND (UPPER(pg.name) in (SELECT t3.value 
FROM config_param t1 ,
  config_value t2 ,
  config_param_option t3
WHERE t1.name              = 'replacedItemsOnClaimConfiguration'
AND t2.config_param        = t1.id
AND t2.config_param_option = t3.id
AND t2.d_active            = 1
AND t2.active              = 1
AND t2.business_unit_info  = P_Business_Unit ))  
        AND ig.tree_id = pg.tree_id  
        AND ig.lft >= pg.lft  
        And Ig.Rgt <= Pg.Rgt 
        AND rownum  <2;        
    RETURN v_item_number;

EXCEPTION 
    WHEN OTHERS THEN
        RETURN NULL;
END getInstalledIRPart;

FUNCTION getOwnershipForInventory(p_inv NUMBER)
RETURN NUMBER
IS
	v_owner NUMBER;
BEGIN
	SELECT it.owner_ship INTO v_owner
	FROM inventory_transaction it
	WHERE d_active=1 AND transacted_item=p_inv
		AND transaction_order=(
			SELECT MAX(transaction_order) FROM inventory_transaction t 
			WHERE t.transacted_item=p_inv AND t.d_active=1);

	RETURN v_owner;
EXCEPTION
	WHEN OTHERS THEN
		RETURN NULL;
END getOwnershipForInventory;

FUNCTION getServiceProviderType(p_service_provider NUMBER)
RETURN VARCHAR2
IS
	v_cust_type VARCHAR2(20);
BEGIN
	SELECT CASE WHEN d.id IS NOT NULL THEN 'Dealer'
		WHEN dc.id IS NOT NULL THEN 'DirectCustomer'
		WHEN ic.id IS NOT NULL THEN 'InterCompany'
		WHEN na.id IS NOT NULL THEN 'NationalAccount'
		WHEN oem.id IS NOT NULL THEN 'OEM' END
	INTO v_cust_type
	FROM party sp
	LEFT OUTER JOIN dealership d ON d.id=sp.id
	LEFT OUTER JOIN direct_customer dc ON dc.id=sp.id
	LEFT OUTER JOIN inter_company ic ON ic.id=sp.id
	LEFT OUTER JOIN national_account na ON na.id=sp.id
	LEFT OUTER JOIN original_equip_manufacturer oem ON oem.id=sp.id
	WHERE sp.id=p_service_provider AND sp.d_active=1;

	RETURN v_cust_type;
EXCEPTION
	WHEN OTHERS THEN
		RETURN NULL;
END getServiceProviderType;

FUNCTION isAllowedCustomerTypeForSearch(
	p_cust_type VARCHAR2,
	p_bu VARCHAR2)
RETURN BOOLEAN
IS
	v_count NUMBER;
BEGIN
	SELECT COUNT(cp.id) INTO v_count
	FROM config_param cp, config_value cv, config_param_option po
	WHERE cp.name='wntyConfigCustomerTypesAllowedinSearchResult'
		AND cv.config_param=cp.id
		AND cv.business_unit_info=p_bu and cv.d_active=1
		AND po.id=cv.config_param_option
		AND UPPER(po.value)=UPPER(p_cust_type);
	IF v_count > 0 THEN
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
END isAllowedCustomerTypeForSearch;

FUNCTION isValidMachineSerialNumber (
	p_serial_number VARCHAR2, 
	p_business_unit_name VARCHAR2,
	p_model VARCHAR2,
	p_dealer_id NUMBER,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_inventory NUMBER := NULL;
	v_type VARCHAR2(10);
	v_owner NUMBER;
	v_cust_type VARCHAR2(20);
BEGIN
p_error_code := NULL;
BEGIN
	SELECT ID,type INTO v_inventory, v_type
	FROM inventory_item 
	WHERE lower(serial_number) = lower(p_serial_number)
		AND business_unit_info = p_business_unit_name
		AND d_active=1 AND serialized_part = 0;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN
		p_error_code:='SN_INV';
	WHEN TOO_MANY_ROWS THEN
		IF p_model IS NULL THEN
			p_error_code:='SN_DUP_M_EMP';
		ELSE
		BEGIN
			SELECT inv.id,inv.type INTO v_inventory,v_type
			FROM inventory_item inv, item i, item_group m
			WHERE LOWER(inv.serial_number) = LOWER(p_serial_number)
			AND inv.business_unit_info = p_business_unit_name
			AND inv.d_active=1 AND inv.serialized_part = 0
			AND inv.of_type = i.id AND i.model = m.id 
			AND m.item_group_type = 'MODEL'
			AND LOWER(m.name) = LOWER(p_model)
			AND i.d_active = 1 AND m.d_active = 1;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				p_error_code:='SN_DUP_M_INV';
			WHEN TOO_MANY_ROWS THEN
				p_error_code:='SN_M_DUP';
		END;
		END IF;
END;
IF v_type = 'STOCK' THEN
	v_owner := getOwnershipForInventory(v_inventory);
	IF v_owner != p_dealer_id THEN
		v_cust_type := getServiceProviderType(v_owner);
		IF NOT isAllowedCustomerTypeForSearch(v_cust_type, p_business_unit_name) THEN
			p_error_code:='SN_CUST_INV';
		END IF;
	END IF;
END IF;
RETURN v_inventory;
END isValidMachineSerialNumber;

FUNCTION getValidPartSerialNumber(
	p_serial_number VARCHAR2, 
	p_business_unit_name VARCHAR2)
RETURN NUMBER
IS
	v_item_id NUMBER := NULL;  
BEGIN
	SELECT i.ID INTO v_item_id
	FROM INVENTORY_ITEM i
	WHERE lower(i.serial_number) = lower(p_serial_number)
	AND i.business_unit_info = p_business_unit_name
	AND i.d_active = 1 AND i.serialized_part=1
	AND i.source='MAJORCOMPREGISTRATION';
	RETURN v_item_id;
EXCEPTION 
	WHEN OTHERS THEN
		RETURN NULL;
END getValidPartSerialNumber;

FUNCTION isValidItemForNonSerialized (
	p_item_number VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_item NUMBER;
BEGIN
	p_error_code := NULL;
	SELECT i.id INTO v_item
	FROM item i
	WHERE (UPPER(i.item_number)=UPPER(p_item_number)
			OR(UPPER(i.item_number)!=UPPER(p_item_number)
				AND UPPER(i.alternate_item_number)=UPPER(p_item_number)))
		AND i.d_active=1 AND i.business_unit_info=p_bu
		AND i.item_type in ('MACHINE', 'ATTACHMENT') AND i.owned_by=1;
	RETURN v_item;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		p_error_code := 'IT_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'IT_DUP';
		RETURN NULL;
END isValidItemForNonSerialized;

FUNCTION isValidModelForNonSerialized (
	p_model_name VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_model NUMBER;
BEGIN
	p_error_code := NULL;
	SELECT m.id INTO v_model
	FROM item_group m,item_group p
	WHERE m.lft > p.lft AND m.rgt <= p.rgt
		AND UPPER(m.name)=UPPER(p_model_name)
		AND m.item_group_type='MODEL'
		AND p.item_group_type='PRODUCT TYPE'
		AND UPPER(p.name) in ('MACHINE', 'ATTACHMENT') 
		AND m.d_active=1 AND p.d_active=1
		AND m.business_unit_info=p_bu
		AND p.business_unit_info=p_bu;
	RETURN v_model;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN
		p_error_code := 'M_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'M_DUP';
		RETURN NULL;
END isValidModelForNonSerialized;

FUNCTION isValidItemForPartsClaim(
	p_item_number VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_item NUMBER;
BEGIN
	p_error_code := NULL;
	SELECT i.id INTO v_item
	FROM item i, item_group ig, item_group pg,
	config_param cp, config_value cv, config_param_option po
	WHERE (UPPER(i.item_number)=UPPER(p_item_number)
			OR(UPPER(i.item_number)!=UPPER(p_item_number)
				AND UPPER(i.alternate_item_number)=UPPER(p_item_number)))
		AND i.d_active=1 AND i.business_unit_info=p_bu
		AND i.model=ig.id AND i.owned_by=1
		AND ig.tree_id=pg.tree_id 
		AND ig.lft>=pg.lft AND ig.rgt<=pg.rgt
		AND UPPER(pg.name)=UPPER(po.value)
		AND po.id=cv.config_param_option
		AND cv.business_unit_info=p_bu and cv.d_active=1
		AND cv.config_param=cp.id
		AND cp.name='itemTypeAllowedForPartsClaim';
	RETURN v_item;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		p_error_code := 'PRT_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'PRT_DUP';
		RETURN NULL;
END isValidItemForPartsClaim;

END COMMON_VALIDATION_UTILS;
 INFO 09-Aug-12 12:02:33 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Aug-12 12:02:33 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 09-Aug-12 12:02:33 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

create or replace
PROCEDURE                 UPLOAD_DRAFT_CLAIM_VALIDATION AS
CURSOR ALL_REC IS
	SELECT * FROM STG_DRAFT_CLAIM
	WHERE NVL(ERROR_STATUS,'N') = 'N' 
		 ORDER BY ID ASC;

CURSOR DUP_REC IS
SELECT serial_number,campaign_code,COUNT(*)
          FROM STG_DRAFT_CLAIM
          WHERE claim_type='FIELDMODIFICATION'
          GROUP BY serial_number,campaign_code
          HAVING COUNT(*)>1;  

    v_loop_count            NUMBER         := 0;
    v_success_count         NUMBER         := 0;
    v_error_count           NUMBER         := 0;
    v_count                 NUMBER         := 0;
    v_count2                NUMBER         := 0;
    v_file_upload_mgt_id    NUMBER         := 0;
    v_number_temp           NUMBER         := 0;
    isFaultFoundValid       BOOLEAN        := FALSE;
    v_error                 VARCHAR2(4000) := NULL;
    v_error_code            VARCHAR2(4000) := NULL;
    v_model                 NUMBER := NULL;
	v_causal_part           VARCHAR2(255) := NULL;
	v_replaced_parts        VARCHAR2(255) := NULL;
	v_installed_parts       VARCHAR2(255) := NULL;
    v_temp_part_number      VARCHAR2(255) := NULL;
    v_product               NUMBER := NULL;
    v_machine_serial_number VARCHAR2(4000) := NULL;
    v_replaced_part      NUMBER := NULL;
    v_flag                  BOOLEAN := FALSE;
    v_valid_bu              BOOLEAN;
    v_valid_fault_found     BOOLEAN := FALSE;
    v_valid_campaign_code   BOOLEAN := FALSE;
    v_user_locale           VARCHAR2(255) := NULL;
    v_dealer                VARCHAR2(255) := NULL;
    v_dealer_id             NUMBER := NULL;
    v_bu_name               VARCHAR2(255) := NULL;
    v_smr_reason_id         VARCHAR2(255) := NULL;
    v_service_provider      NUMBER := NULL;
    v_service_provider_number  VARCHAR2(255) := NULL;
    v_delimiter             VARCHAR2(10) := '#$#';
    v_fault_code            VARCHAR2(255);
    v_job_codes_delimited   VARCHAR2(255);
    v_job_code              VARCHAR2(255);
    v_fault_found           VARCHAR2(255);    
    v_item_number           VARCHAR2(255) := NULL;   
    v_competitor_model_id   NUMBER := NULL;
    v_ac_input      		    NUMBER         := 0;
    v_id                    NUMBER := NULL;   
    v_repairdate        DATE := NULL;
    v_installeddate      VARCHAR2(255) := NULL;
    v_failuredate       VARCHAR2(255) := NULL;
    v_serial_number       VARCHAR2(20) := NULL;
	v_serialized BOOLEAN;
	v_part_installed BOOLEAN;
	v_part_installed_on_tktsa BOOLEAN;
	v_bu_config_display_item BOOLEAN := FALSE;
	v_err VARCHAR2(20);
	v_inv NUMBER;
	v_item NUMBER;
	v_part_serial NUMBER;
	v_part NUMBER;
	v_model_id NUMBER;

BEGIN

    BEGIN
     FOR EACH_DUP_REC IN DUP_REC
      LOOP
        UPDATE STG_DRAFT_CLAIM
        SET ERROR_STATUS    = 'N',
          ERROR_CODE        = 'Field modification code is duplicate for same Serial Number'
        WHERE serial_number = EACH_DUP_REC.serial_number
        AND campaign_code   = EACH_DUP_REC.campaign_code;
      END LOOP;
    END;

    BEGIN
    SELECT u.locale, u.login, f.business_unit_info, o.id INTO v_user_locale, v_dealer, v_bu_name, v_dealer_id
    FROM org_user u,file_upload_mgt f,org_user_belongs_to_orgs orgu,organization o
    WHERE u.id = f.uploaded_by 
        and orgu.org_user=u.id and orgu.belongs_to_organizations=o.id AND f.id=(SELECT file_upload_mgt_id FROM stg_draft_claim WHERE rownum = 1);
       /* SELECT u.locale, u.login, f.business_unit_info, u.belongs_to_organization  INTO v_user_locale, v_dealer, v_bu_name, v_dealer_id
        FROM org_user u,file_upload_mgt f
        WHERE u.id = f.uploaded_by AND f.id = 
            (SELECT file_upload_mgt_id FROM stg_draft_claim WHERE rownum = 1);*/
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            v_user_locale := 'en_US';
    END;


    BEGIN
        SELECT id, service_provider_number 
		INTO v_service_provider,v_service_provider_number 
        FROM service_provider WHERE id=v_dealer_id;
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            NULL;
    END;

	IF common_validation_utils.isConfigParamSet('isItemNumberDisplayRequired', v_bu_name) THEN
		v_bu_config_display_item := TRUE;
	END IF;

  FOR EACH_REC IN ALL_REC
  LOOP

    v_error_code := '';
    v_model := NULL;
	v_causal_part := NULL;
	v_replaced_parts := NULL;
	v_installed_parts := NULL;
    v_product := NULL;
    v_valid_bu := FALSE;
    v_valid_fault_found := FALSE;
    v_job_codes_delimited := NULL;
    v_valid_campaign_code := FALSE;
    v_smr_reason_id := NULL;
    v_fault_code := NULL;
    v_job_code := NULL;
    v_fault_found := NULL;
	v_serial_number := ltrim(rtrim(each_rec.serial_number));
	v_err := NULL;
	v_inv := NULL;
	v_item := NULL;
	v_part_serial := NULL;
	v_part := NULL;
	v_model_id := NULL;
	v_machine_serial_number := NULL;
	v_item_number := NULL;
	v_competitor_model_id := NULL;
	v_serialized := TRUE;
	v_part_installed := FALSE;
	v_part_installed_on_tktsa := FALSE;
	v_repairdate := NULL;
	v_failuredate := NULL;
	v_installeddate := NULL;

	IF EACH_REC.REPAIR_DATE IS NOT NULL AND 
		COMMON_VALIDATION_UTILS.isValidDate(each_rec.REPAIR_DATE, 'YYYY-MM-DD') THEN
		v_repairdate := TO_DATE(each_rec.repair_date,'YYYY-MM-DD');
	ELSIF EACH_REC.REPAIR_DATE IS NOT NULL AND 
		COMMON_VALIDATION_UTILS.isValidDate(each_rec.REPAIR_DATE, 'YYYYMMDD') THEN
		v_repairdate := TO_DATE(each_rec.repair_date,'YYYYMMDD');
	ELSE
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC018');
	END IF;

	IF UPPER(EACH_REC.CLAIM_TYPE) NOT IN ('FIELDMODIFICATION') THEN
		IF EACH_REC.FAILURE_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.FAILURE_DATE, 'YYYY-MM-DD') THEN
			v_failuredate := TO_DATE(each_rec.FAILURE_DATE,'YYYY-MM-DD');
		ELSIF EACH_REC.FAILURE_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.FAILURE_DATE, 'YYYYMMDD') THEN
			v_failuredate := TO_DATE(each_rec.FAILURE_DATE,'YYYYMMDD');
		ELSE
			v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC019');
		END IF;
	END IF;

	IF UPPER(EACH_REC.CLAIM_TYPE) IN ('MACHINE NON SERIALIZED', 'ATTACHMENT NON SERIALIZED', 'PARTS WITH HOST') THEN
		IF EACH_REC.INSTALLATION_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.INSTALLATION_DATE, 'YYYY-MM-DD') THEN
			v_installeddate := TO_DATE(each_rec.INSTALLATION_DATE,'YYYY-MM-DD');
		ELSIF EACH_REC.INSTALLATION_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.INSTALLATION_DATE, 'YYYYMMDD') THEN
			v_installeddate := TO_DATE(each_rec.INSTALLATION_DATE,'YYYYMMDD');
		ELSE
			v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC020');
		END IF;
	END IF;


    BEGIN
        IF v_bu_name IS NULL OR lower(v_bu_name) != lower(each_rec.business_unit_name) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC001');
        ELSIF NOT (COMMON_VALIDATION_UTILS.isUserBelongsToBU(v_bu_name,v_dealer)) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC044');
        ELSE
            v_valid_bu := TRUE;
        END IF;
	END;

	IF EACH_REC.UNIQUE_IDENTIFIER IS NULL THEN
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC002');
	END IF;

	BEGIN
        IF each_rec.claim_type IS NULL OR UPPER(each_rec.claim_type) NOT IN 
            ('MACHINE SERIALIZED', 'MACHINE NON SERIALIZED', 'PARTS WITH HOST', 
            'PARTS WITHOUT HOST', 'FIELDMODIFICATION' , 'ATTACHMENT SERIALIZED', 'ATTACHMENT NON SERIALIZED')
        THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC003');
        ELSIF v_valid_bu = TRUE AND NOT common_validation_utils.isClaimTypeAllowed(each_rec.claim_type, v_bu_name) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC066');
        END IF;
	END;


    IF UPPER(each_rec.claim_type) IN ('FIELDMODIFICATION') THEN
        IF each_rec.campaign_code IS NULL THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC026');
        ELSIF NOT common_validation_utils.isValidCampaignCode(each_rec.campaign_code, v_service_provider, v_bu_name,v_repairdate,v_service_provider_number,v_serial_number) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC065');
        ELSE
            v_valid_campaign_code := TRUE;
        END IF;
    END IF;

	IF UPPER(each_rec.is_serialized) = 'N' THEN
		v_serialized := FALSE;
	END IF;
	IF UPPER(each_rec.is_part_installed) = 'Y' THEN
		v_part_installed := TRUE;
	END IF;
	IF UPPER(each_rec.is_part_installed_on_oem) = 'Y' THEN
		v_part_installed_on_tktsa := TRUE;
	END IF;

	IF UPPER(each_rec.claim_type) = 'PARTS WITHOUT HOST' THEN
		v_serialized := NULL;
		v_part_installed_on_tktsa := NULL;
	ELSIF UPPER(each_rec.claim_type) in ('FIELDMODIFICATION',
		'MACHINE SERIALIZED','MACHINE NON SERIALIZED', 'ATTACHMENT SERIALIZED', 'ATTACHMENT NON SERIALIZED') THEN
		v_part_installed := NULL;
		v_part_installed_on_tktsa := NULL;
	ELSIF UPPER(each_rec.claim_type) = 'PARTS WITH HOST' AND v_serialized THEN
		v_part_installed_on_tktsa := NULL;
	END IF;

	IF NOT v_serialized AND UPPER(each_rec.claim_type) IN 
			('MACHINE SERIALIZED','ATTACHMENT SERIALIZED','FIELDMODIFICATION') THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC101');
	ELSIF v_serialized AND UPPER(each_rec.claim_type) IN 
			('MACHINE NON SERIALIZED', 'ATTACHMENT NON SERIALIZED') THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC107');
	END IF;
	IF UPPER(each_rec.claim_type) = 'PARTS WITH HOST' 
			AND NOT v_part_installed THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC102');
	END IF;
	IF UPPER(each_rec.claim_type) = 'PARTS WITHOUT HOST' 
			AND v_part_installed THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC103');
	END IF;

	IF UPPER(each_rec.claim_type) IN ('PARTS WITHOUT HOST','PARTS WITH HOST') THEN
		IF each_rec.part_serial_number IS NOT NULL THEN
			v_part_serial := common_validation_utils.getValidPartSerialNumber(
								each_rec.part_serial_number, v_bu_name);
			IF v_part_serial IS NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC073_PS');
			ELSE
			SELECT of_type INTO v_part 
			FROM inventory_item WHERE id=v_part_serial;
			BEGIN
				select id,serial_number into v_inv,v_machine_serial_number 
				from inventory_item where id in ( 
					select part_of from inventory_item_composition  
					where part = v_part_serial);
			EXCEPTION 
				WHEN NO_DATA_FOUND THEN
					NULL;
			END;
			END IF;
		ELSIF each_rec.part_item_number IS NOT NULL THEN
			v_part := common_validation_utils.isValidItemForPartsClaim(
								each_rec.PART_ITEM_NUMBER, v_bu_name,v_err);
			IF v_err IS NOT NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_'||v_err);
				v_err := NULL;
			END IF;
		ELSE
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC014');
		END IF;
	END IF;

	IF v_machine_serial_number IS NOT NULL THEN
		IF UPPER(each_rec.claim_type)='PARTS WITHOUT HOST' THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC104');
		ELSIF NOT v_serialized THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC105');
		ELSIF v_serial_number IS NULL THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC004');
		ELSIF UPPER(v_serial_number) != UPPER(v_machine_serial_number) THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_90');
		END IF;
	ELSIF v_serialized THEN
		IF v_serial_number IS NOT NULL THEN
			IF UPPER(each_rec.claim_type)='FIELDMODIFICATION' THEN
				v_inv := common_validation_utils.isValidInventoryForFieldMod(
							v_serial_number,each_rec.campaign_code,
							v_service_provider,v_bu_name,v_repairdate,v_err);
			ELSE
				v_inv := common_validation_utils.isValidMachineSerialNumber(
								v_serial_number, v_bu_name, each_rec.model_number,
								v_service_provider, v_err);
			END IF;
		ELSIF each_rec.container_number IS NOT NULL THEN
			IF UPPER(each_rec.claim_type)='FIELDMODIFICATION' THEN
				v_inv := common_validation_utils.isValidInventoryForFieldModWCN(
							each_rec.container_number,each_rec.campaign_code,
							v_service_provider,v_bu_name,v_repairdate,v_err);
			ELSE 
				v_inv := common_validation_utils.isValidInventoryWithConNum(
								each_rec.container_number, v_bu_name,v_err);
			END IF;
		ELSE
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC004');
		END IF;
		IF v_err IS NOT NULL THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_'||v_err);
			v_err := NULL;
			v_inv := NULL;
		END IF;
	ELSIF NOT v_serialized THEN
		IF v_part_installed AND NOT v_part_installed_on_tktsa THEN
			IF each_rec.competitor_model IS NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC106');
			ELSE
				v_competitor_model_id := common_validation_utils.getValidCompetitorModelId(
					each_rec.competitor_model, v_user_locale, v_bu_name);
				IF v_competitor_model_id IS NULL THEN
					v_error_code := common_utils.addErrorMessage(v_error_code,'DC071_CM');
				END IF;
			END IF;
		ELSIF (v_part_installed AND v_part_installed_on_tktsa)
				OR v_part_installed IS NULL THEN
			IF v_bu_config_display_item THEN
				IF each_rec.item_number IS NULL THEN
					v_error_code := common_utils.addErrorMessage(v_error_code,'DC011');
				ELSE 
					v_item := common_validation_utils.isValidItemForNonSerialized(
									each_rec.item_number,v_bu_name,v_err);
				END IF;
			ELSIF each_rec.model_number IS NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code,'DC009');
			ELSE
				v_model_id := common_validation_utils.isValidModelForNonSerialized(
									each_rec.model_number, v_bu_name, v_err);
			END IF;
			IF v_err IS NOT NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_'||v_err);
				v_err := NULL;
			END IF;
		END IF;
	END IF;

	IF v_model_id IS NOT NULL THEN
		v_model := v_model_id;
	ELSIF v_item IS NOT NULL THEN
		SELECT m.id INTO v_model
		FROM item i,item_group m
		WHERE i.id=v_item AND i.model=m.id;
	ELSIF v_inv IS NOT NULL THEN
		SELECT m.id,CASE WHEN p1.item_group_type='PRODUCT' THEN p1.id
			ELSE p2.id END INTO v_model,v_product
		FROM inventory_item ii,item i,item_group m,item_group p1,item_group p2
		WHERE ii.id=v_inv AND ii.of_type=i.id and i.model=m.id
			AND m.is_part_of=p1.id AND p1.is_part_of=p2.id;
	END IF;


     BEGIN
       IF EACH_REC.ALARM_CODES IS NOT NULL THEN          
            v_ac_input := Common_Utils.count_delimited_values(each_rec.ALARM_CODES, ',');
            FOR i IN 1 .. v_ac_input LOOP

                IF  v_product IS NOT NULL THEN       
                      IF NOT common_validation_utils.isValidAlarmCode(
                              common_utils.get_delimited_value(each_rec.ALARM_CODES, ',', i),v_product, v_bu_name)
                      THEN
                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC067_IAC');
                          EXIT;
                      END IF;
                ELSE 
                     select alarm_code.id into v_id from alarm_code where  lower(trim(code)) = lower(trim(common_utils.get_delimited_value(each_rec.ALARM_CODES, ',', i)));

                END IF;
            END LOOP;
        END IF; 
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC067_IAC');
     END;




  IF UPPER(EACH_REC.CLAIM_TYPE) IN ('MACHINE SERIALIZED', 'ATTACHMENT SERIALIZED', 'PARTS WITH HOST', 'FIELDMODIFICATION')
  THEN
    IF EACH_REC.MACHINE_HOURS IS NULL
    THEN
      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC016');
    END IF;

    IF EACH_REC.MACHINE_HOURS IS NOT NULL AND (EACH_REC.MACHINE_HOURS < 0 OR EACH_REC.MACHINE_HOURS > 999999)
    THEN
      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC017');
    END IF;
  END IF;

	BEGIN
		 IF EACH_REC.WORK_ORDER_NUMBER IS NULL
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC021');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.CONDITIONS_FOUND IS NULL
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC022');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.WORK_PERFORMED IS NULL
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC023');
		 END IF;
	END;




	BEGIN
    IF UPPER(EACH_REC.CLAIM_TYPE) NOT IN ('PARTS WITHOUT HOST', 'FIELDMODIFICATION') THEN
        IF (EACH_REC.CAUSAL_PART IS NOT NULL) THEN
            v_causal_part := COMMON_VALIDATION_UTILS.getValidCausalPart(EACH_REC.CAUSAL_PART, v_bu_name);
        END IF;
        IF EACH_REC.CAUSAL_PART IS NULL OR (EACH_REC.CAUSAL_PART IS NOT NULL AND v_causal_part IS NULL) THEN
		    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC025');
        ELSIF v_causal_part != each_rec.causal_part THEN
            UPDATE stg_draft_claim SET causal_part=v_causal_part WHERE id=each_rec.id;
		END IF;
    END IF;
	END;







    IF UPPER(each_rec.claim_type) NOT IN ('PARTS WITHOUT HOST') AND 
            each_rec.replaced_oem_parts IS NOT NULL THEN

         IF  each_rec.INSTALLED_OEM_PARTS IS NULL THEN            
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045_ADD_INP');         
         END IF;    

        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_oem_parts, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045');
            v_flag := FALSE;
        ELSE
            v_count := Common_Utils.count_delimited_values(each_rec.replaced_oem_parts, v_delimiter);
             IF  each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN            
                IF NOT common_validation_utils.isValidDelimitedValue(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter) THEN
                  v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045_SE');
                  v_flag := FALSE;
                ELSE
                  v_count2 := Common_Utils.count_delimited_values(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter); 
                END IF; 
             END IF;
            IF v_flag = TRUE THEN


            IF UPPER(each_rec.claim_type) IN ('PARTS WITH HOST') AND common_validation_utils.hasDuplicateSerializedPart(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM,each_rec.replaced_oem_parts, v_delimiter) THEN
                  v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_98');          
            END IF;

            FOR i IN 1 .. v_count LOOP
                IF i <= v_count2 THEN
                IF UPPER(each_rec.claim_type) IN ('PARTS WITHOUT HOST') THEN

                            IF UPPER(each_rec.PART_SERIAL_NUMBER) IS NOT NULL THEN
                               IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NULL THEN   
                                        v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Removed part should be serialized replaced part');                                         
                               ELSE
                                                     IF each_rec.PART_SERIAL_NUMBER != each_rec.REPLACED_OEM_PARTS_SERIAL_NUM THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Replaced part serial number should be same as part serial number');

                                                     ELSIF common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Serialized replaced part quatity should be one');
                                                     END IF;

                               END IF;  
                            ELSIF UPPER(each_rec.Part_item_Number) IS NOT NULL THEN
                                 IF each_rec.Replaced_OEM_Parts IS NOT NULL THEN
                                                  IF common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, i) != each_rec.Part_item_Number THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Please add correct replaced part');
                                                   END IF;
                                  END IF;                         
                                  IF UPPER(each_rec.REPLACED_OEM_PARTS_QUANTITY) IS NOT NULL THEN
                                                  IF common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i) !=1 THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Replaced part quantity should be one only');   
                                                   END IF;
                                  END IF;                 
                             END IF;
                END IF; 
                        IF UPPER(each_rec.claim_type) IN ('PARTS WITH HOST') THEN

                            IF UPPER(each_rec.PART_SERIAL_NUMBER) IS NOT NULL THEN
                                   IF common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_79');
                                   END IF;

                                   IF each_rec.Is_Serialized in ('Y') THEN

                                          IF each_rec.Is_Part_Installed_on_OEM in ('Y') THEN                                         

                                              IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                    select count(*) into v_replaced_part from  Inventory_Item_Composition where part_of in (select id from inventory_item where serial_number = v_machine_serial_number ) and part in (select id from inventory_item where serial_number=common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i) );   

                                                     IF v_replaced_part != 1 THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_78');                                                     
                                                     END IF;
                                               END IF;


                                               IF each_rec.Installed_OEM_Parts_Serial_Num IS NOT NULL THEN
                                                    IF common_utils.get_delimited_value(each_rec.Installed_OEM_Parts_Quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_80');
                                                     END IF;
                                               END IF;

                                           ELSE 

                                              IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL AND common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i) != each_rec.Part_Serial_Number THEN
                                                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_81');
                                              END IF;   

                                              IF each_rec.Installed_OEM_Parts_Serial_Num IS NOT NULL AND common_utils.get_delimited_value(each_rec.Installed_OEM_Parts_Quantity, v_delimiter, i) !=1 THEN

                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_80');

                                               END IF;
                                           END IF;

                                    ELSE
                                             IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL AND common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i) != each_rec.Part_Serial_Number THEN
                                                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_81');
                                              END IF;    

                                              IF each_rec.Installed_OEM_Parts_Serial_Num IS NOT NULL AND common_utils.get_delimited_value(each_rec.Installed_OEM_Parts_Quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_80');
                                               END IF;  
                                    END IF;


                            ELSIF UPPER(each_rec.Part_item_Number) IS NOT NULL THEN

                                      IF each_rec.Is_Serialized in ('Y') THEN    

                                            IF each_rec.Is_Part_Installed_on_OEM in ('Y') THEN
                                                  IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_82');
                                                   END IF;        

                                            ELSE
                                                  IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_82'); 
                                                  END IF;
                                                  IF each_rec.Replaced_OEM_Parts IS NOT NULL AND UPPER(each_rec.Part_item_Number) != common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, 1) THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_85');
                                                   END IF;
                                                   IF Common_Utils.count_delimited_values(each_rec.Replaced_OEM_Parts, v_delimiter)  !=1 THEN
                                                      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Should not add more than one part');
                                                   END IF;

                                                   IF each_rec.Installed_OEM_Parts_Serial_Num is NOT NULL THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_87');
                                                   END IF;  
                                             END IF;

                                       ELSE

                                              IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_84');
                                               END IF;

                                              IF each_rec.Replaced_OEM_Parts IS NOT NULL AND UPPER(each_rec.Part_item_Number) != common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, i) THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_85');
                                              END IF;

                                              IF Common_Utils.count_delimited_values(each_rec.Replaced_OEM_Parts, v_delimiter)  !=1 THEN
                                                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Should not add more than one part');
                                              END IF;

                                              IF each_rec.Installed_OEM_Parts_Serial_Num is NOT NULL THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_87');
                                              END IF;  
                                       END IF;
                            END IF;   
                         END IF; 
                        IF NOT common_validation_utils.isValidReplacedIRPart(common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i),
                              common_utils.get_delimited_value(each_rec.replaced_OEM_parts, v_delimiter, i), v_bu_name)
                        THEN
                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC046');
                          EXIT;
                        END IF;

                ELSE          

                              IF UPPER(each_rec.Part_item_Number) IS NOT NULL THEN
                                   IF each_rec.Is_Part_Installed_on_OEM in ('N') OR each_rec.Is_Serialized in ('N') THEN                                         

                                        IF each_rec.Replaced_OEM_Parts IS NOT NULL AND UPPER(each_rec.Part_item_Number) != common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, i) THEN
                                                                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_88');
                                        END IF;

                                        IF Common_Utils.count_delimited_values(each_rec.Replaced_OEM_Parts, v_delimiter)  !=1 THEN
                                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Should not add more than one part');
                                        END IF;

                                        IF each_rec.Installed_OEM_Parts_Serial_Num is NOT NULL THEN
                                                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_87');
                                        END IF;  
                                    END IF;
                              END IF;

                      v_temp_part_number := common_validation_utils.getReplacedIRPartNumber(
		                        common_utils.get_delimited_value(each_rec.replaced_OEM_parts, v_delimiter, i), v_bu_name);
		                IF v_temp_part_number IS NULL
		                THEN
		                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC046');
		                    v_replaced_parts := NULL;
		                    EXIT;
		                END IF;
		                IF i > 1 THEN
		                    v_replaced_parts := v_replaced_parts || v_delimiter;
		                END IF;			  
						v_replaced_parts := v_replaced_parts || v_temp_part_number;
                END IF;     

            END LOOP;
			IF v_replaced_parts IS NOT NULL AND v_replaced_parts != each_rec.replaced_OEM_parts THEN
                UPDATE stg_draft_claim SET replaced_OEM_parts=v_replaced_parts WHERE id=each_rec.id;
            ENd IF;
            END IF;   
        END IF;

        IF each_rec.replaced_oem_parts_quantity IS NULL THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC027');
        ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_oem_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC047');
        ELSIF v_flag = TRUE AND v_count != Common_Utils.count_delimited_values(each_rec.replaced_oem_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC048');
        ELSIF v_flag = TRUE THEN
            FOR i IN 1 .. v_count LOOP
                IF NOT common_utils.isPositiveInteger(
                        common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i)) 
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC054');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
    END IF; 




    IF UPPER(each_rec.claim_type) NOT IN ('PARTS WITHOUT HOST') AND 
            each_rec.INSTALLED_OEM_PARTS IS NOT NULL THEN
        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.INSTALLED_OEM_PARTS, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045_INP');
            v_flag := FALSE;
        ELSE            
              IF v_count != Common_Utils.count_delimited_values(each_rec.INSTALLED_OEM_PARTS, v_delimiter) THEN
                 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC075');
              End If;
            v_count := Common_Utils.count_delimited_values(each_rec.INSTALLED_OEM_PARTS, v_delimiter);
            For I In 1 .. V_Count Loop               
                v_temp_part_number := common_validation_utils.getInstalledIRPart(
                        common_utils.get_delimited_value(each_rec.INSTALLED_OEM_PARTS, v_delimiter, i), v_bu_name);
                IF v_temp_part_number IS NULL
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC046_INP');
                    v_installed_parts := NULL;
                    EXIT;
                END IF;
                IF i > 1 THEN
                    v_installed_parts := v_installed_parts || v_delimiter;
                END IF;
                v_installed_parts := v_installed_parts || v_temp_part_number;
            END LOOP;
			IF v_installed_parts IS NOT NULL AND v_installed_parts != each_rec.INSTALLED_OEM_PARTS THEN
                UPDATE stg_draft_claim SET INSTALLED_OEM_PARTS=v_installed_parts WHERE id=each_rec.id;
            ENd IF;
        END IF;

        IF each_rec.INSTALLED_OEM_PARTS_QUANTITY IS NULL THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC027_INP');
        ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.INSTALLED_OEM_PARTS_QUANTITY, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC047_INP');
        ELSIF v_flag = TRUE AND v_count != Common_Utils.count_delimited_values(each_rec.INSTALLED_OEM_PARTS_QUANTITY, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC048_INP');
        ELSIF v_flag = TRUE THEN
            FOR i IN 1 .. v_count LOOP
                IF NOT common_utils.isPositiveInteger(
                        common_utils.get_delimited_value(each_rec.INSTALLED_OEM_PARTS_QUANTITY, v_delimiter, i)) 
                THEN
                      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC054_INP');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
    END IF;

    IF each_rec.miscellaneous_parts IS NOT NULL THEN
        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.miscellaneous_parts, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC049');
            v_flag := FALSE;
        ELSE
            v_count := Common_Utils.count_delimited_values(each_rec.miscellaneous_parts, v_delimiter);
            FOR i IN 1 .. v_count LOOP
                IF NOT common_validation_utils.isValidMiscPart(
                        common_utils.get_delimited_value(each_rec.miscellaneous_parts, v_delimiter, i), v_service_provider, v_bu_name)
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC050');
                    EXIT;
                END IF;
            END LOOP;
        END IF;

        IF each_rec.misc_parts_quantity IS NULL THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC051');
        ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.misc_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC052');
        ELSIF v_flag = TRUE AND v_count != Common_Utils.count_delimited_values(each_rec.misc_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC053');
        ELSIF v_flag = TRUE THEN
            FOR i IN 1 .. v_count LOOP
                IF NOT common_utils.isPositiveInteger(
                        common_utils.get_delimited_value(each_rec.misc_parts_quantity, v_delimiter, i)) 
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC055');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
    END IF;

    IF UPPER(each_rec.claim_type) NOT IN ('PARTS WITHOUT HOST') AND 
            each_rec.replaced_non_oem_parts IS NOT NULL 
    THEN
        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC056');
            v_flag := FALSE;
        ELSE
            v_count := common_utils.count_delimited_values(each_rec.replaced_non_oem_parts, v_delimiter);
            IF each_rec.replaced_non_oem_parts_qty IS NULL THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC028');
            ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts_qty, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC057');
            ELSIF v_count != common_utils.count_delimited_values(each_rec.replaced_non_oem_parts_qty, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC058');
            ELSE
                FOR i IN 1 .. v_count LOOP
                    IF NOT common_utils.isPositiveInteger(
                            common_utils.get_delimited_value(each_rec.replaced_non_oem_parts_qty, v_delimiter, i)) 
                    THEN
                        v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC059');
                        EXIT;
                    END IF;
                END LOOP;
            END IF;

            IF each_rec.replaced_non_oem_parts_price IS NULL THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC029');
            ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts_price, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC060');
            ELSIF v_count != common_utils.count_delimited_values(each_rec.replaced_non_oem_parts_price, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC061');
            END IF;

            IF each_rec.replaced_non_oem_parts_desc IS NULL THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC030');
            ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts_desc, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC062');
            ELSIF v_count != common_utils.count_delimited_values(each_rec.replaced_non_oem_parts_desc, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC063');
            END IF;        
        END IF;
    END IF;




	BEGIN
		 IF EACH_REC.SMR_CLAIM IS NOT NULL AND EACH_REC.SMR_CLAIM NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC031');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.COMMERCIAL_POLICY IS NOT NULL AND EACH_REC.COMMERCIAL_POLICY NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC068_CP');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.IS_PART_INSTALLED IS NOT NULL AND EACH_REC.IS_PART_INSTALLED NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC069_IPI');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.IS_PART_INSTALLED_ON_OEM IS NOT NULL AND EACH_REC.IS_PART_INSTALLED_ON_OEM NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC070_PITKTSA');
		 END IF;
	END;



	BEGIN
		 IF EACH_REC.SMR_CLAIM IS NOT NULL AND each_rec.smr_claim = 'Y' THEN
            IF EACH_REC.REASON_FOR_SMR_CLAIM IS NULL THEN
			    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC032');
            ELSE
                v_smr_reason_id := common_validation_utils.getValidSMRReasonId(each_rec.reason_for_smr_claim, v_user_locale, v_bu_name);
                IF v_smr_reason_id IS NULL THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC033');
                END IF;
            END IF;
		 END IF;
	END;

	IF (UPPER(each_rec.claim_type) = 'MACHINE NON SERIALIZED' OR UPPER(each_rec.claim_type) = 'ATTACHMENT NON SERIALIZED' OR
			(UPPER(each_rec.claim_type) = 'PARTS WITH HOST' 
				AND NOT v_serialized AND v_part_installed_on_tktsa))
			AND COMMON_VALIDATION_UTILS.isConfigParamSet('invoiceNumberApplicable', v_bu_name) 
			AND EACH_REC.INVOICE_NUMBER IS NULL THEN
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC034');
	END IF;

	BEGIN
		 IF TO_NUMBER(EACH_REC.HOURS_ON_PARTS) IS NOT NULL  AND (TO_NUMBER(EACH_REC.HOURS_ON_PARTS)<0) 

		 THEN

			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC035');
		 END IF;
	END;





	BEGIN

		 IF UPPER(EACH_REC.CLAIM_TYPE) NOT IN ('PARTS WITHOUT HOST') AND 
		 EACH_REC.LABOUR_HOURS IS NOT NULL  
		 THEN
        IF EACH_REC.REASON_FOR_EXTRA_LABOR_HOURS IS NULL THEN 
        	 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036');
        ELSE 
         select count(1)  into v_id  from add_lbr_egl_service_providers alesp,additional_labor_eligibility ale where 
          alesp.additional_labor_eligibility=ale.id and ale.business_unit_info=v_bu_name and alesp.d_active = 1;
           IF v_id =0 then
              null;               
            ELSE             
                select count(1) into v_id from add_lbr_egl_service_providers alesp,additional_labor_eligibility ale where 
                alesp.SERVICE_PROVIDERS = v_dealer_id and alesp.additional_labor_eligibility=ale.id and ale.business_unit_info=v_bu_name
                and alesp.d_active = 1; 
                IF v_id = 0 then
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_ALH');
                END IF; 
            END IF; 
        END IF;  
		 END IF;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_ALH');

	END;

IF v_product IS NOT NULL THEN     




BEGIN
       IF UPPER(EACH_REC.LABOUR_HOURS)IS NOT NULL THEN 
               IF NOT common_validation_utils.isAllowedCostCategory('LABOR',v_product,v_bu_name) THEN
                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC072');                                
               END IF;
        END IF;

        EXCEPTION 
          WHEN OTHERS THEN
          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC072');
END;




BEGIN
       IF UPPER(EACH_REC.REPLACED_OEM_PARTS)IS NOT NULL THEN 
               IF NOT common_validation_utils.isAllowedCostCategory('OEM_PARTS',v_product,v_bu_name) THEN
                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_RP');                                
              END IF;
        END IF;

    EXCEPTION 
        WHEN OTHERS THEN
        v_error_code := Common_Utils.addErrorMessage(v_error_code, '123');
END;





BEGIN
       IF UPPER(EACH_REC.MISCELLANEOUS_PARTS)IS NOT NULL THEN 
            IF NOT common_validation_utils.isAllowedCostCategory('MISC_PARTS',v_product,'v_bu_name') THEN
                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_MP');                                
              END IF;
       END IF;
END;

END IF;

	IF v_repairdate IS NOT NULL AND v_failuredate IS NOT NULL 
			AND v_repairdate < v_failuredate THEN
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC037');
	END IF;

	BEGIN
        v_fault_code := common_utils.getValidFaultCode(EACH_REC.fault_location);
		 IF v_model IS NOT NULL  AND EACH_REC.fault_location IS NOT NULL AND 
     NOT COMMON_VALIDATION_UTILS.isValidFaultCodeForModelId(v_model, v_fault_code, v_bu_name)
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC038');
		 END IF;
	END;


	IF each_rec.job_code IS NOT NULL THEN
        v_count := Common_Utils.count_delimited_values_new(each_rec.job_code, ',');
        FOR i IN 1 .. v_count LOOP
            v_job_code := common_utils.getValidJobCode(common_utils.get_delimited_value(each_rec.job_code, ',', i));
            IF v_job_code IS NULL THEN
                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC039');
                EXIT;
            ELSIF v_model IS NOT NULL AND
                NOT common_validation_utils.isValidJobCodeForModelId(v_model, v_job_code, v_bu_name)
		    THEN
			    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC039');
                EXIT;
            ELSE
                IF v_job_codes_delimited IS NULL THEN
                    v_job_codes_delimited := '';
                ELSE
                    v_job_codes_delimited := v_job_codes_delimited || ',';
                END IF;
                v_job_codes_delimited := v_job_codes_delimited || v_job_code;
            END IF;

        END LOOP;
        IF each_rec.labour_hours IS NOT NULL AND Common_Utils.count_delimited_values(each_rec.labour_hours, ',') > 0 THEN
            IF Common_Utils.count_delimited_values_new(each_rec.labour_hours, ',') < v_count THEN
                v_count := Common_Utils.count_delimited_values_new(each_rec.labour_hours, ',');
            END IF;
            FOR i IN 1 .. v_count LOOP
                IF common_utils.get_delimited_value(each_rec.labour_hours, ',', i) IS NOT NULL AND 
                        common_utils.get_delimited_value(each_rec.labour_hours, ',', i) != '0' AND 
                        common_utils.get_delimited_value(each_rec.reason_for_extra_labor_hours, v_delimiter, i) IS NULL THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
	END IF;





	BEGIN
		 IF v_model IS NOT NULL  AND EACH_REC.FAULT_FOUND IS NOT NULL THEN
            IF NOT COMMON_VALIDATION_UTILS.isValidFaultFoundForModelId(v_model, EACH_REC.FAULT_FOUND, v_bu_name)
		    THEN
			    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC040');
            ELSE
                v_valid_fault_found := TRUE;
                SELECT ftd.name INTO v_fault_found
                FROM failure_type ft, 
                    i18nfailure_type_definition i18n_ftd,
                    failure_type_definition ftd
                where 
                    ft.definition_id = i18n_ftd.failure_type_definition
                    AND lower(i18n_ftd.name) = lower(ltrim(rtrim(each_rec.fault_found))) 
                    AND ft.for_item_group_id = v_model 
                    AND ft.d_active = 1
                    AND ftd.id = i18n_ftd.failure_type_definition
                    AND ROWNUM = 1;
            END IF;
		 END IF;
	END;


	BEGIN
		 IF v_valid_fault_found  AND EACH_REC.failure_detail IS NOT NULL AND 
     NOT COMMON_VALIDATION_UTILS.isValidRootCauseForModelId(v_model, EACH_REC.FAULT_FOUND, EACH_REC.failure_detail, v_bu_name)
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC042');
		 END IF;
	END;

    BEGIN
		 IF each_rec.technician_id IS NOT NULL AND 
            NOT COMMON_VALIDATION_UTILS.isValidTechnician(each_rec.technician_id, v_dealer, v_bu_name)
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC043');
		 END IF;
	END;


 IF v_error_code IS NULL
	THEN

	   UPDATE STG_DRAFT_CLAIM
	   SET
		  ERROR_STATUS = 'Y',
			ERROR_CODE = NULL,
            business_unit_name = v_bu_name,
            reason_for_smr_claim = v_smr_reason_id,
            competitor_model_id = v_competitor_model_id,
            fault_location = v_fault_code,
            job_code = v_job_codes_delimited,
            fault_found = v_fault_found,
            part_number=  v_item_number,
            repair_date= CAST (each_rec.REPAIR_DATE AS number(8,0)),                      
            failure_date= CAST (each_rec.FAILURE_DATE AS number(8,0)) ,                    
            installation_date=CAST (each_rec.INSTALLATION_DATE AS number(8,0)),
			serial_number_id = v_inv,
			item_number_id = v_item,
			model_id = v_model_id,
			part_id = v_part,
			part_serial_id = v_part_serial

		WHERE
		  ID = EACH_REC.ID;
	ELSE

		UPDATE STG_DRAFT_CLAIM
	   SET
		  ERROR_STATUS = 'N',
		  ERROR_CODE = v_error_code
		WHERE
		  ID = EACH_REC.ID;
	END IF;

    v_loop_count := v_loop_count + 1;

    IF v_loop_count = 10 THEN

      COMMIT;
      v_loop_count := 0; -- Initialize the count size
    END IF;

  END LOOP;

    BEGIN
     FOR EACH_DUP_REC IN DUP_REC
      LOOP
        UPDATE STG_DRAFT_CLAIM
        SET ERROR_STATUS    = 'N',
          ERROR_CODE        = 'Field modification code is duplicate for same Serial Number'
        WHERE serial_number = EACH_DUP_REC.serial_number
        AND campaign_code   = EACH_DUP_REC.campaign_code;
      END LOOP;
    END;

    IF v_loop_count > 0 THEN
        COMMIT;
    END IF;

  BEGIN



    SELECT DISTINCT file_upload_mgt_id 
    INTO v_file_upload_mgt_id
    FROM STG_DRAFT_CLAIM 
    WHERE ROWNUM < 2;


    BEGIN
      SELECT count(*)
      INTO v_success_count
      FROM STG_DRAFT_CLAIM 
      where file_upload_mgt_id = v_file_upload_mgt_id and error_status = 'Y';
    EXCEPTION
    WHEN OTHERS THEN
      v_success_count := 0;
    END;


    BEGIN
      SELECT count(*)
      INTO v_error_count
      FROM STG_DRAFT_CLAIM 
      where file_upload_mgt_id = v_file_upload_mgt_id and error_status = 'N';
    EXCEPTION
    WHEN OTHERS THEN
      v_error_count := 0;
    END;


    SELECT count(*)
    INTO v_count
    FROM STG_DRAFT_CLAIM 
    where file_upload_mgt_id = v_file_upload_mgt_id ;

    UPDATE FILE_UPLOAD_MGT 
    SET 
      SUCCESS_RECORDS= v_success_count, 
      ERROR_RECORDS= v_error_count,
      TOTAL_RECORDS = v_count
    WHERE ID = v_file_upload_mgt_id;

  EXCEPTION
  WHEN OTHERS THEN

    v_error := SUBSTR(SQLERRM, 1, 4000);
    UPDATE FILE_UPLOAD_MGT 
    SET 
      ERROR_MESSAGE = v_error
    WHERE ID = v_file_upload_mgt_id;

  END;
  COMMIT; -- Final Commit for the procedure

END UPLOAD_DRAFT_CLAIM_VALIDATION;
 INFO 09-Aug-12 12:02:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Aug-12 15:06:56 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 09-Aug-12 15:06:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 




UPDATE UPLOAD_MGT SET CONSUME_ROWS_FROM=12 WHERE NAME_TO_DISPLAY='Draft Warranty Claims'

 INFO 09-Aug-12 15:06:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Aug-12 15:06:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

commit

 INFO 09-Aug-12 15:06:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Aug-12 16:33:35 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 09-Aug-12 16:33:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in Policy'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='Dealer Rental'))

 INFO 09-Aug-12 16:33:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Aug-12 16:33:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

commit

 INFO 09-Aug-12 16:33:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Aug-12 18:11:13 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 09-Aug-12 18:11:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





Insert into upload_error (ID,CODE,UPLOAD_FIELD) values (upload_error_seq.nextval,'DC_SN_MCHNE','SERIAL NUMBER')

 INFO 09-Aug-12 18:11:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Aug-12 18:11:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

Insert into upload_error (ID,CODE,UPLOAD_FIELD) values (upload_error_seq.nextval,'DC_SN_ATTCHMNT','SERIAL NUMBER')

 INFO 09-Aug-12 18:11:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Aug-12 18:11:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

Insert into i18nupload_error_text (ID,LOCALE,DESCRIPTION,UPLOAD_ERROR) 
values (I18N_UPLOAD_ERROR_SEQ.nextval,'en_US','Claim type not matching with Machine Serial Number',(SELECT id FROM upload_error WHERE code ='DC_SN_MCHNE'))

 INFO 09-Aug-12 18:11:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Aug-12 18:11:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

Insert into i18nupload_error_text (ID,LOCALE,DESCRIPTION,UPLOAD_ERROR) 
values (I18N_UPLOAD_ERROR_SEQ.nextval,'en_US','Claim type not matching with Attachment Serial Number',(SELECT id FROM upload_error WHERE code ='DC_SN_ATTCHMNT'))

 INFO 09-Aug-12 18:11:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Aug-12 18:11:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

commit

 INFO 09-Aug-12 18:11:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Aug-12 18:11:13 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 09-Aug-12 18:11:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

create or replace
PACKAGE  COMMON_VALIDATION_UTILS AS

 FUNCTION getValidBusinessUnitName(p_business_unit_name VARCHAR2)
 RETURN VARCHAR2;


 FUNCTION isValidBusinessUnitName(p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isUserBelongsToBU(p_business_unit_name VARCHAR2, p_user_login VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidModel(p_model VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidProductCode(p_product_code VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidModelForProduct(p_model VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidModelCodeForProduct(p_model_code VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION getModelForModelCodeAndProduct(p_model_code VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN NUMBER;

 FUNCTION isValidSupplier(p_supplier_name VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidItemNumber(p_item_number VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

  FUNCTION isValidPartSerialNumber(p_serial_number VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN;


 FUNCTION isValidJobCode(p_job_code VARCHAR2, p_model VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidUser(p_user_login VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidDealer(p_dealer_login VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidDealerByNumber(p_dealer_number VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidInventory(p_serial_number VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

FUNCTION isValidInventoryWithConNum (p_container_number VARCHAR2,
	p_business_unit_name VARCHAR2, p_error_code OUT VARCHAR2)
RETURN NUMBER;

FUNCTION isValidInventoryForFieldModWCN(p_container_number VARCHAR2, 
	p_campaign_code VARCHAR2, p_dealer NUMBER, 
	p_business_unit VARCHAR2, p_rep_date DATE, p_error_code OUT VARCHAR2)
RETURN NUMBER;

 FUNCTION isValidFaultCode(p_model VARCHAR2, p_fault_code VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidFaultFound(p_model VARCHAR2, p_fault_found VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidCausedBy(p_model VARCHAR2, p_fault_found VARCHAR2, p_caused_by VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidRootCause(p_model VARCHAR2, p_fault_found VARCHAR2, p_root_cause VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidTechnician(p_technician VARCHAR2, p_dealer VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidDate (p_date VARCHAR2, p_format VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidCurrency (p_currency VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isConfigParamSet (p_config_param VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidAssemblyDefinitionCode (p_code VARCHAR2, p_level NUMBER)
 RETURN BOOLEAN;

 FUNCTION isValidActionName (p_action VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidActionCode (p_action VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION getValidSMRReasonId (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
 RETURN VARCHAR2;

 FUNCTION getValidCompetitorModelId (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
 RETURN VARCHAR2;

 FUNCTION isValidSMRReason (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidFaultCodeForModelId(p_model NUMBER, p_fault_code VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidJobCodeForModelId(p_model NUMBER, p_job_code VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidFaultFoundForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidCausedByForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_caused_by VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidRootCauseForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_root_cause VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isAllowedCostCategory(p_cost_cat_code VARCHAR2,p_product VARCHAR2,p_business_unit_info VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidDelimitedValue(p_value VARCHAR2, p_delimiter VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidReplacedIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidReplacedIRPart(p_serial_number VARCHAR2, p_item_number VARCHAR2, p_business_unit VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidInstalledIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidAlarmCode(p_alarm_code VARCHAR2,p_product VARCHAR2, p_business_unit VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidMiscPart(p_item_number VARCHAR2, p_service_provider NUMBER, p_business_unit VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidCountry(p_country_code VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidState(p_state VARCHAR2, p_country_code VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidCity(p_city VARCHAR2, p_state VARCHAR2, p_country_code VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidZipcode(p_zipcode VARCHAR2, p_city VARCHAR2, p_state VARCHAR2, p_country_code VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidCampaignCode(p_campaign_code VARCHAR2, p_dealer NUMBER, p_business_unit VARCHAR2,p_date DATE,v_service_provider_number VARCHAR2,p_serial_number VARCHAR2)
 RETURN BOOLEAN;

FUNCTION isValidInventoryForFieldMod(p_serial_number VARCHAR2, 
	p_campaign_code VARCHAR2,p_dealer NUMBER,
	p_business_unit VARCHAR2,p_rep_date DATE,p_error_code OUT VARCHAR2)
RETURN NUMBER;

 FUNCTION isClaimTypeAllowed(p_type VARCHAR2, p_business_unit VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION hasDuplicateSerializedPart(p_value_serialNo     VARCHAR2,p_value_partNo     VARCHAR2,p_delimiter VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION getSerialNoPartNo(p_value_serialNo     VARCHAR2,p_value_partNo     VARCHAR2,p_delimiter VARCHAR2,p_index     NUMBER)
 RETURN VARCHAR2;

 FUNCTION getValidCausalPart(p_item_number VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN VARCHAR2;

 FUNCTION getReplacedIRPartNumber(p_item_number VARCHAR2, p_business_unit VARCHAR2)
 RETURN VARCHAR2;

 FUNCTION getInstalledIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
 RETURN VARCHAR2;

FUNCTION getOwnershipForInventory(p_inv NUMBER)
RETURN NUMBER;

FUNCTION getServiceProviderType(p_service_provider NUMBER)
RETURN VARCHAR2;

FUNCTION isAllowedCustomerTypeForSearch(p_cust_type VARCHAR2,p_bu VARCHAR2)
RETURN BOOLEAN;

 FUNCTION isValidSerialNumber(p_serial_number VARCHAR2,
	p_business_unit_name VARCHAR2, p_model VARCHAR2,
	p_dealer_id NUMBER, p_claim_type VARCHAR2, p_error_code OUT VARCHAR2)
RETURN NUMBER;

FUNCTION getValidPartSerialNumber(
	p_serial_number VARCHAR2, 
	p_business_unit_name VARCHAR2)
RETURN NUMBER;

FUNCTION isValidItemForNonSerialized (
	p_item_number VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER;

FUNCTION isValidModelForNonSerialized (
	p_model_name VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER;

FUNCTION isValidItemForPartsClaim(
	p_item_number VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER;

end COMMON_VALIDATION_UTILS;
 INFO 09-Aug-12 18:11:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Aug-12 18:11:15 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 09-Aug-12 18:11:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

create or replace
PACKAGE BODY COMMON_VALIDATION_UTILS AS 

  FUNCTION getValidBusinessUnitName(p_business_unit_name VARCHAR2)
  RETURN VARCHAR2
  IS
  v_business_unit_name VARCHAR2(255) := NULL;
  BEGIN

    SELECT NAME 
    INTO v_business_unit_name
    FROM business_unit
    WHERE 
    lower(name) = lower(p_business_unit_name) AND ROWNUM = 1;
    RETURN v_business_unit_name;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN NULL;
  END getValidBusinessUnitName;


  FUNCTION isValidBusinessUnitName(p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_business_unit_name VARCHAR2(255) := NULL;
  BEGIN

    SELECT NAME 
    INTO v_business_unit_name
    FROM business_unit
    WHERE 
    lower(name) = lower(p_business_unit_name) AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidBusinessUnitName;

  FUNCTION isUserBelongsToBU(p_business_unit_name VARCHAR2, p_user_login VARCHAR2)
  RETURN BOOLEAN
  IS
  v_business_unit_name VARCHAR2(255) := NULL;
  BEGIN
    SELECT bum.bu
    INTO v_business_unit_name
    FROM org_user u, bu_user_mapping bum
    WHERE 
	lower(bum.bu) = lower(p_business_unit_name)
	AND u.login=p_user_login 
	AND u.id=bum.org_user 
	AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isUserBelongsToBU;


  FUNCTION isValidModel(p_model VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_model VARCHAR2(255) := NULL;
  BEGIN

    SELECT NAME 
    INTO v_model
    FROM item_group
    WHERE 
    lower(name) = lower(ltrim(rtrim(p_model))) 
    and lower(business_unit_info) = lower(p_business_unit_name)
    and item_group_type = 'MODEL' and d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidModel;


 FUNCTION isValidProductCode(p_product_code VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_product_code NUMBER := NULL;
  BEGIN

    SELECT id
    INTO v_product_code
    FROM item_group
    WHERE 
    lower(name) = lower(ltrim(rtrim(p_product_code))) 
    and lower(business_unit_info) = lower(p_business_unit_name)
    and item_group_type = 'PRODUCT' and d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidProductCode;


  FUNCTION isValidModelForProduct(p_model VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_model VARCHAR2(255) := NULL;
  BEGIN

    SELECT m.NAME 
    INTO v_model
    FROM item_group m,item_group p1,item_group p2
    WHERE 
    lower(m.name) = lower(ltrim(rtrim(p_model))) 
    and (lower(p1.name) = lower(ltrim(rtrim(p_product))) and p1.item_group_type='PRODUCT'
      or lower(p2.name) = lower(ltrim(rtrim(p_product))) and p1.item_group_type='PRODUCT')
    and lower(m.business_unit_info) = lower(p_business_unit_name)
    and lower(p1.business_unit_info) = lower(p_business_unit_name)
    and lower(p2.business_unit_info) = lower(p_business_unit_name)
    and m.is_part_of=p1.id and p1.d_active = 1
    and p1.is_part_of=p2.id and p2.d_active = 1
    and m.item_group_type = 'MODEL' and m.d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidModelForProduct;


  FUNCTION isValidModelCodeForProduct(p_model_code VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_model VARCHAR2(255) := NULL;
  BEGIN

    SELECT m.NAME 
    INTO v_model
    FROM item_group m,item_group p1,item_group p2
    WHERE 
    lower(m.group_code) = lower(ltrim(rtrim(p_model_code))) 
    and (lower(p1.name) = lower(ltrim(rtrim(p_product))) and p1.item_group_type='PRODUCT'
      or lower(p2.name) = lower(ltrim(rtrim(p_product))) and p2.item_group_type='PRODUCT')
    and lower(m.business_unit_info) = lower(p_business_unit_name)
    and lower(p1.business_unit_info) = lower(p_business_unit_name)
    and lower(p2.business_unit_info) = lower(p_business_unit_name)
    and m.is_part_of=p1.id and p1.d_active = 1
    and p1.is_part_of=p2.id and p2.d_active = 1
    and m.item_group_type = 'MODEL' and m.d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidModelCodeForProduct;

  FUNCTION getModelForModelCodeAndProduct(p_model_code VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN NUMBER
  IS
  v_model NUMBER := NULL;
  v_scheme NUMBER := NULL;
  BEGIN
	SELECT id INTO v_scheme
	FROM item_scheme WHERE UPPER(name)='PROD STRUCT SCHEME'
		AND business_unit_info=p_business_unit_name;

	SELECT A.id INTO v_model
	FROM
	(SELECT IG.group_code,
	  IG.item_group_type,
	  IG.business_unit_info,
	  IG.id
	FROM item_group IG
	  CONNECT BY PRIOR IG.ID = IG.IS_PART_OF
	  START WITH
	  (
		UPPER(IG.NAME)           = UPPER(LTRIM(RTRIM(p_product)))
	  AND IG.BUSINESS_UNIT_INFO = p_business_unit_name
	  AND IG.ITEM_GROUP_TYPE    = 'PRODUCT'
	  AND IG.D_ACTIVE           = 1
	  AND IG.SCHEME             = v_scheme
	  )
	) A
	WHERE A.ITEM_GROUP_TYPE  = 'MODEL'
	AND UPPER(A.group_code)               = UPPER(LTRIM(RTRIM(p_model_code)))
	AND A.BUSINESS_UNIT_INFO = p_business_unit_name
	AND ROWNUM               = 1;

    RETURN v_model;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN NULL;
  END getModelForModelCodeAndProduct;

  FUNCTION isValidItemNumber(p_item_number VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_item_id NUMBER := NULL;
  v_item_number_index NUMBER := -1;
  v_item_number VARCHAR2(255) := NULL;
  BEGIN


    SELECT i.ID 
    INTO v_item_id
    FROM ITEM i, PARTY p 
    WHERE ( UPPER(i.alternate_item_number) = UPPER(ltrim(rtrim(p_item_number)))  OR 
	UPPER(i.item_number) = UPPER(ltrim(rtrim(p_item_number))) )
    AND lower(i.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name)))
    AND i.owned_by = p.ID
    AND p.NAME = common_utils.constant_oem_name and i.d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidItemNumber;



  FUNCTION isValidPartSerialNumber(p_serial_number VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_item_id NUMBER := NULL;  
  BEGIN


    SELECT i.ID 
    INTO v_item_id
    FROM INVENTORY_ITEM i, PARTY p 
    WHERE lower(i.serial_number) = lower(ltrim(rtrim(p_serial_number))) 
    AND lower(i.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name)))
    and i.d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidPartSerialNumber;


  FUNCTION isValidSupplier(p_supplier_name VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_supplier_id NUMBER := NULL;
  BEGIN

    SELECT s.ID 
    INTO v_supplier_id
    FROM SUPPLIER s, bu_org_mapping m
    WHERE UPPER(supplier_number) = UPPER(p_supplier_name)
        AND s.id = m.org AND UPPER(m.bu) = UPPER(p_business_unit_name)
        AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidSupplier;


 FUNCTION isValidJobCode(p_job_code VARCHAR2, p_model VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_job_code VARCHAR2(256) := NULL;
  BEGIN

    select to_char(spd.code)
    INTO v_job_code
    FROM 
      action_node an,
      service_procedure sp,
      service_procedure_definition spd,
      (select id from assembly connect by prior id = is_part_of_assembly start with id in 
          ( select a.id 
            from 
            failure_structure fs,
            failure_structure_assemblies fsa,
            assembly a,
            item_group ig
            where
              a.active = 1 and
              fs.for_item_group = ig.id and
              fs.id = fsa.failure_structure and
              fsa.assemblies = a.id and
              upper(ig.name) = upper(p_model))) adata
    WHERE
      adata.id = an.defined_for and
      an.id = sp.defined_for and
      an.active = 1 and
      sp.definition = spd.id and
      lower(spd.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and
      lower(spd.code) = lower(ltrim(rtrim(p_job_code))) and spd.d_active = 1 AND ROWNUM = 1;

    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidJobCode;


 FUNCTION isValidUser(p_user_login VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_user_login VARCHAR2(256) := NULL;
  BEGIN

    SELECT OU.LOGIN  
    INTO v_user_login
    FROM ORG_USER OU, BU_USER_MAPPING BUM 
    WHERE lower(OU.login) = lower(ltrim(rtrim(p_user_login))) AND 
    OU.ID = BUM.ORG_USER AND 
    lower(bum.bu) = lower(ltrim(rtrim(p_business_unit_name))) AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidUser;


 FUNCTION isValidDealer(p_dealer_login VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_dealer_login VARCHAR2(256) := NULL;
  BEGIN

    SELECT OU.LOGIN  
    INTO v_dealer_login
    FROM ORG_USER OU, DEALERSHIP dealer, BU_USER_MAPPING BUM 
    WHERE lower(OU.login) = lower(ltrim(rtrim(p_dealer_login))) AND 
    OU.ID = BUM.ORG_USER AND dealer.id = OU.belongs_to_organization AND 
    lower(bum.bu) = lower(ltrim(rtrim(p_business_unit_name))) AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidDealer;


 FUNCTION isValidDealerByNumber(p_dealer_number VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_dealer_number VARCHAR2(256) := NULL;
  BEGIN

    SELECT dealer.dealer_number  
    INTO v_dealer_number
    from bu_org_mapping bom, dealership dealer 
    where lower(dealer.dealer_number) = lower(ltrim(rtrim(p_dealer_number))) and dealer.id = bom.org and 
    lower(bom.bu) = lower(ltrim(rtrim(p_business_unit_name))) AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidDealerByNumber;


 FUNCTION isValidInventory (p_serial_number VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_inventory VARCHAR2(256) := NULL;
  BEGIN

    SELECT ID   
    INTO v_inventory
    FROM INVENTORY_ITEM 
    WHERE lower(serial_number) = lower(ltrim(rtrim(p_serial_number))) AND 
    lower(business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and d_active=1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidInventory;


FUNCTION isValidInventoryWithConNum (
	p_container_number VARCHAR2, 
	p_business_unit_name VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
v_inventory NUMBER := NULL;
BEGIN
	p_error_code := NULL;
	SELECT ID INTO v_inventory
	FROM INVENTORY_ITEM 
	WHERE lower(vin_number) = lower(ltrim(rtrim(p_container_number)))
		AND business_unit_info=p_business_unit_name 
		AND d_active=1 AND serialized_part = 0;
	RETURN v_inventory;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN
		p_error_code := 'CN_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'CN_DUP';
		RETURN NULL;
END isValidInventoryWithConNum;

 FUNCTION isValidFaultCode(p_model VARCHAR2, p_fault_code VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_fault_code            VARCHAR2(256) := NULL;
  v_failure_structure     NUMBER := NULL;
  v_complete_fault_code   VARCHAR2(4000) := NULL;
  BEGIN

    SELECT fcd.code 
    INTO v_fault_code
    FROM 
      fault_code_definition fcd,
      fault_code fc,
        (select fault_code from assembly where fault_code is not null connect by prior id = 
            is_part_of_assembly start with id in 
            (select a.id 
            from 
              failure_structure fs,
              failure_structure_assemblies fsa,
              assembly a,
              item_group ig
            where
              a.active = 1 and
              fs.for_item_group = ig.id and
              fs.id = fsa.failure_structure and
              fsa.assemblies = a.id and
              upper(ig.name) = upper(p_model))) adata
    WHERE
      adata.fault_code = fc.id and
      fc.definition = fcd.id and
      lower(fcd.code) = lower(ltrim(rtrim(p_fault_code))) and 
      lower(fcd.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and fcd.d_active=1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidFaultCode;


 FUNCTION isValidFaultFound(p_model VARCHAR2, p_fault_found VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
 IS
  v_fault_found NUMBER := 0;
 BEGIN
    SELECT ft.id 
    INTO v_fault_found
    from FAILURE_TYPE ft, 
    FAILURE_TYPE_DEFINITION ftd, 
    ITEM_GROUP model
    where 
    ft.definition_id = ftd.id and 
    lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) and ft.for_item_group_id = model.id and 
    lower(model.name) = lower(ltrim(rtrim(p_model))) and model.d_active = 1 and ft.d_active = 1 and 
    lower(model.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and 
	lower(model.item_group_type) = 'model' AND ROWNUM = 1;

    RETURN TRUE;
 EXCEPTION
 WHEN OTHERS THEN
    RETURN FALSE;
 END isValidFaultFound;


 FUNCTION isValidCausedBy(p_model VARCHAR2, p_fault_found VARCHAR2, p_caused_by VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_caused_by VARCHAR2(256) := NULL;
  BEGIN
    select fc.id 
    INTO v_caused_by
    from FAILURE_CAUSE fc , FAILURE_CAUSE_DEFINITION fcd , FAILURE_TYPE ft, 
    FAILURE_TYPE_DEFINITION ftd, ITEM_GROUP model
    where fc.definition_id = fcd.id and lower(fcd.name) = lower(ltrim(rtrim(p_caused_by))) and 
    fc.failure_type_id = ft.id and ft.definition_id = ftd.id and 
    lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) and ft.for_item_group_id = model.id and 
    lower(model.name) = lower(ltrim(rtrim(p_model))) and model.d_active = 1 and fc.d_active = 1 and 
    lower(model.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and 
	lower(model.item_group_type) = 'model' AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
 END isValidCausedBy;


 FUNCTION isValidRootCause(p_model VARCHAR2, p_fault_found VARCHAR2, p_root_cause VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_root_cause VARCHAR2(256) := NULL;
  BEGIN
    select frc.id 
    INTO v_root_cause
    from FAILURE_ROOT_CAUSE frc , FAILURE_ROOT_CAUSE_DEFINITION frcd , FAILURE_TYPE ft, 
    FAILURE_TYPE_DEFINITION ftd, ITEM_GROUP model
    where frc.definition_id = frcd.id and lower(frcd.name) = lower(ltrim(rtrim(p_root_cause))) and 
    frc.failure_type_id = ft.id and ft.definition_id = ftd.id and 
    lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) and ft.for_item_group_id = model.id and 
    lower(model.name) = lower(ltrim(rtrim(p_model))) and model.d_active = 1 and frc.d_active = 1 and 
    lower(model.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and 
	lower(model.item_group_type) = 'model' AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidRootCause;


FUNCTION isValidTechnician(p_technician VARCHAR2, p_dealer VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_technician VARCHAR2(256) := NULL;
BEGIN

    SELECT OU.LOGIN  
    INTO v_technician
    FROM ORG_USER TECHNICIAN, BU_USER_MAPPING BUM, USER_ROLES ur, ROLE role, 
        org_user_belongs_to_orgs torgs, service_provider dealer,
        ORG_USER OU, org_user_belongs_to_orgs orgs
    WHERE 
        lower(TECHNICIAN.login) = lower(ltrim(rtrim(p_technician))) 
        AND TECHNICIAN.d_active = 1 
        AND technician.ID = BUM.ORG_USER 
        AND lower(bum.bu) = lower(ltrim(rtrim(p_business_unit_name))) 
        AND ur.org_user = TECHNICIAN.id 
        AND ur.roles = role.id 
        AND lower(role.name) = 'technician' 
        AND technician.id = torgs.org_user
        AND torgs.belongs_to_organizations = dealer.id
        AND lower(OU.login) = lower(ltrim(rtrim(p_dealer))) 
        AND ou.id = orgs.org_user
        AND orgs.belongs_to_organizations = dealer.id 
        AND ROWNUM = 1;
RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidTechnician;


 FUNCTION isValidDate (p_date VARCHAR2, p_format VARCHAR2)
 RETURN BOOLEAN
 IS
  v_date DATE := NULL;
  BEGIN
   SELECT TO_DATE(p_date,p_format)
   INTO   v_date
   FROM   DUAL;
   RETURN TRUE;
  EXCEPTION
  WHEN OTHERS THEN
   RETURN FALSE;
  END isValidDate;


 FUNCTION isValidCurrency (p_currency VARCHAR2)
 RETURN BOOLEAN
 IS
  v_currency VARCHAR2(256) := NULL;
  BEGIN
   SELECT from_currency
   INTO   v_currency
   FROM   CURRENCY_EXCHANGE_RATE
   WHERE upper(from_currency) = upper(ltrim(rtrim(p_currency))) AND ROWNUM = 1;
   RETURN TRUE;
  EXCEPTION
  WHEN OTHERS THEN
   RETURN FALSE;
  END isValidCurrency;


 FUNCTION isConfigParamSet (p_config_param VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
 IS
  v_config_value VARCHAR2(10) := NULL;
  BEGIN
    SELECT cpo.value INTO v_config_value
    FROM config_param cp, config_value cv, config_param_option cpo
    WHERE cp.id=cv.config_param AND cp.type='boolean'
	AND upper(cp.name) = upper(p_config_param) 
	AND cp.d_active=1 AND cv.d_active=1
    AND cv.business_unit_info = p_business_unit_name
	AND cv.config_param_option=cpo.id;
	IF lower(v_config_value) = 'true' THEN
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
  EXCEPTION
  WHEN OTHERS THEN
   RETURN FALSE;
  END isConfigParamSet;


FUNCTION isValidAssemblyDefinitionCode (p_code VARCHAR2, p_level NUMBER)
RETURN BOOLEAN
IS
    v_assembly_id       NUMBER;
BEGIN
    IF p_code = '0000' THEN
        RETURN FALSE;
    END IF;

    SELECT id INTO v_assembly_id
    FROM assembly_definition 
    WHERE lower(code) = lower(p_code) AND assembly_level = p_level
		AND d_active=1;
	RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidAssemblyDefinitionCode;

FUNCTION isValidActionName (p_action VARCHAR2)
RETURN BOOLEAN
IS
    v_id       NUMBER;
BEGIN
    SELECT id INTO v_id FROM action_definition 
    WHERE LOWER(name) = LOWER(p_action) AND ROWNUM=1;
    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidActionName;

FUNCTION isValidActionCode (p_action VARCHAR2)
RETURN BOOLEAN
IS
    v_id       NUMBER;
BEGIN
    SELECT id INTO v_id FROM action_definition 
    WHERE LOWER(code) = LOWER(p_action) AND d_active=1;
    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidActionCode;

FUNCTION getValidSMRReasonId (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
RETURN VARCHAR2
IS
    v_lov_id VARCHAR2(255);
BEGIN
    SELECT l.id INTO v_lov_id
    FROM list_of_values l , i18nlov_text t 
    WHERE 
	l.id=t.list_of_i18n_values 
	AND (t.locale = p_locale OR t.locale='en_US') 
	AND t.description = p_lov
        AND UPPER(l.business_unit_info) = UPPER(p_business_unit_info)
        AND l.type = 'SMRREASON'
        AND l.d_active = 1
        AND l.state='active'
	AND ROWNUM=1;

    RETURN v_lov_id;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END getValidSMRReasonId;

FUNCTION getValidCompetitorModelId (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
RETURN VARCHAR2
IS
    v_lov_id VARCHAR2(255);
BEGIN
    SELECT l.id INTO v_lov_id
    FROM list_of_values l , i18nlov_text t 
    WHERE 
	l.id=t.list_of_i18n_values 
	AND (t.locale = p_locale OR t.locale='en_US') 
	AND UPPER(t.description) = UPPER(p_lov)
        AND UPPER(l.business_unit_info) = UPPER(p_business_unit_info)
        AND l.type = 'CLAIMCOMPETITORMODEL'
        AND l.d_active = 1
        AND l.state='active'
	AND ROWNUM=1;

    RETURN v_lov_id;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END getValidCompetitorModelId;

FUNCTION isValidSMRReason (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
RETURN BOOLEAN
IS
    v_lov_id       NUMBER;
BEGIN

    SELECT l.id INTO v_lov_id
    FROM list_of_values l , i18nlov_text t 
    WHERE 
	l.id=t.list_of_i18n_values 
	AND (t.locale = p_locale OR t.locale='en_US') 
	AND t.description = p_lov
        AND UPPER(l.business_unit_info) = UPPER(p_business_unit_info)
        AND l.type = 'SMRREASON'
        AND l.d_active = 1
        AND l.state='active'
	AND ROWNUM=1;

    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidSMRReason;


FUNCTION isValidFaultCodeForModelId(p_model NUMBER, p_fault_code VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_fault_code            VARCHAR2(256) := NULL;
BEGIN

    SELECT fcd.code 
    INTO v_fault_code
    FROM fault_code_definition fcd, fault_code fc,
        (select fault_code from assembly where fault_code is not null 
            connect by prior id = is_part_of_assembly start with id in 
            (select a.id 
            from failure_structure fs, failure_structure_assemblies fsa, assembly a
            where a.active = 1 and
                fs.for_item_group = p_model and
                fs.id = fsa.failure_structure and
                fsa.assemblies = a.id )
        ) adata
    WHERE
        adata.fault_code = fc.id and
        fc.definition = fcd.id and
        lower(fcd.code) = lower(ltrim(rtrim(p_fault_code))) and 
        lower(fcd.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and 
        fcd.d_active=1 AND ROWNUM = 1;

    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidFaultCodeForModelId;


FUNCTION isValidJobCodeForModelId(p_model NUMBER, p_job_code VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_job_code VARCHAR2(256) := NULL;
BEGIN

    select to_char(spd.code)
    INTO v_job_code
    FROM action_node an,
        service_procedure sp,
        service_procedure_definition spd,
        (select id from assembly connect by prior id = is_part_of_assembly start with id in 
            ( select a.id 
            from 
                failure_structure fs,
                failure_structure_assemblies fsa,
                assembly a
            where
                a.active = 1 and
                fs.for_item_group = p_model and
                fs.id = fsa.failure_structure and
                fsa.assemblies = a.id)
        ) adata
    WHERE
        adata.id = an.defined_for and
        an.id = sp.defined_for and
        an.active = 1 and
        sp.definition = spd.id and
        lower(spd.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and
        lower(spd.code) = lower(ltrim(rtrim(p_job_code))) and spd.d_active = 1 AND ROWNUM = 1;

    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidJobCodeForModelId;


FUNCTION isValidFaultFoundForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_fault_found NUMBER := 0;
BEGIN
    SELECT ft.id 
    INTO v_fault_found
    from FAILURE_TYPE ft, 
        I18NFAILURE_TYPE_DEFINITION ftd
    where 
        ft.definition_id = ftd.failure_type_definition
        AND lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) 
        AND ft.for_item_group_id = p_model 
        AND ft.d_active = 1
        AND ROWNUM = 1;

    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidFaultFoundForModelId;


FUNCTION isValidCausedByForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_caused_by VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_caused_by VARCHAR2(256) := NULL;
BEGIN
    select fc.id 
    INTO v_caused_by
    from FAILURE_CAUSE fc , FAILURE_CAUSE_DEFINITION fcd , 
        FAILURE_TYPE ft, FAILURE_TYPE_DEFINITION ftd
    where fc.definition_id = fcd.id 
        and lower(fcd.name) = lower(ltrim(rtrim(p_caused_by))) 
        and fc.failure_type_id = ft.id and ft.definition_id = ftd.id 
        and lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) 
        and ft.for_item_group_id = p_model 
        and fc.d_active = 1
        AND ROWNUM = 1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidCausedByForModelId;

FUNCTION isValidRootCauseForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_root_cause VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_root_cause VARCHAR2(256) := NULL;
BEGIN
    select frc.id 
    INTO v_root_cause
    from FAILURE_ROOT_CAUSE frc , FAILURE_ROOT_CAUSE_DEFINITION frcd ,
        FAILURE_TYPE ft, FAILURE_TYPE_DEFINITION ftd
    where frc.definition_id = frcd.id 
        and lower(frcd.name) = lower(ltrim(rtrim(p_root_cause))) 
        and frc.failure_type_id = ft.id 
        and ft.definition_id = ftd.id 
        and lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) 
        and ft.for_item_group_id = p_model 
        and frc.d_active = 1 
        and ROWNUM = 1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidRootCauseForModelId;


FUNCTION isValidDelimitedValue(p_value VARCHAR2, p_delimiter VARCHAR2)
RETURN BOOLEAN
IS
  v_index         NUMBER := 1;
  v_cur_idx       NUMBER := 1;
  v_delim_length  NUMBER;
  v_value_length  NUMBER;
BEGIN
  v_delim_length := LENGTH(p_delimiter);
  v_value_length := LENGTH(p_value);

  IF v_value_length <= v_delim_length THEN
    RETURN TRUE;
  END IF;

  WHILE v_index != 0 AND v_cur_idx <= v_value_length LOOP
    v_index := INSTR(p_value, p_delimiter, v_cur_idx);
    IF v_index = v_cur_idx THEN
      RETURN FALSE;
    ELSIF v_index = v_value_length - v_delim_length + 1 THEN
      RETURN FALSE;
    ELSIF v_index > v_cur_idx THEN
      v_cur_idx := v_index + v_delim_length;
    END IF;
  END LOOP;

  RETURN TRUE;
END isValidDelimitedValue;

FUNCTION isValidReplacedIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN
    SELECT i.id INTO v_id
    FROM item i, item_group ig,
        config_param p,config_value v,config_param_option o
    WHERE p.name='replacedItemsOnClaimConfiguration' AND
        v.config_param=p.id AND v.config_param_option=o.id AND
        UPPER(ig.name)=UPPER(o.value) AND
        i.model=ig.id AND 
        v.business_unit_info=p_business_unit AND
        i.business_unit_info=p_business_unit AND
        p.d_active=1 AND i.d_active=1 AND
        i.owned_by in (SELECT org.id FROM party pty,organization org 
            WHERE pty.id=org.id AND pty.name='OEM') AND
        (i.item_number=p_item_number OR i.alternate_item_number=p_item_number)
        AND ROWNUM=1;

    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidReplacedIRPart;

FUNCTION isValidReplacedIRPart(p_serial_number VARCHAR2, p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN
    SELECT i.id INTO v_id
    FROM item i, item_group ig,inventory_item ii,
        config_param p,config_value v,config_param_option o
    WHERE p.name='replacedItemsOnClaimConfiguration' AND
        v.config_param=p.id AND v.config_param_option=o.id AND
        UPPER(ig.name)=UPPER(o.value) AND
        i.model=ig.id AND 
        ii.serial_number=p_serial_number AND
        ii.of_type=i.id AND
        v.business_unit_info=p_business_unit AND
        i.business_unit_info=p_business_unit AND
        p.d_active=1 AND i.d_active=1 AND
        i.owned_by in (SELECT org.id FROM party pty,organization org 
            WHERE pty.id=org.id AND pty.name='OEM') AND
        (i.item_number=p_item_number OR i.alternate_item_number=p_item_number)
        AND ROWNUM=1;

    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidReplacedIRPart;

FUNCTION isValidInstalledIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
Begin
    SELECT i.id INTO v_id
      FROM item i, item_group ig, item_group pg 
      WHERE
        I.Business_Unit_Info = P_Business_Unit And I.D_Active = 1 
        AND (i.item_number =p_item_number or i.alternate_item_number =p_item_number) 
        AND i.owned_by = 1 AND i.model = ig.ID 
        AND i.service_part = 1  AND (UPPER(pg.name) in ('PART'))  
        AND ig.tree_id = pg.tree_id  
        AND ig.lft >= pg.lft  
        And Ig.Rgt <= Pg.Rgt  
        AND rownum =1; 


    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidInstalledIRPart;

FUNCTION isValidAlarmCode(p_alarm_code VARCHAR2,p_product VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN       
      select COUNT(1) into  v_id from item_groups_alarm_code where alarm_code in (select id from alarm_code where  code = p_alarm_code);
      IF v_id=0 then
          RETURN TRUE;
      ELSE    
        SELECT COUNT(1) into v_id FROM DUAL WHERE p_product IN (
        select ITEM_GROUP from item_groups_alarm_code where alarm_code in (select id from alarm_code where  code = p_alarm_code));

         IF v_id >0 then     
          RETURN TRUE;
          else
            RETURN FALSE;
         END IF;
       END IF;   
    EXCEPTION 
        WHEN OTHERS THEN
        RETURN FALSE;
END isValidAlarmCode;

FUNCTION isAllowedCostCategory(p_cost_cat_code VARCHAR2,p_product VARCHAR2,p_business_unit_info VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN
    select COUNT(1) into  v_id from COSTCAT_APPL_PRODUCTS cp, COST_CATEGORY c,item_group g where cp.cost_category = c.id and c.code = p_cost_cat_code
      and g.id =cp.item_group  and g.business_unit_info = p_business_unit_info;
      IF v_id=0 then
          RETURN TRUE;
      ELSE    
        SELECT COUNT(1) into v_id from COSTCAT_APPL_PRODUCTS cp, COST_CATEGORY c where cp.cost_category = c.id 
        and c.code = p_cost_cat_code and cp.item_group = p_product;
         IF v_id >0 then
            RETURN TRUE;
         else
            RETURN FALSE;
         END IF;
       END IF;
    EXCEPTION 
        WHEN OTHERS THEN
        RETURN FALSE;
END isAllowedCostCategory;


FUNCTION isValidMiscPart(p_item_number VARCHAR2, p_service_provider NUMBER, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN
   select
        distinct miscellane6_.id INTO v_id
    from
        misc_item_criteria miscellane0_ 
    inner join
        misc_item_config itemconfig1_ 
            on miscellane0_.id=itemconfig1_.for_criteria 
    inner join
        misc_item miscellane6_ 
            on itemconfig1_.miscellaneous_item=miscellane6_.id 
    left outer join
        dealer_group dealergrou2_ 
            on miscellane0_.dealer_group=dealergrou2_.id cross 
    join
        dealer_group dealergrou3_ 
    inner join
        dealers_in_group includedde4_ 
            on dealergrou3_.id=includedde4_.dealer_group 
    inner join
        service_provider servicepro5_ 
            on includedde4_.dealer=servicepro5_.id 
    inner join
        organization servicepro5_1_ 
            on servicepro5_.id=servicepro5_1_.id 
    inner join
        party servicepro5_2_ 
            on servicepro5_.id=servicepro5_2_.id cross 
    join
        misc_item miscellane7_ 
    where
        miscellane0_.business_unit_info in (
            p_business_unit
        ) 
        and miscellane0_.d_active = 1 
        and dealergrou3_.business_unit_info in (
           p_business_unit
        ) 
        and dealergrou3_.d_active = 1 
        and itemconfig1_.miscellaneous_item=miscellane7_.id 
        and (
            miscellane0_.service_provider is null 
            or miscellane0_.service_provider=p_service_provider
        ) 
        and (
            dealergrou2_.id is null 
            or dealergrou2_.tree_id=dealergrou3_.tree_id 
            and dealergrou2_.lft<=dealergrou3_.lft 
            and dealergrou3_.rgt<=dealergrou2_.rgt 
            and p_service_provider=servicepro5_.id
        ) 
        and (
            upper(miscellane7_.part_number) =upper(p_item_number)
        ) 
        and miscellane0_.active=1 ;
    RETURN TRUE;
EXCEPTION 
WHEN OTHERS THEN
BEGIN 
   SELECT i.id INTO v_id
    FROM misc_item_criteria cr, misc_item_config cfg, misc_item i
    WHERE cr.active=1 AND cr.service_provider=p_service_provider AND
        cfg.for_criteria=cr.id AND cfg.active=1 AND
        cfg.miscellaneous_item=i.id AND
        i.part_number=p_item_number AND
        i.business_unit_info=p_business_unit AND ROWNUM=1;
           RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN

    BEGIN 
        SELECT i.id INTO v_id
        FROM dealers_in_group dig,dealer_group grp,dealer_scheme_purposes sp, 
            purpose pp,misc_item_criteria cr, misc_item_config cfg, misc_item i
        WHERE 
            dig.dealer=p_service_provider AND
            dig.dealer_group = grp.id AND
            grp.scheme = sp.dealer_scheme AND
            sp.purposes = pp.id AND
            pp.name='Dealer Rates' AND
            cr.dealer_group = grp.id AND
            cr.active=1 and cfg.active=1 AND
            cfg.for_criteria=cr.id AND
            cfg.miscellaneous_item=i.id AND 
            i.part_number=p_item_number AND 
            i.business_unit_info=p_business_unit AND rownum=1;
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN FALSE;
     END;
     END;
END isValidMiscPart;


FUNCTION isValidCountry(p_country_code VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
BEGIN
    SELECT id INTO v_id
    FROM country WHERE UPPER(code) = UPPER(p_country_code);
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidCountry;

FUNCTION isValidState(p_state VARCHAR2, p_country_code VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
BEGIN
    SELECT id INTO v_id
    FROM msa 
    WHERE UPPER(country) = UPPER(p_country_code) 
        AND UPPER(st) = UPPER(p_state) AND ROWNUM=1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidState;

FUNCTION isValidCity(p_city VARCHAR2, p_state VARCHAR2, p_country_code VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
BEGIN
    SELECT id INTO v_id
    FROM msa 
    WHERE UPPER(country) = UPPER(p_country_code) 
        AND UPPER(st) = UPPER(p_state)
        AND UPPER(city) = UPPER(p_city) AND ROWNUM=1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidCity;

FUNCTION isValidZipcode(p_zipcode VARCHAR2, p_city VARCHAR2, p_state VARCHAR2, p_country_code VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
BEGIN
    SELECT id INTO v_id
    FROM msa 
    WHERE UPPER(country) = UPPER(p_country_code) 
        AND UPPER(st) = UPPER(p_state)
        AND UPPER(city) = UPPER(p_city)
        AND UPPER(zip2) = UPPER(p_zipcode) AND ROWNUM=1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidZipcode;

FUNCTION isValidCampaignCode(p_campaign_code VARCHAR2, p_dealer NUMBER, p_business_unit VARCHAR2,p_date DATE,v_service_provider_number VARCHAR2,p_serial_number VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;     
BEGIN

    SELECT c.id INTO v_id 
    FROM campaign_notification n, campaign c
    WHERE UPPER(c.business_unit_info) = UPPER(p_business_unit) 
        AND n.campaign = c.id 
        AND n.dealership = p_dealer
        AND n.notification_status = 'PENDING'
        AND p_date >= c.from_date AND p_date <= c.till_date
        AND UPPER(c.code) = UPPER(p_campaign_code)
        AND n.d_active=1 
        AND ROWNUM = 1;

    RETURN TRUE;
EXCEPTION  WHEN others THEN 
   BEGIN    
    select   distinct inventoryi0_.id as id86_ into v_id

        from
            inventory_item inventoryi0_ cross 
        join
            campaign_notification campaignno1_ cross 
        join
            service_provider servicepro2_ 
        inner join
            organization servicepro2_1_ 
                on servicepro2_.id=servicepro2_1_.id 
        inner join
            party servicepro2_2_ 
                on servicepro2_.id=servicepro2_2_.id cross 
        join
            campaign campaign3_ 
        where
            inventoryi0_.business_unit_info in (p_business_unit) 
            and inventoryi0_.d_active = 1 
            and campaignno1_.d_active = 1 
            and servicepro2_2_.d_active = 1 
            and campaignno1_.campaign=campaign3_.id 
            and campaignno1_.item=inventoryi0_.id 
            and campaignno1_.dealership=servicepro2_.id 
            and (
                servicepro2_.service_provider_number=p_dealer
                and inventoryi0_.type='STOCK' 
                or inventoryi0_.type='RETAIL'
            ) 
            and (
                campaignno1_.claim is null
            ) 
            and campaignno1_.notification_status='PENDING' 
            and campaign3_.from_date<=sysdate 
            and campaign3_.code=p_campaign_code
            and (
                upper(inventoryi0_.serial_number)=p_serial_number
            ) 
            and inventoryi0_.serialized_part=0        
          AND ROWNUM = 1;
    RETURN TRUE; 
EXCEPTION
    WHEN others THEN    
        RETURN FALSE;  
 END;
END isValidCampaignCode;

FUNCTION isValidInventoryForFieldMod(
	p_serial_number VARCHAR2, 
	p_campaign_code VARCHAR2, 
	p_dealer NUMBER, 
	p_business_unit VARCHAR2,
	p_rep_date DATE,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_id NUMBER;
	v_date DATE;
BEGIN
	p_error_code := NULL;
	v_date := p_rep_date;
	IF v_date IS NULL THEN
		v_date := sysdate;
	END IF;
    SELECT i.id INTO v_id 
    FROM campaign_notification n,inventory_item i, campaign c
    WHERE UPPER(i.business_unit_info) = UPPER(p_business_unit) 
        AND n.item = i.id
        AND n.campaign = c.id 
        AND (n.dealership=p_dealer AND i.type='STOCK'
			OR i.type='RETAIL')
        AND n.notification_status = 'PENDING'
        AND v_date >= c.from_date and v_date <= c.till_date
        AND UPPER(i.serial_number) = UPPER(p_serial_number)
        AND UPPER(c.code) = UPPER(p_campaign_code)
		AND i.serialized_part=0
		AND i.d_active=1 AND c.d_active=1 and n.d_active=1;

    RETURN v_id;  
EXCEPTION
    WHEN NO_DATA_FOUND THEN
		p_error_code := 'SN_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'SN_DUP';
		RETURN NULL;
END isValidInventoryForFieldMod;

FUNCTION isValidInventoryForFieldModWCN(
	p_container_number VARCHAR2, 
	p_campaign_code VARCHAR2, 
	p_dealer NUMBER, 
	p_business_unit VARCHAR2,
	p_rep_date DATE,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_id    NUMBER;
	v_date DATE;
BEGIN
	p_error_code := NULL;
	v_date := p_rep_date;
	IF v_date IS NULL THEN
		v_date := sysdate;
	END IF;
    SELECT i.id INTO v_id 
    FROM campaign_notification n,inventory_item i, campaign c
    WHERE i.business_unit_info=p_business_unit
        AND n.item = i.id
        AND n.campaign = c.id 
        AND (n.dealership=p_dealer AND i.type='STOCK'
			OR i.type='RETAIL')
        AND n.notification_status = 'PENDING'
        AND v_date >= c.from_date and v_date <= c.till_date
        AND UPPER(i.vin_number) = UPPER(p_container_number)
        AND UPPER(c.code) = UPPER(p_campaign_code)
        AND i.serialized_part=0
		AND i.d_active=1 AND c.d_active=1 and n.d_active=1;

    RETURN v_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
		p_error_code := 'CN_INV';
        RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'CN_DUP';
		RETURN NULL;
END isValidInventoryForFieldModWCN;

FUNCTION isClaimTypeAllowed(p_type VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
    v_type  VARCHAR2(255);
BEGIN

    IF UPPER(p_type) IN ('MACHINE SERIALIZED','MACHINE NON SERIALIZED') THEN
        v_type := 'Machine';
    ELSIF UPPER(p_type) IN ('ATTACHMENT SERIALIZED','ATTACHMENT NON SERIALIZED') THEN
        v_type := 'Attachment';    
    ELSIF UPPER(p_type) IN ('PARTS WITH HOST','PARTS WITHOUT HOST') THEN
        v_type := 'Parts';
    ELSE
        v_type := 'Campaign';
    END IF;

    SELECT o.id INTO v_id
    FROM config_param p,config_value v,config_param_option o
    WHERE p.d_active=1 AND p.id=v.config_param 
        AND v.d_active=1 AND v.config_param_option=o.id
        AND p.name='claimType'
        AND o.value=v_type
        AND UPPER(v.business_unit_info)=UPPER(p_business_unit)
        AND ROWNUM = 1;

    IF UPPER(p_type) IN ('MACHINE SERIALIZED','ATTACHMENT SERIALIZED','PARTS WITH HOST','FIELDMODIFICATION') THEN
        RETURN TRUE;
    ELSIF UPPER(p_type) IN ('MACHINE NON SERIALIZED','ATTACHMENT NON SERIALIZED','PARTS WITHOUT HOST') THEN
        IF UPPER(p_type) in ('MACHINE NON SERIALIZED','ATTACHMENT NON SERIALIZED') THEN
            v_type := 'nonSerializedClaimAllowed';
        ELSE
            v_type := 'partsClaimWithoutHostAllowed';
        END IF;

        SELECT o.id INTO v_id
        FROM config_param p,config_value v,config_param_option o
        WHERE p.d_active=1 AND p.id=v.config_param 
            AND v.d_active=1 AND v.config_param_option=o.id
            AND p.name=v_type
            AND o.value='true'
            AND UPPER(v.business_unit_info)=UPPER(p_business_unit)
            AND ROWNUM = 1;

        RETURN TRUE;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isClaimTypeAllowed;

FUNCTION hasDuplicateSerializedPart
  (
    p_value_serialNo     VARCHAR2,
    p_value_partNo     VARCHAR2,
    p_delimiter VARCHAR2)
  RETURN BOOLEAN
IS
       v_serial_count                NUMBER         := 0;
       v_part_count                NUMBER         := 0;
       p_serialized_part     VARCHAR2(4000) := NULL;
       v_count                NUMBER         := 0;
BEGIN
  v_serial_count := Common_Utils.count_delimited_values(p_value_serialNo, p_delimiter);
  v_part_count := Common_Utils.count_delimited_values(p_value_partNo, p_delimiter);
   FOR i IN 1 .. v_serial_count LOOP
      p_serialized_part := getSerialNoPartNo( p_value_serialNo,p_value_partNo,p_delimiter,i);

            v_count := 0;
            FOR j IN 1 .. v_serial_count LOOP  

               IF upper(p_serialized_part)= upper(getSerialNoPartNo( p_value_serialNo,p_value_partNo,p_delimiter,j)) THEN                              
                  v_count := v_count+1;                  
                  IF v_count > 1 THEN
                    RETURN TRUE; 
                  END IF;                

               END IF;               
            END LOOP;
    END LOOP;
  RETURN FALSE;
END hasDuplicateSerializedPart;



FUNCTION getSerialNoPartNo
  (
    p_value_serialNo     VARCHAR2,
    p_value_partNo     VARCHAR2,
    p_delimiter VARCHAR2,
    p_index     NUMBER)
  RETURN VARCHAR2
IS
   p_serial_no     VARCHAR2(4000) := NULL;
   p_part_no VARCHAR2(4000) := NULL;
BEGIN
  p_serial_no := common_utils.get_delimited_value(p_value_serialNo, p_delimiter, p_index); 
  p_part_no := common_utils.get_delimited_value(p_value_partNo, p_delimiter, p_index);   
  RETURN CONCAT(p_serial_no, p_part_no);
END getSerialNoPartNo;

FUNCTION getValidCausalPart(p_item_number VARCHAR2, p_business_unit_name VARCHAR2)
RETURN VARCHAR2
IS
    v_item_id NUMBER := NULL;
    v_item_number_index NUMBER := -1;
    v_item_number VARCHAR2(255) := NULL;
BEGIN
SELECT i.item_number 
    INTO v_item_number
    FROM ITEM i, PARTY p, item_group ig, item_group pg
    WHERE ( UPPER(i.alternate_item_number) = UPPER(ltrim(rtrim(p_item_number)))  OR 
    UPPER(i.item_number) = UPPER(ltrim(rtrim(p_item_number))) )
    AND (i.business_unit_info) = (ltrim(rtrim(p_business_unit_name)))
    AND i.owned_by = p.ID
    AND p.NAME = common_utils.constant_oem_name and i.d_active = 1 
    AND i.model=ig.id 
    AND UPPER(pg.name) in (SELECT UPPER(co.value)
        FROM config_param cp, config_value cv, config_param_option co
        WHERE cp.name='causalItemsOnClaimConfiguration' 
		AND cp.id=cv.config_param
            AND cv.d_active=1
			AND cv.config_param_option=co.id
            AND (cv.business_unit_info) = (ltrim(rtrim(p_business_unit_name))))
    AND ig.tree_id=pg.tree_id
    AND ig.lft >= pg.lft
    AND ig.rgt <= pg.rgt 
    AND rownum  < 2; 
    RETURN v_item_number;
EXCEPTION 
WHEN OTHERS THEN
    RETURN NULL;
END getValidCausalPart;

FUNCTION getReplacedIRPartNumber(p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN VARCHAR2
IS
  v_item_number         VARCHAR2(255) := NULL;
BEGIN
    SELECT i.item_number
    INTO v_item_number
    FROM item i,
      item_group ig,
      item_group pg,
      config_param p,
      config_value v,
      config_param_option o
    WHERE p.name             ='replacedItemsOnClaimConfiguration'
    AND v.config_param       =p.id
    AND v.config_param_option=o.id
    AND UPPER(ig.name)       =UPPER(o.value)
    AND i.model              =pg.id
    AND v.business_unit_info = p_business_unit
    AND i.business_unit_info =p_business_unit
    AND p.d_active           =1
    AND i.d_active           =1
    AND pg.tree_id           = ig.tree_id
    AND pg.lft              >= ig.lft
    AND pg.rgt              <= ig.rgt
    AND i.owned_by          IN
      (SELECT org.id
      FROM party pty,
        organization org
      WHERE pty.id=org.id
      AND pty.name='OEM'
      )
    AND (i.item_number        =p_item_number
    OR i.alternate_item_number=p_item_number)
    AND rownum                < 2;      
    RETURN v_item_number;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN NULL;
END getReplacedIRPartNumber;

FUNCTION getInstalledIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN VARCHAR2
IS
  v_item_number         VARCHAR2(255) := NULL;
Begin
    SELECT i.item_number INTO v_item_number
      FROM item i, item_group ig, item_group pg 
      WHERE
        I.Business_Unit_Info = P_Business_Unit And I.D_Active = 1 
        AND (i.item_number =p_item_number or i.alternate_item_number =p_item_number) 
        AND i.owned_by = 1 AND i.model = ig.ID 
        AND i.service_part = 1  
        AND (UPPER(pg.name) in (SELECT t3.value 
FROM config_param t1 ,
  config_value t2 ,
  config_param_option t3
WHERE t1.name              = 'replacedItemsOnClaimConfiguration'
AND t2.config_param        = t1.id
AND t2.config_param_option = t3.id
AND t2.d_active            = 1
AND t2.active              = 1
AND t2.business_unit_info  = P_Business_Unit ))  
        AND ig.tree_id = pg.tree_id  
        AND ig.lft >= pg.lft  
        And Ig.Rgt <= Pg.Rgt 
        AND rownum  <2;        
    RETURN v_item_number;

EXCEPTION 
    WHEN OTHERS THEN
        RETURN NULL;
END getInstalledIRPart;

FUNCTION getOwnershipForInventory(p_inv NUMBER)
RETURN NUMBER
IS
	v_owner NUMBER;
BEGIN
	SELECT it.owner_ship INTO v_owner
	FROM inventory_transaction it
	WHERE d_active=1 AND transacted_item=p_inv
		AND transaction_order=(
			SELECT MAX(transaction_order) FROM inventory_transaction t 
			WHERE t.transacted_item=p_inv AND t.d_active=1);

	RETURN v_owner;
EXCEPTION
	WHEN OTHERS THEN
		RETURN NULL;
END getOwnershipForInventory;

FUNCTION getServiceProviderType(p_service_provider NUMBER)
RETURN VARCHAR2
IS
	v_cust_type VARCHAR2(20);
BEGIN
	SELECT CASE WHEN d.id IS NOT NULL THEN 'Dealer'
		WHEN dc.id IS NOT NULL THEN 'DirectCustomer'
		WHEN ic.id IS NOT NULL THEN 'InterCompany'
		WHEN na.id IS NOT NULL THEN 'NationalAccount'
		WHEN oem.id IS NOT NULL THEN 'OEM' END
	INTO v_cust_type
	FROM party sp
	LEFT OUTER JOIN dealership d ON d.id=sp.id
	LEFT OUTER JOIN direct_customer dc ON dc.id=sp.id
	LEFT OUTER JOIN inter_company ic ON ic.id=sp.id
	LEFT OUTER JOIN national_account na ON na.id=sp.id
	LEFT OUTER JOIN original_equip_manufacturer oem ON oem.id=sp.id
	WHERE sp.id=p_service_provider AND sp.d_active=1;

	RETURN v_cust_type;
EXCEPTION
	WHEN OTHERS THEN
		RETURN NULL;
END getServiceProviderType;

FUNCTION isAllowedCustomerTypeForSearch(
	p_cust_type VARCHAR2,
	p_bu VARCHAR2)
RETURN BOOLEAN
IS
	v_count NUMBER;
BEGIN
	SELECT COUNT(cp.id) INTO v_count
	FROM config_param cp, config_value cv, config_param_option po
	WHERE cp.name='wntyConfigCustomerTypesAllowedinSearchResult'
		AND cv.config_param=cp.id
		AND cv.business_unit_info=p_bu and cv.d_active=1
		AND po.id=cv.config_param_option
		AND UPPER(po.value)=UPPER(p_cust_type);
	IF v_count > 0 THEN
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
END isAllowedCustomerTypeForSearch;

FUNCTION isValidSerialNumber (
	p_serial_number VARCHAR2, 
	p_business_unit_name VARCHAR2,
	p_model VARCHAR2,
	p_dealer_id NUMBER,
    p_claim_type VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_inventory NUMBER := NULL;
	v_type VARCHAR2(10);
	v_owner NUMBER;
  v_item_type VARCHAR2(10);
	v_cust_type VARCHAR2(20);
BEGIN
p_error_code := NULL;
BEGIN
	SELECT inv.ID,inv.type,i.item_type INTO v_inventory, v_type,v_item_type
	FROM inventory_item inv, item i
	WHERE lower(inv.serial_number) = lower(p_serial_number)
		AND inv.business_unit_info = p_business_unit_name
    AND i.business_unit_info = p_business_unit_name
    AND i.d_active = 1 AND inv.of_type = i.id
		AND inv.d_active=1 AND inv.serialized_part = 0;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN
		p_error_code:='SN_INV';
	WHEN TOO_MANY_ROWS THEN
		IF p_model IS NULL THEN
			p_error_code:='SN_DUP_M_EMP';
		ELSE
		BEGIN
			SELECT inv.id,inv.type,i.item_type INTO v_inventory,v_type,v_item_type 
			FROM inventory_item inv, item i, item_group m
			WHERE LOWER(inv.serial_number) = LOWER(p_serial_number)
			AND inv.business_unit_info = p_business_unit_name
			AND inv.d_active=1 AND inv.serialized_part = 0
			AND inv.of_type = i.id AND i.model = m.id 
			AND m.item_group_type = 'MODEL'
			AND LOWER(m.name) = LOWER(p_model)
			AND i.d_active = 1 AND m.d_active = 1;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				p_error_code:='SN_DUP_M_INV';
			WHEN TOO_MANY_ROWS THEN
				p_error_code:='SN_M_DUP';
		END;
		END IF;
END;
IF v_type = 'STOCK' THEN
	v_owner := getOwnershipForInventory(v_inventory);
	IF v_owner != p_dealer_id THEN
		v_cust_type := getServiceProviderType(v_owner);
		IF NOT isAllowedCustomerTypeForSearch(v_cust_type, p_business_unit_name) THEN
			p_error_code:='SN_CUST_INV';
		END IF;
	END IF;
END IF;
IF (upper(v_item_type) = 'MACHINE' AND upper(p_claim_type) NOT IN ('MACHINE SERIALIZED','MACHINE NON SERIALIZED')) THEN
	p_error_code:='SN_MCHNE';
ELSIF (upper(v_item_type) = 'ATTACHMENT' AND upper(p_claim_type) NOT IN ('ATTACHMENT SERIALIZED','ATTACHMENT NON SERIALIZED')) THEN
	p_error_code:='SN_ATTCHMNT';
END IF;
RETURN v_inventory;
END isValidSerialNumber;

FUNCTION getValidPartSerialNumber(
	p_serial_number VARCHAR2, 
	p_business_unit_name VARCHAR2)
RETURN NUMBER
IS
	v_item_id NUMBER := NULL;  
BEGIN
	SELECT i.ID INTO v_item_id
	FROM INVENTORY_ITEM i
	WHERE lower(i.serial_number) = lower(p_serial_number)
	AND i.business_unit_info = p_business_unit_name
	AND i.d_active = 1 AND i.serialized_part=1
	AND i.source='MAJORCOMPREGISTRATION';
	RETURN v_item_id;
EXCEPTION 
	WHEN OTHERS THEN
		RETURN NULL;
END getValidPartSerialNumber;

FUNCTION isValidItemForNonSerialized (
	p_item_number VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_item NUMBER;
BEGIN
	p_error_code := NULL;
	SELECT i.id INTO v_item
	FROM item i
	WHERE (UPPER(i.item_number)=UPPER(p_item_number)
			OR(UPPER(i.item_number)!=UPPER(p_item_number)
				AND UPPER(i.alternate_item_number)=UPPER(p_item_number)))
		AND i.d_active=1 AND i.business_unit_info=p_bu
		AND i.item_type in ('MACHINE', 'ATTACHMENT') AND i.owned_by=1;
	RETURN v_item;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		p_error_code := 'IT_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'IT_DUP';
		RETURN NULL;
END isValidItemForNonSerialized;

FUNCTION isValidModelForNonSerialized (
	p_model_name VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_model NUMBER;
BEGIN
	p_error_code := NULL;
	SELECT m.id INTO v_model
	FROM item_group m,item_group p
	WHERE m.lft > p.lft AND m.rgt <= p.rgt
		AND UPPER(m.name)=UPPER(p_model_name)
		AND m.item_group_type='MODEL'
		AND p.item_group_type='PRODUCT TYPE'
		AND UPPER(p.name) in ('MACHINE', 'ATTACHMENT') 
		AND m.d_active=1 AND p.d_active=1
		AND m.business_unit_info=p_bu
		AND p.business_unit_info=p_bu;
	RETURN v_model;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN
		p_error_code := 'M_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'M_DUP';
		RETURN NULL;
END isValidModelForNonSerialized;

FUNCTION isValidItemForPartsClaim(
	p_item_number VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_item NUMBER;
BEGIN
	p_error_code := NULL;
	SELECT i.id INTO v_item
	FROM item i, item_group ig, item_group pg,
	config_param cp, config_value cv, config_param_option po
	WHERE (UPPER(i.item_number)=UPPER(p_item_number)
			OR(UPPER(i.item_number)!=UPPER(p_item_number)
				AND UPPER(i.alternate_item_number)=UPPER(p_item_number)))
		AND i.d_active=1 AND i.business_unit_info=p_bu
		AND i.model=ig.id AND i.owned_by=1
		AND ig.tree_id=pg.tree_id 
		AND ig.lft>=pg.lft AND ig.rgt<=pg.rgt
		AND UPPER(pg.name)=UPPER(po.value)
		AND po.id=cv.config_param_option
		AND cv.business_unit_info=p_bu and cv.d_active=1
		AND cv.config_param=cp.id
		AND cp.name='itemTypeAllowedForPartsClaim';
	RETURN v_item;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		p_error_code := 'PRT_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'PRT_DUP';
		RETURN NULL;
END isValidItemForPartsClaim;

END COMMON_VALIDATION_UTILS;
 INFO 09-Aug-12 18:11:17 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 09-Aug-12 19:02:22 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 09-Aug-12 19:02:22 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

create or replace
PROCEDURE                 UPLOAD_DRAFT_CLAIM_VALIDATION AS
CURSOR ALL_REC IS
	SELECT * FROM STG_DRAFT_CLAIM
	WHERE NVL(ERROR_STATUS,'N') = 'N' -- AND

		 ORDER BY ID ASC;

CURSOR DUP_REC IS
SELECT serial_number,campaign_code,COUNT(*)
          FROM STG_DRAFT_CLAIM
          WHERE claim_type='FIELDMODIFICATION'
          GROUP BY serial_number,campaign_code
          HAVING COUNT(*)>1;  

    v_loop_count            NUMBER         := 0;
    v_success_count         NUMBER         := 0;
    v_error_count           NUMBER         := 0;
    v_count                 NUMBER         := 0;
    v_count2                NUMBER         := 0;
    v_file_upload_mgt_id    NUMBER         := 0;
    v_number_temp           NUMBER         := 0;
    isFaultFoundValid       BOOLEAN        := FALSE;
    v_error                 VARCHAR2(4000) := NULL;
    v_error_code            VARCHAR2(4000) := NULL;
    v_model                 NUMBER := NULL;
	v_causal_part           VARCHAR2(255) := NULL;
	v_replaced_parts        VARCHAR2(255) := NULL;
	v_installed_parts       VARCHAR2(255) := NULL;
    v_temp_part_number      VARCHAR2(255) := NULL;
    v_product               NUMBER := NULL;
    v_machine_serial_number VARCHAR2(4000) := NULL;
    v_replaced_part      NUMBER := NULL;
    v_flag                  BOOLEAN := FALSE;
    v_valid_bu              BOOLEAN;
    v_valid_fault_found     BOOLEAN := FALSE;
    v_valid_campaign_code   BOOLEAN := FALSE;
    v_user_locale           VARCHAR2(255) := NULL;
    v_dealer                VARCHAR2(255) := NULL;
    v_dealer_id             NUMBER := NULL;
    v_bu_name               VARCHAR2(255) := NULL;
    v_smr_reason_id         VARCHAR2(255) := NULL;
    v_service_provider      NUMBER := NULL;
    v_service_provider_number  VARCHAR2(255) := NULL;
    v_delimiter             VARCHAR2(10) := '#$#';
    v_fault_code            VARCHAR2(255);
    v_job_codes_delimited   VARCHAR2(255);
    v_job_code              VARCHAR2(255);
    v_fault_found           VARCHAR2(255);    
    v_item_number           VARCHAR2(255) := NULL;   
    v_competitor_model_id   NUMBER := NULL;
    v_ac_input      		    NUMBER         := 0;
    v_id                    NUMBER := NULL;   
    v_repairdate        DATE := NULL;
    v_installeddate      VARCHAR2(255) := NULL;
    v_failuredate       VARCHAR2(255) := NULL;
    v_serial_number       VARCHAR2(20) := NULL;
	v_serialized BOOLEAN;
	v_part_installed BOOLEAN;
	v_part_installed_on_tktsa BOOLEAN;
	v_bu_config_display_item BOOLEAN := FALSE;
	v_err VARCHAR2(20);
	v_inv NUMBER;
	v_item NUMBER;
	v_part_serial NUMBER;
	v_part NUMBER;
	v_model_id NUMBER;

BEGIN

    BEGIN
     FOR EACH_DUP_REC IN DUP_REC
      LOOP
        UPDATE STG_DRAFT_CLAIM
        SET ERROR_STATUS    = 'N',
          ERROR_CODE        = 'Field modification code is duplicate for same Serial Number'
        WHERE serial_number = EACH_DUP_REC.serial_number
        AND campaign_code   = EACH_DUP_REC.campaign_code;
      END LOOP;
    END;

    BEGIN
    SELECT u.locale, u.login, f.business_unit_info, o.id INTO v_user_locale, v_dealer, v_bu_name, v_dealer_id
    FROM org_user u,file_upload_mgt f,org_user_belongs_to_orgs orgu,organization o
    WHERE u.id = f.uploaded_by 
        and orgu.org_user=u.id and orgu.belongs_to_organizations=o.id AND f.id=(SELECT file_upload_mgt_id FROM stg_draft_claim WHERE rownum = 1);
       /* SELECT u.locale, u.login, f.business_unit_info, u.belongs_to_organization  INTO v_user_locale, v_dealer, v_bu_name, v_dealer_id
        FROM org_user u,file_upload_mgt f
        WHERE u.id = f.uploaded_by AND f.id = 
            (SELECT file_upload_mgt_id FROM stg_draft_claim WHERE rownum = 1);*/
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            v_user_locale := 'en_US';
    END;


    BEGIN
        SELECT id, service_provider_number 
		INTO v_service_provider,v_service_provider_number 
        FROM service_provider WHERE id=v_dealer_id;
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            NULL;
    END;

	IF common_validation_utils.isConfigParamSet('isItemNumberDisplayRequired', v_bu_name) THEN
		v_bu_config_display_item := TRUE;
	END IF;

  FOR EACH_REC IN ALL_REC
  LOOP

    v_error_code := '';
    v_model := NULL;
	v_causal_part := NULL;
	v_replaced_parts := NULL;
	v_installed_parts := NULL;
    v_product := NULL;
    v_valid_bu := FALSE;
    v_valid_fault_found := FALSE;
    v_job_codes_delimited := NULL;
    v_valid_campaign_code := FALSE;
    v_smr_reason_id := NULL;
    v_fault_code := NULL;
    v_job_code := NULL;
    v_fault_found := NULL;
	v_serial_number := ltrim(rtrim(each_rec.serial_number));
	v_err := NULL;
	v_inv := NULL;
	v_item := NULL;
	v_part_serial := NULL;
	v_part := NULL;
	v_model_id := NULL;
	v_machine_serial_number := NULL;
	v_item_number := NULL;
	v_competitor_model_id := NULL;
	v_serialized := TRUE;
	v_part_installed := FALSE;
	v_part_installed_on_tktsa := FALSE;
	v_repairdate := NULL;
	v_failuredate := NULL;
	v_installeddate := NULL;

	IF EACH_REC.REPAIR_DATE IS NOT NULL AND 
		COMMON_VALIDATION_UTILS.isValidDate(each_rec.REPAIR_DATE, 'YYYY-MM-DD') THEN
		v_repairdate := TO_DATE(each_rec.repair_date,'YYYY-MM-DD');
	ELSIF EACH_REC.REPAIR_DATE IS NOT NULL AND 
		COMMON_VALIDATION_UTILS.isValidDate(each_rec.REPAIR_DATE, 'YYYYMMDD') THEN
		v_repairdate := TO_DATE(each_rec.repair_date,'YYYYMMDD');
	ELSE
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC018');
	END IF;

	IF UPPER(EACH_REC.CLAIM_TYPE) NOT IN ('FIELDMODIFICATION') THEN
		IF EACH_REC.FAILURE_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.FAILURE_DATE, 'YYYY-MM-DD') THEN
			v_failuredate := TO_DATE(each_rec.FAILURE_DATE,'YYYY-MM-DD');
		ELSIF EACH_REC.FAILURE_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.FAILURE_DATE, 'YYYYMMDD') THEN
			v_failuredate := TO_DATE(each_rec.FAILURE_DATE,'YYYYMMDD');
		ELSE
			v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC019');
		END IF;
	END IF;

	IF UPPER(EACH_REC.CLAIM_TYPE) IN ('MACHINE NON SERIALIZED', 'ATTACHMENT NON SERIALIZED', 'PARTS WITH HOST') THEN
		IF EACH_REC.INSTALLATION_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.INSTALLATION_DATE, 'YYYY-MM-DD') THEN
			v_installeddate := TO_DATE(each_rec.INSTALLATION_DATE,'YYYY-MM-DD');
		ELSIF EACH_REC.INSTALLATION_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.INSTALLATION_DATE, 'YYYYMMDD') THEN
			v_installeddate := TO_DATE(each_rec.INSTALLATION_DATE,'YYYYMMDD');
		ELSE
			v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC020');
		END IF;
	END IF;


    BEGIN
        IF v_bu_name IS NULL OR lower(v_bu_name) != lower(each_rec.business_unit_name) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC001');
        ELSIF NOT (COMMON_VALIDATION_UTILS.isUserBelongsToBU(v_bu_name,v_dealer)) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC044');
        ELSE
            v_valid_bu := TRUE;
        END IF;
	END;

	IF EACH_REC.UNIQUE_IDENTIFIER IS NULL THEN
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC002');
	END IF;

	BEGIN
        IF each_rec.claim_type IS NULL OR UPPER(each_rec.claim_type) NOT IN 
            ('MACHINE SERIALIZED', 'MACHINE NON SERIALIZED', 'PARTS WITH HOST', 
            'PARTS WITHOUT HOST', 'FIELDMODIFICATION' , 'ATTACHMENT SERIALIZED', 'ATTACHMENT NON SERIALIZED')
        THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC003');
        ELSIF v_valid_bu = TRUE AND NOT common_validation_utils.isClaimTypeAllowed(each_rec.claim_type, v_bu_name) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC066');
        END IF;
	END;


    IF UPPER(each_rec.claim_type) IN ('FIELDMODIFICATION') THEN
        IF each_rec.campaign_code IS NULL THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC026');
        ELSIF NOT common_validation_utils.isValidCampaignCode(each_rec.campaign_code, v_service_provider, v_bu_name,v_repairdate,v_service_provider_number,v_serial_number) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC065');
        ELSE
            v_valid_campaign_code := TRUE;
        END IF;
    END IF;

	IF UPPER(each_rec.is_serialized) = 'N' THEN
		v_serialized := FALSE;
	END IF;
	IF UPPER(each_rec.is_part_installed) = 'Y' THEN
		v_part_installed := TRUE;
	END IF;
	IF UPPER(each_rec.is_part_installed_on_oem) = 'Y' THEN
		v_part_installed_on_tktsa := TRUE;
	END IF;

	IF UPPER(each_rec.claim_type) = 'PARTS WITHOUT HOST' THEN
		v_serialized := NULL;
		v_part_installed_on_tktsa := NULL;
	ELSIF UPPER(each_rec.claim_type) in ('FIELDMODIFICATION',
		'MACHINE SERIALIZED','MACHINE NON SERIALIZED', 'ATTACHMENT SERIALIZED', 'ATTACHMENT NON SERIALIZED') THEN
		v_part_installed := NULL;
		v_part_installed_on_tktsa := NULL;
	ELSIF UPPER(each_rec.claim_type) = 'PARTS WITH HOST' AND v_serialized THEN
		v_part_installed_on_tktsa := NULL;
	END IF;

	IF NOT v_serialized AND UPPER(each_rec.claim_type) IN 
			('MACHINE SERIALIZED','ATTACHMENT SERIALIZED','FIELDMODIFICATION') THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC101');
	ELSIF v_serialized AND UPPER(each_rec.claim_type) IN 
			('MACHINE NON SERIALIZED', 'ATTACHMENT NON SERIALIZED') THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC107');
	END IF;
	IF UPPER(each_rec.claim_type) = 'PARTS WITH HOST' 
			AND NOT v_part_installed THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC102');
	END IF;
	IF UPPER(each_rec.claim_type) = 'PARTS WITHOUT HOST' 
			AND v_part_installed THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC103');
	END IF;

	IF UPPER(each_rec.claim_type) IN ('PARTS WITHOUT HOST','PARTS WITH HOST') THEN
		IF each_rec.part_serial_number IS NOT NULL THEN
			v_part_serial := common_validation_utils.getValidPartSerialNumber(
								each_rec.part_serial_number, v_bu_name);
			IF v_part_serial IS NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC073_PS');
			ELSE
			SELECT of_type INTO v_part 
			FROM inventory_item WHERE id=v_part_serial;
			BEGIN
				select id,serial_number into v_inv,v_machine_serial_number 
				from inventory_item where id in ( 
					select part_of from inventory_item_composition  
					where part = v_part_serial);
			EXCEPTION 
				WHEN NO_DATA_FOUND THEN
					NULL;
			END;
			END IF;
		ELSIF each_rec.part_item_number IS NOT NULL THEN
			v_part := common_validation_utils.isValidItemForPartsClaim(
								each_rec.PART_ITEM_NUMBER, v_bu_name,v_err);
			IF v_err IS NOT NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_'||v_err);
				v_err := NULL;
			END IF;
		ELSE
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC014');
		END IF;
	END IF;

	IF v_machine_serial_number IS NOT NULL THEN
		IF UPPER(each_rec.claim_type)='PARTS WITHOUT HOST' THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC104');
		ELSIF NOT v_serialized THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC105');
		ELSIF v_serial_number IS NULL THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC004');
		ELSIF UPPER(v_serial_number) != UPPER(v_machine_serial_number) THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_90');
		END IF;
	ELSIF v_serialized THEN
		IF v_serial_number IS NOT NULL THEN
			IF UPPER(each_rec.claim_type)='FIELDMODIFICATION' THEN
				v_inv := common_validation_utils.isValidInventoryForFieldMod(
							v_serial_number,each_rec.campaign_code,
							v_service_provider,v_bu_name,v_repairdate,v_err);
			ELSE
				v_inv := common_validation_utils.isValidSerialNumber(
								v_serial_number, v_bu_name, each_rec.model_number,
								v_service_provider,each_rec.claim_type, v_err);
			END IF;
		ELSIF each_rec.container_number IS NOT NULL THEN
			IF UPPER(each_rec.claim_type)='FIELDMODIFICATION' THEN
				v_inv := common_validation_utils.isValidInventoryForFieldModWCN(
							each_rec.container_number,each_rec.campaign_code,
							v_service_provider,v_bu_name,v_repairdate,v_err);
			ELSE 
				v_inv := common_validation_utils.isValidInventoryWithConNum(
								each_rec.container_number, v_bu_name,v_err);
			END IF;
		ELSE
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC004');
		END IF;
		IF v_err IS NOT NULL THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_'||v_err);
			v_err := NULL;
			v_inv := NULL;
		END IF;
	ELSIF NOT v_serialized THEN
		IF v_part_installed AND NOT v_part_installed_on_tktsa THEN
			IF each_rec.competitor_model IS NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC106');
			ELSE
				v_competitor_model_id := common_validation_utils.getValidCompetitorModelId(
					each_rec.competitor_model, v_user_locale, v_bu_name);
				IF v_competitor_model_id IS NULL THEN
					v_error_code := common_utils.addErrorMessage(v_error_code,'DC071_CM');
				END IF;
			END IF;
		ELSIF (v_part_installed AND v_part_installed_on_tktsa)
				OR v_part_installed IS NULL THEN
			IF v_bu_config_display_item THEN
				IF each_rec.item_number IS NULL THEN
					v_error_code := common_utils.addErrorMessage(v_error_code,'DC011');
				ELSE 
					v_item := common_validation_utils.isValidItemForNonSerialized(
									each_rec.item_number,v_bu_name,v_err);
				END IF;
			ELSIF each_rec.model_number IS NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code,'DC009');
			ELSE
				v_model_id := common_validation_utils.isValidModelForNonSerialized(
									each_rec.model_number, v_bu_name, v_err);
			END IF;
			IF v_err IS NOT NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_'||v_err);
				v_err := NULL;
			END IF;
		END IF;
	END IF;

	IF v_model_id IS NOT NULL THEN
		v_model := v_model_id;
	ELSIF v_item IS NOT NULL THEN
		SELECT m.id INTO v_model
		FROM item i,item_group m
		WHERE i.id=v_item AND i.model=m.id;
	ELSIF v_inv IS NOT NULL THEN
		SELECT m.id,CASE WHEN p1.item_group_type='PRODUCT' THEN p1.id
			ELSE p2.id END INTO v_model,v_product
		FROM inventory_item ii,item i,item_group m,item_group p1,item_group p2
		WHERE ii.id=v_inv AND ii.of_type=i.id and i.model=m.id
			AND m.is_part_of=p1.id AND p1.is_part_of=p2.id;
	END IF;


     BEGIN
       IF EACH_REC.ALARM_CODES IS NOT NULL THEN          
            v_ac_input := Common_Utils.count_delimited_values(each_rec.ALARM_CODES, ',');
            FOR i IN 1 .. v_ac_input LOOP

                IF  v_product IS NOT NULL THEN       
                      IF NOT common_validation_utils.isValidAlarmCode(
                              common_utils.get_delimited_value(each_rec.ALARM_CODES, ',', i),v_product, v_bu_name)
                      THEN
                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC067_IAC');
                          EXIT;
                      END IF;
                ELSE 
                     select alarm_code.id into v_id from alarm_code where  lower(trim(code)) = lower(trim(common_utils.get_delimited_value(each_rec.ALARM_CODES, ',', i)));

                END IF;
            END LOOP;
        END IF; 
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC067_IAC');
     END;




  IF UPPER(EACH_REC.CLAIM_TYPE) IN ('MACHINE SERIALIZED', 'ATTACHMENT SERIALIZED', 'PARTS WITH HOST', 'FIELDMODIFICATION')
  THEN
    IF EACH_REC.MACHINE_HOURS IS NULL
    THEN
      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC016');
    END IF;

    IF EACH_REC.MACHINE_HOURS IS NOT NULL AND (EACH_REC.MACHINE_HOURS < 0 OR EACH_REC.MACHINE_HOURS > 999999)
    THEN
      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC017');
    END IF;
  END IF;

	BEGIN
		 IF EACH_REC.WORK_ORDER_NUMBER IS NULL
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC021');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.CONDITIONS_FOUND IS NULL
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC022');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.WORK_PERFORMED IS NULL
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC023');
		 END IF;
	END;




	BEGIN
    IF UPPER(EACH_REC.CLAIM_TYPE) NOT IN ('PARTS WITHOUT HOST', 'FIELDMODIFICATION') THEN
        IF (EACH_REC.CAUSAL_PART IS NOT NULL) THEN
            v_causal_part := COMMON_VALIDATION_UTILS.getValidCausalPart(EACH_REC.CAUSAL_PART, v_bu_name);
        END IF;
        IF EACH_REC.CAUSAL_PART IS NULL OR (EACH_REC.CAUSAL_PART IS NOT NULL AND v_causal_part IS NULL) THEN
		    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC025');
        ELSIF v_causal_part != each_rec.causal_part THEN
            UPDATE stg_draft_claim SET causal_part=v_causal_part WHERE id=each_rec.id;
		END IF;
    END IF;
	END;







    IF UPPER(each_rec.claim_type) NOT IN ('PARTS WITHOUT HOST') AND 
            each_rec.replaced_oem_parts IS NOT NULL THEN

         IF  each_rec.INSTALLED_OEM_PARTS IS NULL THEN            
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045_ADD_INP');         
         END IF;    

        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_oem_parts, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045');
            v_flag := FALSE;
        ELSE
            v_count := Common_Utils.count_delimited_values(each_rec.replaced_oem_parts, v_delimiter);
             IF  each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN            
                IF NOT common_validation_utils.isValidDelimitedValue(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter) THEN
                  v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045_SE');
                  v_flag := FALSE;
                ELSE
                  v_count2 := Common_Utils.count_delimited_values(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter); 
                END IF; 
             END IF;
            IF v_flag = TRUE THEN


            IF UPPER(each_rec.claim_type) IN ('PARTS WITH HOST') AND common_validation_utils.hasDuplicateSerializedPart(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM,each_rec.replaced_oem_parts, v_delimiter) THEN
                  v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_98');          
            END IF;

            FOR i IN 1 .. v_count LOOP
                IF i <= v_count2 THEN
                IF UPPER(each_rec.claim_type) IN ('PARTS WITHOUT HOST') THEN

                            IF UPPER(each_rec.PART_SERIAL_NUMBER) IS NOT NULL THEN
                               IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NULL THEN   
                                        v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Removed part should be serialized replaced part');                                         
                               ELSE
                                                     IF each_rec.PART_SERIAL_NUMBER != each_rec.REPLACED_OEM_PARTS_SERIAL_NUM THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Replaced part serial number should be same as part serial number');

                                                     ELSIF common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Serialized replaced part quatity should be one');
                                                     END IF;

                               END IF;  
                            ELSIF UPPER(each_rec.Part_item_Number) IS NOT NULL THEN
                                 IF each_rec.Replaced_OEM_Parts IS NOT NULL THEN
                                                  IF common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, i) != each_rec.Part_item_Number THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Please add correct replaced part');
                                                   END IF;
                                  END IF;                         
                                  IF UPPER(each_rec.REPLACED_OEM_PARTS_QUANTITY) IS NOT NULL THEN
                                                  IF common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i) !=1 THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Replaced part quantity should be one only');   
                                                   END IF;
                                  END IF;                 
                             END IF;
                END IF; 
                        IF UPPER(each_rec.claim_type) IN ('PARTS WITH HOST') THEN

                            IF UPPER(each_rec.PART_SERIAL_NUMBER) IS NOT NULL THEN
                                   IF common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_79');
                                   END IF;

                                   IF each_rec.Is_Serialized in ('Y') THEN

                                          IF each_rec.Is_Part_Installed_on_OEM in ('Y') THEN                                         

                                              IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                    select count(*) into v_replaced_part from  Inventory_Item_Composition where part_of in (select id from inventory_item where serial_number = v_machine_serial_number ) and part in (select id from inventory_item where serial_number=common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i) );   

                                                     IF v_replaced_part != 1 THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_78');                                                     
                                                     END IF;
                                               END IF;


                                               IF each_rec.Installed_OEM_Parts_Serial_Num IS NOT NULL THEN
                                                    IF common_utils.get_delimited_value(each_rec.Installed_OEM_Parts_Quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_80');
                                                     END IF;
                                               END IF;

                                           ELSE 

                                              IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL AND common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i) != each_rec.Part_Serial_Number THEN
                                                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_81');
                                              END IF;   

                                              IF each_rec.Installed_OEM_Parts_Serial_Num IS NOT NULL AND common_utils.get_delimited_value(each_rec.Installed_OEM_Parts_Quantity, v_delimiter, i) !=1 THEN

                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_80');

                                               END IF;
                                           END IF;

                                    ELSE
                                             IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL AND common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i) != each_rec.Part_Serial_Number THEN
                                                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_81');
                                              END IF;    

                                              IF each_rec.Installed_OEM_Parts_Serial_Num IS NOT NULL AND common_utils.get_delimited_value(each_rec.Installed_OEM_Parts_Quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_80');
                                               END IF;  
                                    END IF;


                            ELSIF UPPER(each_rec.Part_item_Number) IS NOT NULL THEN

                                      IF each_rec.Is_Serialized in ('Y') THEN    

                                            IF each_rec.Is_Part_Installed_on_OEM in ('Y') THEN
                                                  IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_82');
                                                   END IF;        

                                            ELSE
                                                  IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_82'); 
                                                  END IF;
                                                  IF each_rec.Replaced_OEM_Parts IS NOT NULL AND UPPER(each_rec.Part_item_Number) != common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, 1) THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_85');
                                                   END IF;
                                                   IF Common_Utils.count_delimited_values(each_rec.Replaced_OEM_Parts, v_delimiter)  !=1 THEN
                                                      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Should not add more than one part');
                                                   END IF;

                                                   IF each_rec.Installed_OEM_Parts_Serial_Num is NOT NULL THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_87');
                                                   END IF;  
                                             END IF;

                                       ELSE

                                              IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_84');
                                               END IF;

                                              IF each_rec.Replaced_OEM_Parts IS NOT NULL AND UPPER(each_rec.Part_item_Number) != common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, i) THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_85');
                                              END IF;

                                              IF Common_Utils.count_delimited_values(each_rec.Replaced_OEM_Parts, v_delimiter)  !=1 THEN
                                                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Should not add more than one part');
                                              END IF;

                                              IF each_rec.Installed_OEM_Parts_Serial_Num is NOT NULL THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_87');
                                              END IF;  
                                       END IF;
                            END IF;   
                         END IF; 
                        IF NOT common_validation_utils.isValidReplacedIRPart(common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i),
                              common_utils.get_delimited_value(each_rec.replaced_OEM_parts, v_delimiter, i), v_bu_name)
                        THEN
                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC046');
                          EXIT;
                        END IF;

                ELSE          

                              IF UPPER(each_rec.Part_item_Number) IS NOT NULL THEN
                                   IF each_rec.Is_Part_Installed_on_OEM in ('N') OR each_rec.Is_Serialized in ('N') THEN                                         

                                        IF each_rec.Replaced_OEM_Parts IS NOT NULL AND UPPER(each_rec.Part_item_Number) != common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, i) THEN
                                                                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_88');
                                        END IF;

                                        IF Common_Utils.count_delimited_values(each_rec.Replaced_OEM_Parts, v_delimiter)  !=1 THEN
                                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Should not add more than one part');
                                        END IF;

                                        IF each_rec.Installed_OEM_Parts_Serial_Num is NOT NULL THEN
                                                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_87');
                                        END IF;  
                                    END IF;
                              END IF;

                      v_temp_part_number := common_validation_utils.getReplacedIRPartNumber(
		                        common_utils.get_delimited_value(each_rec.replaced_OEM_parts, v_delimiter, i), v_bu_name);
		                IF v_temp_part_number IS NULL
		                THEN
		                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC046');
		                    v_replaced_parts := NULL;
		                    EXIT;
		                END IF;
		                IF i > 1 THEN
		                    v_replaced_parts := v_replaced_parts || v_delimiter;
		                END IF;			  
						v_replaced_parts := v_replaced_parts || v_temp_part_number;
                END IF;     

            END LOOP;
			IF v_replaced_parts IS NOT NULL AND v_replaced_parts != each_rec.replaced_OEM_parts THEN
                UPDATE stg_draft_claim SET replaced_OEM_parts=v_replaced_parts WHERE id=each_rec.id;
            ENd IF;
            END IF;   
        END IF;

        IF each_rec.replaced_oem_parts_quantity IS NULL THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC027');
        ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_oem_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC047');
        ELSIF v_flag = TRUE AND v_count != Common_Utils.count_delimited_values(each_rec.replaced_oem_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC048');
        ELSIF v_flag = TRUE THEN
            FOR i IN 1 .. v_count LOOP
                IF NOT common_utils.isPositiveInteger(
                        common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i)) 
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC054');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
    END IF; 




    IF UPPER(each_rec.claim_type) NOT IN ('PARTS WITHOUT HOST') AND 
            each_rec.INSTALLED_OEM_PARTS IS NOT NULL THEN
        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.INSTALLED_OEM_PARTS, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045_INP');
            v_flag := FALSE;
        ELSE            
              IF v_count != Common_Utils.count_delimited_values(each_rec.INSTALLED_OEM_PARTS, v_delimiter) THEN
                 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC075');
              End If;
            v_count := Common_Utils.count_delimited_values(each_rec.INSTALLED_OEM_PARTS, v_delimiter);
            For I In 1 .. V_Count Loop               
                v_temp_part_number := common_validation_utils.getInstalledIRPart(
                        common_utils.get_delimited_value(each_rec.INSTALLED_OEM_PARTS, v_delimiter, i), v_bu_name);
                IF v_temp_part_number IS NULL
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC046_INP');
                    v_installed_parts := NULL;
                    EXIT;
                END IF;
                IF i > 1 THEN
                    v_installed_parts := v_installed_parts || v_delimiter;
                END IF;
                v_installed_parts := v_installed_parts || v_temp_part_number;
            END LOOP;
			IF v_installed_parts IS NOT NULL AND v_installed_parts != each_rec.INSTALLED_OEM_PARTS THEN
                UPDATE stg_draft_claim SET INSTALLED_OEM_PARTS=v_installed_parts WHERE id=each_rec.id;
            ENd IF;
        END IF;

        IF each_rec.INSTALLED_OEM_PARTS_QUANTITY IS NULL THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC027_INP');
        ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.INSTALLED_OEM_PARTS_QUANTITY, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC047_INP');
        ELSIF v_flag = TRUE AND v_count != Common_Utils.count_delimited_values(each_rec.INSTALLED_OEM_PARTS_QUANTITY, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC048_INP');
        ELSIF v_flag = TRUE THEN
            FOR i IN 1 .. v_count LOOP
                IF NOT common_utils.isPositiveInteger(
                        common_utils.get_delimited_value(each_rec.INSTALLED_OEM_PARTS_QUANTITY, v_delimiter, i)) 
                THEN
                      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC054_INP');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
    END IF;

    IF each_rec.miscellaneous_parts IS NOT NULL THEN
        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.miscellaneous_parts, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC049');
            v_flag := FALSE;
        ELSE
            v_count := Common_Utils.count_delimited_values(each_rec.miscellaneous_parts, v_delimiter);
            FOR i IN 1 .. v_count LOOP
                IF NOT common_validation_utils.isValidMiscPart(
                        common_utils.get_delimited_value(each_rec.miscellaneous_parts, v_delimiter, i), v_service_provider, v_bu_name)
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC050');
                    EXIT;
                END IF;
            END LOOP;
        END IF;

        IF each_rec.misc_parts_quantity IS NULL THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC051');
        ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.misc_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC052');
        ELSIF v_flag = TRUE AND v_count != Common_Utils.count_delimited_values(each_rec.misc_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC053');
        ELSIF v_flag = TRUE THEN
            FOR i IN 1 .. v_count LOOP
                IF NOT common_utils.isPositiveInteger(
                        common_utils.get_delimited_value(each_rec.misc_parts_quantity, v_delimiter, i)) 
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC055');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
    END IF;

    IF UPPER(each_rec.claim_type) NOT IN ('PARTS WITHOUT HOST') AND 
            each_rec.replaced_non_oem_parts IS NOT NULL 
    THEN
        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC056');
            v_flag := FALSE;
        ELSE
            v_count := common_utils.count_delimited_values(each_rec.replaced_non_oem_parts, v_delimiter);
            IF each_rec.replaced_non_oem_parts_qty IS NULL THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC028');
            ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts_qty, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC057');
            ELSIF v_count != common_utils.count_delimited_values(each_rec.replaced_non_oem_parts_qty, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC058');
            ELSE
                FOR i IN 1 .. v_count LOOP
                    IF NOT common_utils.isPositiveInteger(
                            common_utils.get_delimited_value(each_rec.replaced_non_oem_parts_qty, v_delimiter, i)) 
                    THEN
                        v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC059');
                        EXIT;
                    END IF;
                END LOOP;
            END IF;

            IF each_rec.replaced_non_oem_parts_price IS NULL THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC029');
            ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts_price, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC060');
            ELSIF v_count != common_utils.count_delimited_values(each_rec.replaced_non_oem_parts_price, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC061');
            END IF;

            IF each_rec.replaced_non_oem_parts_desc IS NULL THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC030');
            ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts_desc, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC062');
            ELSIF v_count != common_utils.count_delimited_values(each_rec.replaced_non_oem_parts_desc, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC063');
            END IF;        
        END IF;
    END IF;




	BEGIN
		 IF EACH_REC.SMR_CLAIM IS NOT NULL AND EACH_REC.SMR_CLAIM NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC031');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.COMMERCIAL_POLICY IS NOT NULL AND EACH_REC.COMMERCIAL_POLICY NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC068_CP');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.IS_PART_INSTALLED IS NOT NULL AND EACH_REC.IS_PART_INSTALLED NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC069_IPI');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.IS_PART_INSTALLED_ON_OEM IS NOT NULL AND EACH_REC.IS_PART_INSTALLED_ON_OEM NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC070_PITKTSA');
		 END IF;
	END;



	BEGIN
		 IF EACH_REC.SMR_CLAIM IS NOT NULL AND each_rec.smr_claim = 'Y' THEN
            IF EACH_REC.REASON_FOR_SMR_CLAIM IS NULL THEN
			    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC032');
            ELSE
                v_smr_reason_id := common_validation_utils.getValidSMRReasonId(each_rec.reason_for_smr_claim, v_user_locale, v_bu_name);
                IF v_smr_reason_id IS NULL THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC033');
                END IF;
            END IF;
		 END IF;
	END;

	IF (UPPER(each_rec.claim_type) = 'MACHINE NON SERIALIZED' OR UPPER(each_rec.claim_type) = 'ATTACHMENT NON SERIALIZED' OR
			(UPPER(each_rec.claim_type) = 'PARTS WITH HOST' 
				AND NOT v_serialized AND v_part_installed_on_tktsa))
			AND COMMON_VALIDATION_UTILS.isConfigParamSet('invoiceNumberApplicable', v_bu_name) 
			AND EACH_REC.INVOICE_NUMBER IS NULL THEN
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC034');
	END IF;

	BEGIN
		 IF TO_NUMBER(EACH_REC.HOURS_ON_PARTS) IS NOT NULL  AND (TO_NUMBER(EACH_REC.HOURS_ON_PARTS)<0) 

		 THEN

			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC035');
		 END IF;
	END;





	BEGIN

		 IF UPPER(EACH_REC.CLAIM_TYPE) NOT IN ('PARTS WITHOUT HOST') AND 
		 EACH_REC.LABOUR_HOURS IS NOT NULL  
		 THEN
        IF EACH_REC.REASON_FOR_EXTRA_LABOR_HOURS IS NULL THEN 
        	 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036');
        ELSE 
         select count(1)  into v_id  from add_lbr_egl_service_providers alesp,additional_labor_eligibility ale where 
          alesp.additional_labor_eligibility=ale.id and ale.business_unit_info=v_bu_name and alesp.d_active = 1;
           IF v_id =0 then
              null;               
            ELSE             
                select count(1) into v_id from add_lbr_egl_service_providers alesp,additional_labor_eligibility ale where 
                alesp.SERVICE_PROVIDERS = v_dealer_id and alesp.additional_labor_eligibility=ale.id and ale.business_unit_info=v_bu_name
                and alesp.d_active = 1; 
                IF v_id = 0 then
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_ALH');
                END IF; 
            END IF; 
        END IF;  
		 END IF;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_ALH');

	END;

IF v_product IS NOT NULL THEN     




BEGIN
       IF UPPER(EACH_REC.LABOUR_HOURS)IS NOT NULL THEN 
               IF NOT common_validation_utils.isAllowedCostCategory('LABOR',v_product,v_bu_name) THEN
                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC072');                                
               END IF;
        END IF;

        EXCEPTION 
          WHEN OTHERS THEN
          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC072');
END;




BEGIN
       IF UPPER(EACH_REC.REPLACED_OEM_PARTS)IS NOT NULL THEN 
               IF NOT common_validation_utils.isAllowedCostCategory('OEM_PARTS',v_product,v_bu_name) THEN
                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_RP');                                
              END IF;
        END IF;

    EXCEPTION 
        WHEN OTHERS THEN
        v_error_code := Common_Utils.addErrorMessage(v_error_code, '123');
END;





BEGIN
       IF UPPER(EACH_REC.MISCELLANEOUS_PARTS)IS NOT NULL THEN 
            IF NOT common_validation_utils.isAllowedCostCategory('MISC_PARTS',v_product,'v_bu_name') THEN
                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_MP');                                
              END IF;
       END IF;
END;

END IF;

	IF v_repairdate IS NOT NULL AND v_failuredate IS NOT NULL 
			AND v_repairdate < v_failuredate THEN
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC037');
	END IF;

	BEGIN
        v_fault_code := common_utils.getValidFaultCode(EACH_REC.fault_location);
		 IF v_model IS NOT NULL  AND EACH_REC.fault_location IS NOT NULL AND 
     NOT COMMON_VALIDATION_UTILS.isValidFaultCodeForModelId(v_model, v_fault_code, v_bu_name)
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC038');
		 END IF;
	END;


	IF each_rec.job_code IS NOT NULL THEN
        v_count := Common_Utils.count_delimited_values_new(each_rec.job_code, ',');
        FOR i IN 1 .. v_count LOOP
            v_job_code := common_utils.getValidJobCode(common_utils.get_delimited_value(each_rec.job_code, ',', i));
            IF v_job_code IS NULL THEN
                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC039');
                EXIT;
            ELSIF v_model IS NOT NULL AND
                NOT common_validation_utils.isValidJobCodeForModelId(v_model, v_job_code, v_bu_name)
		    THEN
			    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC039');
                EXIT;
            ELSE
                IF v_job_codes_delimited IS NULL THEN
                    v_job_codes_delimited := '';
                ELSE
                    v_job_codes_delimited := v_job_codes_delimited || ',';
                END IF;
                v_job_codes_delimited := v_job_codes_delimited || v_job_code;
            END IF;

        END LOOP;
        IF each_rec.labour_hours IS NOT NULL AND Common_Utils.count_delimited_values(each_rec.labour_hours, ',') > 0 THEN
            IF Common_Utils.count_delimited_values_new(each_rec.labour_hours, ',') < v_count THEN
                v_count := Common_Utils.count_delimited_values_new(each_rec.labour_hours, ',');
            END IF;
            FOR i IN 1 .. v_count LOOP
                IF common_utils.get_delimited_value(each_rec.labour_hours, ',', i) IS NOT NULL AND 
                        common_utils.get_delimited_value(each_rec.labour_hours, ',', i) != '0' AND 
                        common_utils.get_delimited_value(each_rec.reason_for_extra_labor_hours, v_delimiter, i) IS NULL THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
	END IF;





	BEGIN
		 IF v_model IS NOT NULL  AND EACH_REC.FAULT_FOUND IS NOT NULL THEN
            IF NOT COMMON_VALIDATION_UTILS.isValidFaultFoundForModelId(v_model, EACH_REC.FAULT_FOUND, v_bu_name)
		    THEN
			    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC040');
            ELSE
                v_valid_fault_found := TRUE;
                SELECT ftd.name INTO v_fault_found
                FROM failure_type ft, 
                    i18nfailure_type_definition i18n_ftd,
                    failure_type_definition ftd
                where 
                    ft.definition_id = i18n_ftd.failure_type_definition
                    AND lower(i18n_ftd.name) = lower(ltrim(rtrim(each_rec.fault_found))) 
                    AND ft.for_item_group_id = v_model 
                    AND ft.d_active = 1
                    AND ftd.id = i18n_ftd.failure_type_definition
                    AND ROWNUM = 1;
            END IF;
		 END IF;
	END;


	BEGIN
		 IF v_valid_fault_found  AND EACH_REC.failure_detail IS NOT NULL AND 
     NOT COMMON_VALIDATION_UTILS.isValidRootCauseForModelId(v_model, EACH_REC.FAULT_FOUND, EACH_REC.failure_detail, v_bu_name)
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC042');
		 END IF;
	END;

    BEGIN
		 IF each_rec.technician_id IS NOT NULL AND 
            NOT COMMON_VALIDATION_UTILS.isValidTechnician(each_rec.technician_id, v_dealer, v_bu_name)
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC043');
		 END IF;
	END;


 IF v_error_code IS NULL
	THEN

	   UPDATE STG_DRAFT_CLAIM
	   SET
		  ERROR_STATUS = 'Y',
			ERROR_CODE = NULL,
            business_unit_name = v_bu_name,
            reason_for_smr_claim = v_smr_reason_id,
            competitor_model_id = v_competitor_model_id,
            fault_location = v_fault_code,
            job_code = v_job_codes_delimited,
            fault_found = v_fault_found,
            part_number=  v_item_number,
            repair_date= CAST (each_rec.REPAIR_DATE AS number(8,0)),                      
            failure_date= CAST (each_rec.FAILURE_DATE AS number(8,0)) ,                    
            installation_date=CAST (each_rec.INSTALLATION_DATE AS number(8,0)),
			serial_number_id = v_inv,
			item_number_id = v_item,
			model_id = v_model_id,
			part_id = v_part,
			part_serial_id = v_part_serial

		WHERE
		  ID = EACH_REC.ID;
	ELSE

		UPDATE STG_DRAFT_CLAIM
	   SET
		  ERROR_STATUS = 'N',
		  ERROR_CODE = v_error_code
		WHERE
		  ID = EACH_REC.ID;
	END IF;

    v_loop_count := v_loop_count + 1;

    IF v_loop_count = 10 THEN

      COMMIT;
      v_loop_count := 0; -- Initialize the count size
    END IF;

  END LOOP;

    BEGIN
     FOR EACH_DUP_REC IN DUP_REC
      LOOP
        UPDATE STG_DRAFT_CLAIM
        SET ERROR_STATUS    = 'N',
          ERROR_CODE        = 'Field modification code is duplicate for same Serial Number'
        WHERE serial_number = EACH_DUP_REC.serial_number
        AND campaign_code   = EACH_DUP_REC.campaign_code;
      END LOOP;
    END;

    IF v_loop_count > 0 THEN
        COMMIT;
    END IF;

  BEGIN



    SELECT DISTINCT file_upload_mgt_id 
    INTO v_file_upload_mgt_id
    FROM STG_DRAFT_CLAIM 
    WHERE ROWNUM < 2;


    BEGIN
      SELECT count(*)
      INTO v_success_count
      FROM STG_DRAFT_CLAIM 
      where file_upload_mgt_id = v_file_upload_mgt_id and error_status = 'Y';
    EXCEPTION
    WHEN OTHERS THEN
      v_success_count := 0;
    END;


    BEGIN
      SELECT count(*)
      INTO v_error_count
      FROM STG_DRAFT_CLAIM 
      where file_upload_mgt_id = v_file_upload_mgt_id and error_status = 'N';
    EXCEPTION
    WHEN OTHERS THEN
      v_error_count := 0;
    END;


    SELECT count(*)
    INTO v_count
    FROM STG_DRAFT_CLAIM 
    where file_upload_mgt_id = v_file_upload_mgt_id ;

    UPDATE FILE_UPLOAD_MGT 
    SET 
      SUCCESS_RECORDS= v_success_count, 
      ERROR_RECORDS= v_error_count,
      TOTAL_RECORDS = v_count
    WHERE ID = v_file_upload_mgt_id;

  EXCEPTION
  WHEN OTHERS THEN

    v_error := SUBSTR(SQLERRM, 1, 4000);
    UPDATE FILE_UPLOAD_MGT 
    SET 
      ERROR_MESSAGE = v_error
    WHERE ID = v_file_upload_mgt_id;

  END;
  COMMIT; -- Final Commit for the procedure

END UPLOAD_DRAFT_CLAIM_VALIDATION;
 INFO 09-Aug-12 19:02:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 10-Aug-12 11:51:31 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 10-Aug-12 11:51:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





ALTER TABLE warranty
DROP CONSTRAINT WARRANTY_CUSTOMER_FK

 INFO 10-Aug-12 11:51:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 10-Aug-12 11:51:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

ALTER TABLE warranty ADD(CONSTRAINT "WNTY_CUSTOMER_FK" FOREIGN KEY ("CUSTOMER") REFERENCES PARTY("ID"))

 INFO 10-Aug-12 11:51:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 16-Aug-12 14:58:59 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 16-Aug-12 14:58:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





ALTER TABLE PART_RETURN_DEFINITION ADD STATUS VARCHAR2(20)

 INFO 16-Aug-12 14:59:00 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 16-Aug-12 14:59:00 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

UPDATE PART_RETURN_DEFINITION SET STATUS = 'ACTIVE' WHERE STATUS IS NULL AND D_ACTIVE = 1

 INFO 16-Aug-12 14:59:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 16-Aug-12 14:59:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

COMMIT

 INFO 16-Aug-12 14:59:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 16-Aug-12 14:59:41 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 16-Aug-12 14:59:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





ALTER TABLE CLAIM_AUDIT ADD (
"WORK_ORDER_NUMBER"           VARCHAR2(255 CHAR),
"FAILURE_DATE" DATE,
"REPAIR_DATE" DATE,
"INSTALLATION_DATE" DATE,
"PURCHASE_DATE" DATE,
"STATE"                          VARCHAR2(255 CHAR),
"SERVICE_INFORMATION"            NUMBER(19,0),
"PROBABLE_CAUSE"            VARCHAR2(4000 CHAR),
"WORK_PERFORMED"            VARCHAR2(4000 CHAR),
"OTHER_COMMENTS"            VARCHAR2(4000 CHAR),
"CONDITION_FOUND"           VARCHAR2(4000 CHAR),
"INTERNAL_COMMENT"          VARCHAR2(4000 BYTE),
"EXTERNAL_COMMENT"          VARCHAR2(4000 BYTE),
"SERVICE_MANAGER_ACCEPTED"       NUMBER(1,0),
"ACCEPTANCE_REASON"              NUMBER(19,0),    
"ACCEPTANCE_REASON_FOR_CP"       NUMBER(19,0),
"REJECTION_REASON"               NUMBER(19,0),
"ACCOUNTABILITY_CODE"            NUMBER(19,0),
"TRAVEL_HRS_CONFIG"              NUMBER(1,0),
"TRAVEL_TRIP_CONFIG"             NUMBER(1,0),
"TRAVEL_DIS_CONFIG"              NUMBER(1,0),
"OEM_CONFIG"                     NUMBER(1,0),
"NON_OEM_CONFIG"                 NUMBER(1,0),
"MISC_PARTS_CONFIG"              NUMBER(1,0),
"MEALS_CONFIG"                   NUMBER(1,0),
"PARKING_CONFIG"                 NUMBER(1,0),
"ITEM_DUTY_CONFIG"               NUMBER(1,0),
"LABOR_CONFIG"                   NUMBER(1,0),
"CP_REVIEWED"                    NUMBER(1,0),
"PER_DIEM_CONFIG"                NUMBER(1,0),
"RENTAL_CHARGES_CONFIG"          NUMBER(1,0),
"ADDITIONAL_TRAVEL_HOURS_CONFIG" NUMBER(1,0),
"LOCAL_PURCHASE_CONFIG"          NUMBER(1,0),
"TOLLS_CONFIG"                   NUMBER(1,0),
"OTHER_FREIGHT_DUTY_CONFIG"      NUMBER(1,0),
 "OTHERS_CONFIG"                 NUMBER(1,0),
 "INVOICE_NUMBER"                VARCHAR2(50 BYTE),
 "SELLING_ENTITY"                NUMBER(19,0),
 "OWNER_INFORMATION"             NUMBER,
 "CLAIM_PROCESSED_AS"            VARCHAR2(255 BYTE),
 "ASSIGN_TO_USER"                NUMBER(19,0),

CONSTRAINT "CLAIMAUD_SERVICEINFO_FK" FOREIGN KEY ("SERVICE_INFORMATION") REFERENCES "SERVICE_INFORMATION" ("ID"),
CONSTRAINT "CLAIMAUD_ACCEPTANCEREASON_FK" FOREIGN KEY ("ACCEPTANCE_REASON") REFERENCES "LIST_OF_VALUES" ("ID") ,
CONSTRAINT "CLAIMAUD_ACCREASONFORCP_FK" FOREIGN KEY ("ACCEPTANCE_REASON_FOR_CP") REFERENCES "LIST_OF_VALUES" ("ID") ,
CONSTRAINT "CLAIMAUD_REJECTIONREASON_FK" FOREIGN KEY ("REJECTION_REASON") REFERENCES "LIST_OF_VALUES" ("ID") ,
CONSTRAINT "CLAIMAUD_ACCOUNTCODE_FK" FOREIGN KEY ("ACCOUNTABILITY_CODE") REFERENCES "LIST_OF_VALUES" ("ID") ,
CONSTRAINT "CLAIMAUD_SELL_ENTITY_FK" FOREIGN KEY ("SELLING_ENTITY") REFERENCES "LIST_OF_VALUES" ("ID") ,
CONSTRAINT "CLAIMAUD_OWNER_INFO_FK" FOREIGN KEY ("OWNER_INFORMATION") REFERENCES "ADDRESS" ("ID") ,
CONSTRAINT "CLAIMAUD_ASSIGNTOUSER_FK" FOREIGN KEY ("ASSIGN_TO_USER") REFERENCES "ORG_USER" ("ID") )

ERROR 16-Aug-12 14:59:41 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00904: "LAST_UPDATED_BY": invalid identifier

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00904: "LAST_UPDATED_BY": invalid identifier

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00904: "LAST_UPDATED_BY": invalid identifier

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:582)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1986)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1144)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2152)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:2035)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2876)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:945)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 16-Aug-12 14:59:41 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 16-Aug-12 14:59:41 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 16-Aug-12 15:02:03 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 16-Aug-12 15:02:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





ALTER TABLE CLAIM_AUDIT ADD (
"WORK_ORDER_NUMBER"           VARCHAR2(255 CHAR),
"FAILURE_DATE" DATE,
"REPAIR_DATE" DATE,
"INSTALLATION_DATE" DATE,
"PURCHASE_DATE" DATE,
"STATE"                          VARCHAR2(255 CHAR),
"SERVICE_INFORMATION"            NUMBER(19,0),
"PROBABLE_CAUSE"            VARCHAR2(4000 CHAR),
"WORK_PERFORMED"            VARCHAR2(4000 CHAR),
"OTHER_COMMENTS"            VARCHAR2(4000 CHAR),
"CONDITION_FOUND"           VARCHAR2(4000 CHAR),
"INTERNAL_COMMENT"          VARCHAR2(4000 BYTE),
"EXTERNAL_COMMENT"          VARCHAR2(4000 BYTE),
"SERVICE_MANAGER_ACCEPTED"       NUMBER(1,0),
"ACCEPTANCE_REASON"              NUMBER(19,0),    
"ACCEPTANCE_REASON_FOR_CP"       NUMBER(19,0),
"REJECTION_REASON"               NUMBER(19,0),
"ACCOUNTABILITY_CODE"            NUMBER(19,0),
"TRAVEL_HRS_CONFIG"              NUMBER(1,0),
"TRAVEL_TRIP_CONFIG"             NUMBER(1,0),
"TRAVEL_DIS_CONFIG"              NUMBER(1,0),
"OEM_CONFIG"                     NUMBER(1,0),
"NON_OEM_CONFIG"                 NUMBER(1,0),
"MISC_PARTS_CONFIG"              NUMBER(1,0),
"MEALS_CONFIG"                   NUMBER(1,0),
"PARKING_CONFIG"                 NUMBER(1,0),
"ITEM_DUTY_CONFIG"               NUMBER(1,0),
"LABOR_CONFIG"                   NUMBER(1,0),
"CP_REVIEWED"                    NUMBER(1,0),
"PER_DIEM_CONFIG"                NUMBER(1,0),
"RENTAL_CHARGES_CONFIG"          NUMBER(1,0),
"ADDITIONAL_TRAVEL_HOURS_CONFIG" NUMBER(1,0),
"LOCAL_PURCHASE_CONFIG"          NUMBER(1,0),
"TOLLS_CONFIG"                   NUMBER(1,0),
"OTHER_FREIGHT_DUTY_CONFIG"      NUMBER(1,0),
 "OTHERS_CONFIG"                 NUMBER(1,0),
 "INVOICE_NUMBER"                VARCHAR2(50 BYTE),
 "SELLING_ENTITY"                NUMBER(19,0),
 "OWNER_INFORMATION"             NUMBER,
 "CLAIM_PROCESSED_AS"            VARCHAR2(255 BYTE),
 "ASSIGN_TO_USER"                NUMBER(19,0),

CONSTRAINT "CLAIMAUD_SERVICEINFO_FK" FOREIGN KEY ("SERVICE_INFORMATION") REFERENCES "SERVICE_INFORMATION" ("ID"),
CONSTRAINT "CLAIMAUD_ACCEPTANCEREASON_FK" FOREIGN KEY ("ACCEPTANCE_REASON") REFERENCES "LIST_OF_VALUES" ("ID") ,
CONSTRAINT "CLAIMAUD_ACCREASONFORCP_FK" FOREIGN KEY ("ACCEPTANCE_REASON_FOR_CP") REFERENCES "LIST_OF_VALUES" ("ID") ,
CONSTRAINT "CLAIMAUD_REJECTIONREASON_FK" FOREIGN KEY ("REJECTION_REASON") REFERENCES "LIST_OF_VALUES" ("ID") ,
CONSTRAINT "CLAIMAUD_ACCOUNTCODE_FK" FOREIGN KEY ("ACCOUNTABILITY_CODE") REFERENCES "LIST_OF_VALUES" ("ID") ,
CONSTRAINT "CLAIMAUD_SELL_ENTITY_FK" FOREIGN KEY ("SELLING_ENTITY") REFERENCES "LIST_OF_VALUES" ("ID") ,
CONSTRAINT "CLAIMAUD_OWNER_INFO_FK" FOREIGN KEY ("OWNER_INFORMATION") REFERENCES "ADDRESS" ("ID") ,
CONSTRAINT "CLAIMAUD_ASSIGNTOUSER_FK" FOREIGN KEY ("ASSIGN_TO_USER") REFERENCES "ORG_USER" ("ID") )

 INFO 16-Aug-12 15:02:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 16-Aug-12 15:02:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

CREATE TABLE CLAIM_AUDIT_RULE_FAILURES
  (
    "CLAIM_AUDIT"         NUMBER(19,0) NOT NULL ENABLE,
    "RULE_FAILURES" NUMBER(19,0) NOT NULL ENABLE,
    CONSTRAINT "CLAIM_AUD_RULE_FAIL_PK" PRIMARY KEY ("CLAIM_AUDIT", "RULE_FAILURES") ,
    CONSTRAINT "CLMAUDRULEFAIL_RULEFAIL_FK" FOREIGN KEY ("RULE_FAILURES") REFERENCES "RULE_FAILURE" ("ID") ,
    CONSTRAINT "CLAIMAUDRULEFAIL_CLAIMAUD_FK" FOREIGN KEY ("CLAIM_AUDIT") REFERENCES "CLAIM_AUDIT" ("ID") 
  )

 INFO 16-Aug-12 15:02:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 16-Aug-12 15:02:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

CREATE TABLE "CLAIM_AUDIT_ATTACHMENTS"
  (
    "CLAIM_AUDIT"       NUMBER(19,0) NOT NULL ENABLE,
    "ATTACHMENTS" NUMBER(19,0) NOT NULL ENABLE,
    CONSTRAINT "CLAIMAUDATTACH_CLAIMAUD_FK" FOREIGN KEY ("CLAIM_AUDIT") REFERENCES "CLAIM_AUDIT" ("ID") ,
    CONSTRAINT "CLMAUDATTACH_ATTACHMENTS_FK" FOREIGN KEY ("ATTACHMENTS") REFERENCES "DOCUMENT" ("ID")
  )

 INFO 16-Aug-12 15:02:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 16-Aug-12 15:02:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

CREATE TABLE "CLAIM_AUDIT_USER_PRO_COMMENTS"
  (
    "CLAIM_AUDIT"                 NUMBER(19,0) NOT NULL ENABLE,
    "USER_PROCESS_COMMENTS" NUMBER(19,0) NOT NULL ENABLE,
    CONSTRAINT "CLMAUD_USRPROCMTS_PK" PRIMARY KEY ("CLAIM_AUDIT", "USER_PROCESS_COMMENTS"),
    CONSTRAINT "CLMAUD_USRPROCMTS_CLM_FK" FOREIGN KEY ("CLAIM_AUDIT") REFERENCES "CLAIM_AUDIT" ("ID") ENABLE,
    CONSTRAINT "CLMAUD_USRPROCMTS_USRPCMTS_FK" FOREIGN KEY ("USER_PROCESS_COMMENTS") REFERENCES "USER_COMMENT" ("ID") ENABLE
  )

 INFO 16-Aug-12 15:02:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 16-Aug-12 15:02:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

ALTER TABLE CLAIM ADD(
"ACTIVE_CLAIM_AUDIT"            NUMBER(19,0),
CONSTRAINT "ACTCLMAUD_CLMAUD_FK" FOREIGN KEY ("ACTIVE_CLAIM_AUDIT") REFERENCES "CLAIM_AUDIT" ("ID") ENABLE)

 INFO 16-Aug-12 15:02:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 16-Aug-12 15:02:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

CREATE TABLE "CLAIM_AUDIT_ALARM_CODES"
  (
    "CLAIM_AUDIT"       NUMBER(19,0) NOT NULL ENABLE,
    "ALARM_CODES" NUMBER(19,0) NOT NULL ENABLE,
    CONSTRAINT "ALARMAUD_CODES_CLAIM_FK" FOREIGN KEY ("CLAIM_AUDIT") REFERENCES "CLAIM_AUDIT" ("ID") ENABLE NOVALIDATE,
    CONSTRAINT "ALARMAUD_CODES_ALARM_CODES_FK" FOREIGN KEY ("ALARM_CODES") REFERENCES "ALARM_CODE" ("ID") ENABLE NOVALIDATE
  )

 INFO 16-Aug-12 15:02:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 16-Aug-12 15:02:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

delete from default_folder_view;

ERROR 16-Aug-12 15:02:04 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00911: invalid character

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00911: invalid character

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00911: invalid character

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:582)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1986)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1144)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2152)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:2035)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2876)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:945)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 16-Aug-12 15:02:04 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 16-Aug-12 15:02:04 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 16-Aug-12 15:02:59 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 16-Aug-12 15:02:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





delete from default_folder_view

 INFO 16-Aug-12 15:02:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 16-Aug-12 15:02:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

delete from inbox_view

 INFO 16-Aug-12 15:02:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 16-Aug-12 15:02:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

commit

 INFO 16-Aug-12 15:02:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 16-Aug-12 15:02:59 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 16-Aug-12 15:02:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





declare 
cursor c1 is select * from claim where active_claim_audit is null;
v_claim_audit_id   NUMBER := 0;
begin
for each_rec in c1 loop
  begin
v_claim_audit_id := CLAIM_AUDIT_SEQ.nextval;
  insert into claim_audit values(v_claim_audit_id,null,0,null,
  null,0,0,null, null,null,sysdate, 'Added by Procedure',
  sysdate,null, sysdate, each_rec.decision, 0,
  each_rec.payment,null,each_rec.work_order_number,each_rec.last_updated_on_date,each_rec.failure_date,each_rec.repair_date,each_rec.installation_date, each_rec.purchase_date,
  each_rec.state,each_rec.service_information,each_rec.reason_for_service_mgr_req,each_rec.probable_cause,each_rec.work_performed,
  each_rec.other_comments,each_rec.condition_found,each_rec.internal_comment,each_rec.external_comment,each_rec.service_manager_accepted,
  each_rec.acceptance_reason,each_rec.acceptance_reason_for_cp,each_rec.rejection_reason,each_rec.accountability_code,each_rec.travel_hrs_config,
  each_rec.travel_trip_config,each_rec.travel_dis_config,each_rec.oem_config,each_rec.non_oem_config,each_rec.misc_parts_config,each_rec.meals_config,
  each_rec.parking_config,each_rec.item_duty_config,each_rec.labor_config,each_rec.cp_reviewed,each_rec.per_DIEM_config,each_rec.rental_charges_config,
  each_rec.additional_travel_hours_config,each_rec.local_purchase_config,each_rec.tolls_config,each_rec.other_freight_duty_config,each_rec.others_config,
  each_rec.invoice_number,each_rec.selling_entity,each_rec.owner_information,each_rec.claim_processed_as,each_rec.assign_to_user, null);

update claim set active_claim_audit=v_claim_audit_id where id=each_rec.id;
exception when others then
  dbms_output.put_line(each_rec.claim_number);
end;
end loop;
commit;
end;
ERROR 16-Aug-12 15:02:59 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-06550: line 12, column 15:
PL/SQL: ORA-00913: too many values
ORA-06550: line 12, column 3:
PL/SQL: SQL Statement ignored

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-06550: line 12, column 15:
PL/SQL: ORA-00913: too many values
ORA-06550: line 12, column 3:
PL/SQL: SQL Statement ignored

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-06550: line 12, column 15:
PL/SQL: ORA-00913: too many values
ORA-06550: line 12, column 3:
PL/SQL: SQL Statement ignored

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:582)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1986)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1144)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2152)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:2035)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2876)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:945)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 16-Aug-12 15:02:59 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 16-Aug-12 15:02:59 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 16-Aug-12 15:04:15 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 16-Aug-12 15:04:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





declare 
cursor c1 is select * from claim where active_claim_audit is null;
v_claim_audit_id   NUMBER := 0;
begin
for each_rec in c1 loop
  begin
v_claim_audit_id := CLAIM_AUDIT_SEQ.nextval;
  insert into claim_audit values(v_claim_audit_id,null,0,null,
  null,0,0,null, null,null,sysdate, 'Added by Procedure',
  sysdate,null, sysdate, each_rec.decision, 0,
  each_rec.payment,null,each_rec.work_order_number,each_rec.last_updated_on_date,each_rec.failure_date,each_rec.repair_date,each_rec.installation_date, each_rec.purchase_date,
  each_rec.state,each_rec.service_information,each_rec.reason_for_service_mgr_req,each_rec.probable_cause,each_rec.work_performed,
  each_rec.other_comments,each_rec.condition_found,each_rec.internal_comment,each_rec.external_comment,each_rec.service_manager_accepted,
  each_rec.acceptance_reason,each_rec.acceptance_reason_for_cp,each_rec.rejection_reason,each_rec.accountability_code,each_rec.travel_hrs_config,
  each_rec.travel_trip_config,each_rec.travel_dis_config,each_rec.oem_config,each_rec.non_oem_config,each_rec.misc_parts_config,each_rec.meals_config,
  each_rec.parking_config,each_rec.item_duty_config,each_rec.labor_config,each_rec.cp_reviewed,each_rec.per_DIEM_config,each_rec.rental_charges_config,
  each_rec.additional_travel_hours_config,each_rec.local_purchase_config,each_rec.tolls_config,each_rec.other_freight_duty_config,each_rec.others_config,
  each_rec.invoice_number,each_rec.selling_entity,each_rec.owner_information,each_rec.claim_processed_as,each_rec.assign_to_user, null);

update claim set active_claim_audit=v_claim_audit_id where id=each_rec.id;
exception when others then
  dbms_output.put_line(each_rec.claim_number);
end;
end loop;
commit;
end;
ERROR 16-Aug-12 15:04:15 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-06550: line 12, column 15:
PL/SQL: ORA-00913: too many values
ORA-06550: line 12, column 3:
PL/SQL: SQL Statement ignored

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-06550: line 12, column 15:
PL/SQL: ORA-00913: too many values
ORA-06550: line 12, column 3:
PL/SQL: SQL Statement ignored

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-06550: line 12, column 15:
PL/SQL: ORA-00913: too many values
ORA-06550: line 12, column 3:
PL/SQL: SQL Statement ignored

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:582)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1986)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1144)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2152)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:2035)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2876)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:945)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 16-Aug-12 15:04:15 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 16-Aug-12 15:04:15 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 16-Aug-12 15:11:50 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 16-Aug-12 15:11:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





declare 
cursor c1 is select * from claim where active_claim_audit is null;
v_claim_audit_id   NUMBER := 0;
begin
for each_rec in c1 loop
  begin
v_claim_audit_id := CLAIM_AUDIT_SEQ.nextval;
  insert into claim_audit values(v_claim_audit_id,null,0,null,
  null,0,0,null, null,null,sysdate, 'Added by Procedure',
  sysdate,null, sysdate, each_rec.decision, 0,
  each_rec.payment,null,each_rec.work_order_number,each_rec.failure_date,each_rec.repair_date,each_rec.installation_date, each_rec.purchase_date,
  each_rec.state,each_rec.service_information,each_rec.probable_cause,each_rec.work_performed,
  each_rec.other_comments,each_rec.condition_found,each_rec.internal_comment,each_rec.external_comment,each_rec.service_manager_accepted,
  each_rec.acceptance_reason,each_rec.acceptance_reason_for_cp,each_rec.rejection_reason,each_rec.accountability_code,each_rec.travel_hrs_config,
  each_rec.travel_trip_config,each_rec.travel_dis_config,each_rec.oem_config,each_rec.non_oem_config,each_rec.misc_parts_config,each_rec.meals_config,
  each_rec.parking_config,each_rec.item_duty_config,each_rec.labor_config,each_rec.cp_reviewed,each_rec.per_DIEM_config,each_rec.rental_charges_config,
  each_rec.additional_travel_hours_config,each_rec.local_purchase_config,each_rec.tolls_config,each_rec.other_freight_duty_config,each_rec.others_config,
  each_rec.invoice_number,each_rec.selling_entity,each_rec.owner_information,each_rec.claim_processed_as,each_rec.assign_to_user);

update claim set active_claim_audit=v_claim_audit_id where id=each_rec.id;
exception when others then
  dbms_output.put_line(each_rec.claim_number);
end;
end loop;
commit;
end;
 INFO 16-Aug-12 15:14:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Aug-12 18:11:40 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Aug-12 18:11:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





CREATE TABLE CAMP_NOTIFICATION_ATTACHMENTS
  (
   CAMPAIGN_NOTIFICATION    NUMBER(19,0) NOT NULL ENABLE,
   ATTACHMENTS NUMBER(19,0) NOT NULL ENABLE,
  )

ERROR 17-Aug-12 18:11:40 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00904: : invalid identifier

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00904: : invalid identifier

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00904: : invalid identifier

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:582)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1986)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1144)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2152)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:2035)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2876)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:945)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 17-Aug-12 18:11:40 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 17-Aug-12 18:11:40 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 17-Aug-12 18:13:10 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Aug-12 18:13:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





CREATE TABLE CAMP_NOTIFICATION_ATTACHMENTS
  (
   CAMPAIGN_NOTIFICATION    NUMBER(19,0) NOT NULL ENABLE,
   ATTACHMENTS NUMBER(19,0) NOT NULL ENABLE
  )

 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

ALTER TABLE CAMP_NOTIFICATION_ATTACHMENTS ADD CONSTRAINT CAMPATTACHMENTS_CAMPNOTE_FK FOREIGN KEY
  (
   CAMPAIGN_NOTIFICATION
  )
  REFERENCES CAMPAIGN_NOTIFICATION
  (
   ID
  )
  ENABLE

 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

ALTER TABLE CAMP_NOTIFICATION_ATTACHMENTS ADD CONSTRAINT CAMPNOTE_ATTACHMNTS_FK FOREIGN KEY
  (
    ATTACHMENTS
  )
  REFERENCES DOCUMENT
  (
   ID
  )
  ENABLE

 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

CREATE INDEX CAMPMOTEATTACHMENTS_CAMPG_IX ON CAMP_NOTIFICATION_ATTACHMENTS
  (
   CAMPAIGN_NOTIFICATION
  )

 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





CREATE TABLE FIELD_MOD_UPDATE_AUDIT
  (
    ID                    NUMBER(19, 0) NOT NULL ,
    COMMENTS              VARCHAR2(4000 CHAR),
    ACTION_TAKEN          VARCHAR2(50 CHAR) ,
    FOR_FIELD_MOD          NUMBER(19, 0) NOT NULL ,
    LIST_INDEX            NUMBER(3, 0) ,
    D_CREATED_ON          DATE ,
    D_UPDATED_ON          DATE ,
    D_CREATED_TIME        DATE ,
    D_UPDATED_TIME        DATE ,
    D_INTERNAL_COMMENTS VARCHAR2(255 CHAR) ,
    VERSION             NUMBER(10, 0) NOT NULL ,
    D_LAST_UPDATED_BY   NUMBER(19, 0) ,
    D_ACTIVE            NUMBER(1, 0),
	INACTIVE_REASON     VARCHAR2(4000 CHAR)
  )

 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

ALTER TABLE FIELD_MOD_UPDATE_AUDIT ADD CONSTRAINT FK_FOR_FIELD_MOD FOREIGN KEY
  (
    FOR_FIELD_MOD
  )
  REFERENCES CAMPAIGN_NOTIFICATION
  (
    ID
  )
  ENABLE

 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

CREATE SEQUENCE Field_MOD_AUDIT_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 20 START WITH 100000000000000 CACHE 20 NOORDER NOCYCLE

 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 





ALTER TABLE campaign_notification ADD (COMMENTS VARCHAR2(4000 CHAR),STATUS VARCHAR2(32 CHAR),CAMPAIGN_STATUS VARCHAR2(255 CHAR))

 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

INSERT INTO inventory_item_condition (ITEM_CONDITION, version, d_created_on,d_internal_comments,d_updated_on,
 d_created_time, d_updated_time,d_active) 
 VALUES('CONSIGNMENT',1,SYSDATE,'Doosan TWMS',SYSDATE,SYSDATE,SYSDATE,1)

 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

commit

 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 17-Aug-12 18:13:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

create or replace
TRIGGER UPDATE_INV_HRSINSERVICE
AFTER INSERT OR UPDATE
ON CLAIM
REFERENCING NEW AS newRow
FOR EACH ROW
DECLARE
  v_item_hrs INVENTORY_ITEM.HOURS_ON_MACHINE%TYPE;
  V_CLAIMED_ITEM_HRS CLAIMED_ITEM.HOURS_IN_SERVICE%TYPE;
  V_ACTIVE_CLM_ADT_STATE varchar2(100);
CURSOR itemIds IS
            SELECT ITEM_REF_INV_ITEM  FROM CLAIMED_ITEM WHERE CLAIM= :newRow.id and item_ref_szed=1;

begin
select state into V_ACTIVE_CLM_ADT_STATE from CLAIM_AUDIT where id = :newRow.active_claim_audit;
 IF(V_ACTIVE_CLM_ADT_STATE='ACCEPTED') THEN
BEGIN
	FOR REC IN itemIds LOOP
	SELECT HOURS_ON_MACHINE INTO v_item_hrs FROM INVENTORY_ITEM WHERE id=REC. ITEM_REF_INV_ITEM;
	SELECT  HOURS_IN_SERVICE  INTO v_claimed_item_hrs FROM CLAIMED_ITEM WHERE CLAIM=:newRow.id AND ITEM_REF_INV_ITEM=REC. ITEM_REF_INV_ITEM;
	IF(	v_claimed_item_hrs>v_item_hrs) THEN

		UPDATE INVENTORY_ITEM
		SET  HOURS_ON_MACHINE= v_claimed_item_hrs
		WHERE id=REC. ITEM_REF_INV_ITEM;

		UPDATE INVENTORY_TRANSACTION A
		SET HOURS_ON_MACHINE=v_claimed_item_hrs
		WHERE TRANSACTION_ORDER = (SELECT MAX(TRANSACTION_ORDER) FROM INVENTORY_TRANSACTION WHERE
		TRANSACTED_ITEM = REC.ITEM_REF_INV_ITEM)
		and a.TRANSACTED_ITEM = REC.ITEM_REF_INV_ITEM;
	end if ;
	end LOOP;
END;
END IF;
END;
 INFO 17-Aug-12 18:13:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 21-Aug-12 16:45:08 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 21-Aug-12 16:45:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 




delete from config_param_options_mapping where param_id in(select id from config_param where display_name ='Customer Types Displayed in ETR') 
and option_id in (select  id from config_param_option where value = 'Dealer Rental')

 INFO 21-Aug-12 16:45:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 21-Aug-12 16:45:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

delete from config_value where config_param in(select id from config_param where display_name ='Customer Types Displayed in ETR') and config_param_option in(select  id from config_param_option where value = 'Dealer Rental')

 INFO 21-Aug-12 16:45:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 21-Aug-12 16:45:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_QA***..... 

commit

 INFO 21-Aug-12 16:45:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 12:25:29 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 12:25:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





INSERT
INTO CONFIG_PARAM
  (
    ID,
    DESCRIPTION,
    DISPLAY_NAME,
    NAME,
    TYPE,
    D_CREATED_ON,
    D_INTERNAL_COMMENTS,
    D_UPDATED_ON,
    D_LAST_UPDATED_BY,
    D_CREATED_TIME,
    D_UPDATED_TIME,
    LOGICAL_GROUP,
    PARAM_DISPLAY_TYPE,
    LOGICAL_GROUP_ORDER,
    SECTIONS,
    SECTIONS_ORDER,
    PARAM_ORDER,
    d_active
  )
  VALUES
  (
    config_param_seq.NEXTVAL,
    'Allow the warranty admin to Create/Modify Fault code',
    'Allow the warranty admin to Create/Modify Fault code',
    'allowCreateModifyFaultCode',
    'boolean',
    sysdate,
    'Doosan-Heavy-Configuration',
    sysdate,
    NULL,
    systimestamp,
    systimestamp,
    'CLAIMS',
    'radio',
    1,
    'CLAIM_INPUT_PARAMETERS',
    1,1,1
  )

ERROR 22-Aug-12 12:25:29 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00001: unique constraint (TWMS_OWNER.CONFIG_PARAM_PK) violated

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00001: unique constraint (TWMS_OWNER.CONFIG_PARAM_PK) violated

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00001: unique constraint (TWMS_OWNER.CONFIG_PARAM_PK) violated

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:582)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1986)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1144)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2152)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:2035)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2876)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:945)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-Aug-12 12:25:29 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-Aug-12 12:25:29 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





INSERT
INTO CONFIG_PARAM
  (
    ID,
    DESCRIPTION,
    DISPLAY_NAME,
    NAME,
    TYPE,
    D_CREATED_ON,
    D_INTERNAL_COMMENTS,
    D_UPDATED_ON,
    D_LAST_UPDATED_BY,
    D_CREATED_TIME,
    D_UPDATED_TIME,
    LOGICAL_GROUP,
    PARAM_DISPLAY_TYPE,
    LOGICAL_GROUP_ORDER,
    SECTIONS,
    SECTIONS_ORDER,
    PARAM_ORDER,
    d_active
  )
  VALUES
  (
    config_param_seq.NEXTVAL,
    'Allow the warranty admin to Create/Modify Fault code',
    'Allow the warranty admin to Create/Modify Fault code',
    'allowCreateModifyFaultCode',
    'boolean',
    sysdate,
    'Doosan-Heavy-Configuration',
    sysdate,
    NULL,
    systimestamp,
    systimestamp,
    'CLAIMS',
    'radio',
    1,
    'CLAIM_INPUT_PARAMETERS',
    1,1,1
  )

 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT
INTO CONFIG_PARAM_OPTIONS_MAPPING
  (
    ID,
    PARAM_ID,
    OPTION_ID
  )
  VALUES
  (
    CFG_PARAM_OPTNS_MAPPING_SEQ.NEXTVAL,
    (SELECT id FROM config_param WHERE name='allowCreateModifyFaultCode'
    ),
    (SELECT id FROM config_param_option WHERE value='true'
    )
  )

 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT
INTO CONFIG_PARAM_OPTIONS_MAPPING
  (
    ID,
    PARAM_ID,
    OPTION_ID
  )
  VALUES
  (
    CFG_PARAM_OPTNS_MAPPING_SEQ.NEXTVAL,
    (SELECT id FROM config_param WHERE name='allowCreateModifyFaultCode'
    ),
    (SELECT ID FROM CONFIG_PARAM_OPTION WHERE VALUE='false'
    )
  )

 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT
INTO CONFIG_PARAM
  (
    ID,
    DESCRIPTION,
    DISPLAY_NAME,
    NAME,
    TYPE,
    D_CREATED_ON,
    D_INTERNAL_COMMENTS,
    D_UPDATED_ON,
    D_LAST_UPDATED_BY,
    D_CREATED_TIME,
    D_UPDATED_TIME,
    LOGICAL_GROUP,
    PARAM_DISPLAY_TYPE,
    LOGICAL_GROUP_ORDER,
    SECTIONS,
    SECTIONS_ORDER,
    PARAM_ORDER,
    d_active
  )
  VALUES
  (
    config_param_seq.NEXTVAL,
    'Allow the warranty admin to Create/Modify Fault found/Caused by',
    'Allow the warranty admin to Create/Modify Fault found/Caused by',
    'allowCreateModifyFaultFoundCausedBy',
    'boolean',
    sysdate,
    'Doosan-Heavy-Configuration',
    sysdate,
    NULL,
    systimestamp,
    systimestamp,
    'CLAIMS',
    'radio',
    1,
    'CLAIM_INPUT_PARAMETERS',
    1,1,1
  )

 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT
INTO CONFIG_PARAM_OPTIONS_MAPPING
  (
    ID,
    PARAM_ID,
    OPTION_ID
  )
  VALUES
  (
    CFG_PARAM_OPTNS_MAPPING_SEQ.NEXTVAL,
    (SELECT id FROM config_param WHERE name='allowCreateModifyFaultFoundCausedBy'
    ),
    (SELECT id FROM config_param_option WHERE value='true'
    )
  )

 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT
INTO CONFIG_PARAM_OPTIONS_MAPPING
  (
    ID,
    PARAM_ID,
    OPTION_ID
  )
  VALUES
  (
    CFG_PARAM_OPTNS_MAPPING_SEQ.NEXTVAL,
    (SELECT id FROM config_param WHERE name='allowCreateModifyFaultFoundCausedBy'
    ),
    (SELECT ID FROM CONFIG_PARAM_OPTION WHERE VALUE='false'
    )
  )

 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

commit

 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





CREATE TABLE CAMPAIGN_LABELS
(
    CAMPAIGN NUMBER(19,0) NOT NULL ENABLE,
    LABELS   VARCHAR2(255 CHAR) NOT NULL ENABLE,
    CONSTRAINT CAMPLABELS_LABELS_FK FOREIGN KEY (LABELS) REFERENCES LABEL (NAME) ENABLE,
    CONSTRAINT CAMPLABELS_CAMPAIGN_FK FOREIGN KEY (CAMPAIGN) REFERENCES CAMPAIGN (ID) ENABLE
)

 INFO 22-Aug-12 13:06:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:38 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





ALTER TABLE CLAIM ADD SUPPLIERS NUMBER(19,0)

 INFO 22-Aug-12 13:06:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE CLAIM ADD SUPPLIER_RECOVERY NUMBER(1,0)

 INFO 22-Aug-12 13:06:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE CLAIM ADD CONSTRAINT "CLM_SUPPLIERS_FK" FOREIGN KEY ("SUPPLIERS") REFERENCES "LIST_OF_VALUES" ("ID") ENABLE

 INFO 22-Aug-12 13:06:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:39 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:39 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

 



alter table  inventory_item drop column field_mod_inv_status

 INFO 22-Aug-12 13:06:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:41 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





drop table PARTS_UPLOAD_EMAIL

 INFO 22-Aug-12 13:06:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

drop table PARTS_UPLOAD

 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

drop table PART_INVENTORY_SEARCH_REPORT

 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

drop table PART_INVENTORY

 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

drop sequence PARTS_UPLOAD_EMAIL_SEQ

 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

drop sequence PARTS_UPLOAD_SEQ

 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

drop sequence PART_INV_SEARCH_REPORT_SEQ

 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

drop sequence Part_Inventory_SEQ

 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





drop table REMOTE_INTERACTION

 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





ALTER TABLE POLICY_DEFINITION ADD MONTHS_FROM_BUILD_DATE  NUMBER(19,0)

 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE POLICY_DEFINITION ADD MONTHS_FRM_ORGNL_DELIVERY  NUMBER(19,0) 

 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 



ALTER TABLE WARRANTY ADD  CUSTOMER_ADDRESS number(19,0) NULL

 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE WARRANTY ADD CONSTRAINT WARRANTY_ADDRESS FOREIGN KEY (CUSTOMER_ADDRESS) REFERENCES ADDRESS (ID) ENABLE

 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE inventory_item add ("BILL_TO"  number(19,0))

 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE inventory_item add (CONSTRAINT "BILL_TO_FK" FOREIGN KEY ("BILL_TO") REFERENCES ORGANIZATION ("ID"))

 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO role (id, name, version,d_created_on,d_internal_comments,
d_updated_on, d_created_time,d_updated_time,d_active,display_name,role_type)
VALUES(role_group_seq.nextval,'enterpriseDealership',0,SYSDATE,'Enterprise Dealership Access |APPLICATION',SYSDATE,
SYSDATE,SYSDATE,1,'Enterprise Dealership','APPLICATION')

 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

commit

 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





ALTER TABLE CAMPAIGN_NOTIFICATION ADD (FIELD_MOD_INV_STATUS NUMBER(19,0))

 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE CAMPAIGN_NOTIFICATION ADD CONSTRAINT CAMP_FieldMODINVSTATUS_FK FOREIGN KEY (FIELD_MOD_INV_STATUS) REFERENCES LIST_OF_VALUES (ID) ENABLE

 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE INDEX invitem_bill_to_idx
  ON inventory_item (
    bill_to
  )

 INFO 22-Aug-12 13:06:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





CREATE SEQUENCE MST_ADMIN_FNC_AREA_SEQ
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  INCREMENT BY 1
  NOCYCLE
  NOORDER
  CACHE 20

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

  CREATE SEQUENCE MST_ADMIN_SUBJECT_AREA_SEQ
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  INCREMENT BY 1
  NOCYCLE
  NOORDER
  CACHE 20

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE TABLE MST_ADMIN_FNC_AREA (ID NUMBER(19),NAME VARCHAR2(50), DESCRIPTION VARCHAR2(200),CONSTRAINT  MST_ADMIN_FNC_AREA_PK  PRIMARY KEY(ID))

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE TABLE MST_ADMIN_SUBJECT_AREA (ID NUMBER(19),NAME VARCHAR2(50), DESCRIPTION VARCHAR2(200),CONSTRAINT  MST_ADMIN_SUBJECT_AREA_PK  PRIMARY KEY(ID))

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE TABLE MST_ADMIN_ACTION (ID NUMBER(19),ACTION VARCHAR2(50), DESCRIPTION VARCHAR2(200),CONSTRAINT  MST_ADMIN_ACTION_PK  PRIMARY KEY(ID))

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE TABLE SUBJECT_FUNC_AREA_MAPPING (FUNCTIONAL_AREA NUMBER(19) NOT NULL,SUBJECT_AREA NUMBER(19) NOT NULL , CONSTRAINT SUBJECT_FUNC_AREA_MAPPING_PK PRIMARY KEY (FUNCTIONAL_AREA,SUBJECT_AREA) ENABLE )

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE SUBJECT_FUNC_AREA_MAPPING ADD CONSTRAINT SUBJ_FUNC_MAP_FUNC_ID FOREIGN KEY(FUNCTIONAL_AREA) REFERENCES MST_ADMIN_FNC_AREA(ID)

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE SUBJECT_FUNC_AREA_MAPPING ADD CONSTRAINT SUBJ_FUNC_MAP_SUBJ_ID FOREIGN KEY(SUBJECT_AREA) REFERENCES MST_ADMIN_SUBJECT_AREA(ID)

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE SEQUENCE  "ROLE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 20 START WITH 1000 NOCACHE  NOORDER  NOCYCLE 

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE ROLE ADD (DESCRIPTION VARCHAR2(50))

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE TABLE ROLE_PERMISSION_MAPPING (ID NUMBER(19),ROLE_DEF_ID NUMBER(19) NOT NULL,FUNCTIONAL_AREA NUMBER(19) NOT NULL,
ACTION NUMBER(19) NOT NULL,CONSTRAINT  ROLE_PERMISSION_MAPPING_PK  PRIMARY KEY(ID))

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE SEQUENCE  "ROLE_PERMISSION_MAPPING_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 20 START WITH 1000 NOCACHE  NOORDER  NOCYCLE

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE ROLE_PERMISSION_MAPPING ADD CONSTRAINT ROLE_PERM_MAP_ROLE_FK FOREIGN KEY(ROLE_DEF_ID) REFERENCES ROLE(ID)

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE ROLE_PERMISSION_MAPPING ADD CONSTRAINT ROLE_PERM_MAP_FNC_AREA_FK FOREIGN KEY(FUNCTIONAL_AREA) REFERENCES MST_ADMIN_FNC_AREA(ID)

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE ROLE_PERMISSION_MAPPING ADD CONSTRAINT ROLE_PERM_MAP_ACTION_FK FOREIGN KEY(ACTION) REFERENCES MST_ADMIN_ACTION(ID)

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE ROLE_PERMISSION_MAPPING ADD (SUBJECT_AREA NUMBER(19))

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE ROLE_PERMISSION_MAPPING ADD PERMISSION_STRING VARCHAR2(255)

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





Insert into MST_ADMIN_ACTION (ACTION,DESCRIPTION,ID) values ('view','View',1)

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

Insert into MST_ADMIN_ACTION (ACTION,DESCRIPTION,ID) values ('create','Create',2)

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

Insert into MST_ADMIN_ACTION (ACTION,DESCRIPTION,ID) values ('delete','Delete',3)

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

Insert into MST_ADMIN_ACTION (ACTION,DESCRIPTION,ID) values ('update','Update',4)

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

Insert into MST_ADMIN_ACTION (ACTION,DESCRIPTION,ID) values ('search','search',5)

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO MST_ADMIN_SUBJECT_AREA VALUES (MST_ADMIN_SUBJECT_AREA_SEQ.nextval,'buConfigurations','BU Configurations')

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES (MST_ADMIN_FNC_AREA_SEQ.nextval,'buConfigurationsSetup','BU Configurations Setup')

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING (FUNCTIONAL_AREA,SUBJECT_AREA) VALUES ((SELECT ID FROM MST_ADMIN_FNC_AREA WHERE NAME='buConfigurationsSetup'),
(SELECT ID FROM MST_ADMIN_SUBJECT_AREA WHERE NAME='buConfigurations'))

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO ROLE_PERMISSION_MAPPING(ROLE_DEF_ID, ACTION ,FUNCTIONAL_AREA, ID , SUBJECT_AREA) 
VALUES ( (SELECT ID FROM ROLE WHERE NAME ='admin'),(SELECT ID FROM MST_ADMIN_ACTION WHERE action = 'update'), 
(SELECT ID FROM MST_ADMIN_FNC_AREA WHERE NAME='buConfigurationsSetup'), ROLE_PERMISSION_MAPPING_SEQ.NEXTVAL ,
(SELECT ID FROM MST_ADMIN_SUBJECT_AREA WHERE NAME='buConfigurations'))

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

UPDATE ROLE_PERMISSION_MAPPING A SET A.PERMISSION_STRING = (SELECT NAME FROM mst_admin_subject_area WHERE ID = A.subject_area ) || ':' ||
(SELECT NAME FROM mst_admin_fnc_area WHERE ID = A.FUNCTIONAL_AREA) || ':' || (SELECT T.ACTION FROM mst_admin_action T WHERE ID = A.ACTION)

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

COMMIT

 INFO 22-Aug-12 13:06:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:46 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:46 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create or replace
PACKAGE BODY COMMON_VALIDATION_UTILS AS 

  FUNCTION getValidBusinessUnitName(p_business_unit_name VARCHAR2)
  RETURN VARCHAR2
  IS
  v_business_unit_name VARCHAR2(255) := NULL;
  BEGIN

    SELECT NAME 
    INTO v_business_unit_name
    FROM business_unit
    WHERE 
    lower(name) = lower(p_business_unit_name) AND ROWNUM = 1;
    RETURN v_business_unit_name;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN NULL;
  END getValidBusinessUnitName;


  FUNCTION isValidBusinessUnitName(p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_business_unit_name VARCHAR2(255) := NULL;
  BEGIN

    SELECT NAME 
    INTO v_business_unit_name
    FROM business_unit
    WHERE 
    lower(name) = lower(p_business_unit_name) AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidBusinessUnitName;

  FUNCTION isUserBelongsToBU(p_business_unit_name VARCHAR2, p_user_login VARCHAR2)
  RETURN BOOLEAN
  IS
  v_business_unit_name VARCHAR2(255) := NULL;
  BEGIN
    SELECT bum.bu
    INTO v_business_unit_name
    FROM org_user u, bu_user_mapping bum
    WHERE 
	lower(bum.bu) = lower(p_business_unit_name)
	AND u.login=p_user_login 
	AND u.id=bum.org_user 
	AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isUserBelongsToBU;


  FUNCTION isValidModel(p_model VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_model VARCHAR2(255) := NULL;
  BEGIN

    SELECT NAME 
    INTO v_model
    FROM item_group
    WHERE 
    lower(name) = lower(ltrim(rtrim(p_model))) 
    and lower(business_unit_info) = lower(p_business_unit_name)
    and item_group_type = 'MODEL' and d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidModel;


 FUNCTION isValidProductCode(p_product_code VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_product_code NUMBER := NULL;
  BEGIN

    SELECT id
    INTO v_product_code
    FROM item_group
    WHERE 
    lower(name) = lower(ltrim(rtrim(p_product_code))) 
    and lower(business_unit_info) = lower(p_business_unit_name)
    and item_group_type = 'PRODUCT' and d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidProductCode;


  FUNCTION isValidModelForProduct(p_model VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_model VARCHAR2(255) := NULL;
  BEGIN

    SELECT m.NAME 
    INTO v_model
    FROM item_group m,item_group p1,item_group p2
    WHERE 
    lower(m.name) = lower(ltrim(rtrim(p_model))) 
    and (lower(p1.name) = lower(ltrim(rtrim(p_product))) and p1.item_group_type='PRODUCT'
      or lower(p2.name) = lower(ltrim(rtrim(p_product))) and p1.item_group_type='PRODUCT')
    and lower(m.business_unit_info) = lower(p_business_unit_name)
    and lower(p1.business_unit_info) = lower(p_business_unit_name)
    and lower(p2.business_unit_info) = lower(p_business_unit_name)
    and m.is_part_of=p1.id and p1.d_active = 1
    and p1.is_part_of=p2.id and p2.d_active = 1
    and m.item_group_type = 'MODEL' and m.d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidModelForProduct;


  FUNCTION isValidModelCodeForProduct(p_model_code VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_model VARCHAR2(255) := NULL;
  BEGIN

    SELECT m.NAME 
    INTO v_model
    FROM item_group m,item_group p1,item_group p2
    WHERE 
    lower(m.group_code) = lower(ltrim(rtrim(p_model_code))) 
    and (lower(p1.name) = lower(ltrim(rtrim(p_product))) and p1.item_group_type='PRODUCT'
      or lower(p2.name) = lower(ltrim(rtrim(p_product))) and p2.item_group_type='PRODUCT')
    and lower(m.business_unit_info) = lower(p_business_unit_name)
    and lower(p1.business_unit_info) = lower(p_business_unit_name)
    and lower(p2.business_unit_info) = lower(p_business_unit_name)
    and m.is_part_of=p1.id and p1.d_active = 1
    and p1.is_part_of=p2.id and p2.d_active = 1
    and m.item_group_type = 'MODEL' and m.d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidModelCodeForProduct;

  FUNCTION getModelForModelCodeAndProduct(p_model_code VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN NUMBER
  IS
  v_model NUMBER := NULL;
  v_scheme NUMBER := NULL;
  BEGIN
	SELECT id INTO v_scheme
	FROM item_scheme WHERE UPPER(name)='PROD STRUCT SCHEME'
		AND business_unit_info=p_business_unit_name;

	SELECT A.id INTO v_model
	FROM
	(SELECT IG.group_code,
	  IG.item_group_type,
	  IG.business_unit_info,
	  IG.id
	FROM item_group IG
	  CONNECT BY PRIOR IG.ID = IG.IS_PART_OF
	  START WITH
	  (
		UPPER(IG.NAME)           = UPPER(LTRIM(RTRIM(p_product)))
	  AND IG.BUSINESS_UNIT_INFO = p_business_unit_name
	  AND IG.ITEM_GROUP_TYPE    = 'PRODUCT'
	  AND IG.D_ACTIVE           = 1
	  AND IG.SCHEME             = v_scheme
	  )
	) A
	WHERE A.ITEM_GROUP_TYPE  = 'MODEL'
	AND UPPER(A.group_code)               = UPPER(LTRIM(RTRIM(p_model_code)))
	AND A.BUSINESS_UNIT_INFO = p_business_unit_name
	AND ROWNUM               = 1;

    RETURN v_model;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN NULL;
  END getModelForModelCodeAndProduct;

  FUNCTION isValidItemNumber(p_item_number VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_item_id NUMBER := NULL;
  v_item_number_index NUMBER := -1;
  v_item_number VARCHAR2(255) := NULL;
  BEGIN


    SELECT i.ID 
    INTO v_item_id
    FROM ITEM i, PARTY p 
    WHERE ( UPPER(i.alternate_item_number) = UPPER(ltrim(rtrim(p_item_number)))  OR 
	UPPER(i.item_number) = UPPER(ltrim(rtrim(p_item_number))) )
    AND lower(i.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name)))
    AND i.owned_by = p.ID
    AND p.NAME = common_utils.constant_oem_name and i.d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidItemNumber;



  FUNCTION isValidPartSerialNumber(p_serial_number VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_item_id NUMBER := NULL;  
  BEGIN


    SELECT i.ID 
    INTO v_item_id
    FROM INVENTORY_ITEM i, PARTY p 
    WHERE lower(i.serial_number) = lower(ltrim(rtrim(p_serial_number))) 
    AND lower(i.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name)))
    and i.d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidPartSerialNumber;


  FUNCTION isValidSupplier(p_supplier_name VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_supplier_id NUMBER := NULL;
  BEGIN

    SELECT s.ID 
    INTO v_supplier_id
    FROM SUPPLIER s, bu_org_mapping m
    WHERE UPPER(supplier_number) = UPPER(p_supplier_name)
        AND s.id = m.org AND UPPER(m.bu) = UPPER(p_business_unit_name)
        AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidSupplier;


 FUNCTION isValidJobCode(p_job_code VARCHAR2, p_model VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_job_code VARCHAR2(256) := NULL;
  BEGIN

    select to_char(spd.code)
    INTO v_job_code
    FROM 
      action_node an,
      service_procedure sp,
      service_procedure_definition spd,
      (select id from assembly connect by prior id = is_part_of_assembly start with id in 
          ( select a.id 
            from 
            failure_structure fs,
            failure_structure_assemblies fsa,
            assembly a,
            item_group ig
            where
              a.active = 1 and
              fs.for_item_group = ig.id and
              fs.id = fsa.failure_structure and
              fsa.assemblies = a.id and
              upper(ig.name) = upper(p_model))) adata
    WHERE
      adata.id = an.defined_for and
      an.id = sp.defined_for and
      an.active = 1 and
      sp.definition = spd.id and
      lower(spd.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and
      lower(spd.code) = lower(ltrim(rtrim(p_job_code))) and spd.d_active = 1 AND ROWNUM = 1;

    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidJobCode;


 FUNCTION isValidUser(p_user_login VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_user_login VARCHAR2(256) := NULL;
  BEGIN

    SELECT OU.LOGIN  
    INTO v_user_login
    FROM ORG_USER OU, BU_USER_MAPPING BUM 
    WHERE lower(OU.login) = lower(ltrim(rtrim(p_user_login))) AND 
    OU.ID = BUM.ORG_USER AND 
    lower(bum.bu) = lower(ltrim(rtrim(p_business_unit_name))) AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidUser;


 FUNCTION isValidDealer(p_dealer_login VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_dealer_login VARCHAR2(256) := NULL;
  BEGIN

    SELECT OU.LOGIN  
    INTO v_dealer_login
    FROM ORG_USER OU, DEALERSHIP dealer, BU_USER_MAPPING BUM 
    WHERE lower(OU.login) = lower(ltrim(rtrim(p_dealer_login))) AND 
    OU.ID = BUM.ORG_USER AND dealer.id = OU.belongs_to_organization AND 
    lower(bum.bu) = lower(ltrim(rtrim(p_business_unit_name))) AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidDealer;


 FUNCTION isValidDealerByNumber(p_dealer_number VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_dealer_number VARCHAR2(256) := NULL;
  BEGIN

    SELECT dealer.dealer_number  
    INTO v_dealer_number
    from bu_org_mapping bom, dealership dealer 
    where lower(dealer.dealer_number) = lower(ltrim(rtrim(p_dealer_number))) and dealer.id = bom.org and 
    lower(bom.bu) = lower(ltrim(rtrim(p_business_unit_name))) AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidDealerByNumber;


 FUNCTION isValidInventory (p_serial_number VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_inventory VARCHAR2(256) := NULL;
  BEGIN

    SELECT ID   
    INTO v_inventory
    FROM INVENTORY_ITEM 
    WHERE lower(serial_number) = lower(ltrim(rtrim(p_serial_number))) AND 
    lower(business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and d_active=1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidInventory;


FUNCTION isValidInventoryWithConNum (
	p_container_number VARCHAR2, 
	p_business_unit_name VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
v_inventory NUMBER := NULL;
BEGIN
	p_error_code := NULL;
	SELECT ID INTO v_inventory
	FROM INVENTORY_ITEM 
	WHERE lower(vin_number) = lower(ltrim(rtrim(p_container_number)))
		AND business_unit_info=p_business_unit_name 
		AND d_active=1 AND serialized_part = 0;
	RETURN v_inventory;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN
		p_error_code := 'CN_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'CN_DUP';
		RETURN NULL;
END isValidInventoryWithConNum;

 FUNCTION isValidFaultCode(p_model VARCHAR2, p_fault_code VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_fault_code            VARCHAR2(256) := NULL;
  v_failure_structure     NUMBER := NULL;
  v_complete_fault_code   VARCHAR2(4000) := NULL;
  BEGIN

    SELECT fcd.code 
    INTO v_fault_code
    FROM 
      fault_code_definition fcd,
      fault_code fc,
        (select fault_code from assembly where fault_code is not null connect by prior id = 
            is_part_of_assembly start with id in 
            (select a.id 
            from 
              failure_structure fs,
              failure_structure_assemblies fsa,
              assembly a,
              item_group ig
            where
              a.active = 1 and
              fs.for_item_group = ig.id and
              fs.id = fsa.failure_structure and
              fsa.assemblies = a.id and
              upper(ig.name) = upper(p_model))) adata
    WHERE
      adata.fault_code = fc.id and
      fc.definition = fcd.id and
      lower(fcd.code) = lower(ltrim(rtrim(p_fault_code))) and 
      lower(fcd.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and fcd.d_active=1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidFaultCode;


 FUNCTION isValidFaultFound(p_model VARCHAR2, p_fault_found VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
 IS
  v_fault_found NUMBER := 0;
 BEGIN
    SELECT ft.id 
    INTO v_fault_found
    from FAILURE_TYPE ft, 
    FAILURE_TYPE_DEFINITION ftd, 
    ITEM_GROUP model
    where 
    ft.definition_id = ftd.id and 
    lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) and ft.for_item_group_id = model.id and 
    lower(model.name) = lower(ltrim(rtrim(p_model))) and model.d_active = 1 and ft.d_active = 1 and 
    lower(model.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and 
	lower(model.item_group_type) = 'model' AND ROWNUM = 1;

    RETURN TRUE;
 EXCEPTION
 WHEN OTHERS THEN
    RETURN FALSE;
 END isValidFaultFound;


 FUNCTION isValidCausedBy(p_model VARCHAR2, p_fault_found VARCHAR2, p_caused_by VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_caused_by VARCHAR2(256) := NULL;
  BEGIN
    select fc.id 
    INTO v_caused_by
    from FAILURE_CAUSE fc , FAILURE_CAUSE_DEFINITION fcd , FAILURE_TYPE ft, 
    FAILURE_TYPE_DEFINITION ftd, ITEM_GROUP model
    where fc.definition_id = fcd.id and lower(fcd.name) = lower(ltrim(rtrim(p_caused_by))) and 
    fc.failure_type_id = ft.id and ft.definition_id = ftd.id and 
    lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) and ft.for_item_group_id = model.id and 
    lower(model.name) = lower(ltrim(rtrim(p_model))) and model.d_active = 1 and fc.d_active = 1 and 
    lower(model.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and 
	lower(model.item_group_type) = 'model' AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
 END isValidCausedBy;


 FUNCTION isValidRootCause(p_model VARCHAR2, p_fault_found VARCHAR2, p_root_cause VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_root_cause VARCHAR2(256) := NULL;
  BEGIN
    select frc.id 
    INTO v_root_cause
    from FAILURE_ROOT_CAUSE frc , FAILURE_ROOT_CAUSE_DEFINITION frcd , FAILURE_TYPE ft, 
    FAILURE_TYPE_DEFINITION ftd, ITEM_GROUP model
    where frc.definition_id = frcd.id and lower(frcd.name) = lower(ltrim(rtrim(p_root_cause))) and 
    frc.failure_type_id = ft.id and ft.definition_id = ftd.id and 
    lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) and ft.for_item_group_id = model.id and 
    lower(model.name) = lower(ltrim(rtrim(p_model))) and model.d_active = 1 and frc.d_active = 1 and 
    lower(model.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and 
	lower(model.item_group_type) = 'model' AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidRootCause;


FUNCTION isValidTechnician(p_technician VARCHAR2, p_dealer VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_technician VARCHAR2(256) := NULL;
BEGIN

    SELECT OU.LOGIN  
    INTO v_technician
    FROM ORG_USER TECHNICIAN, BU_USER_MAPPING BUM, USER_ROLES ur, ROLE role, 
        org_user_belongs_to_orgs torgs, service_provider dealer,
        ORG_USER OU, org_user_belongs_to_orgs orgs
    WHERE 
        lower(TECHNICIAN.login) = lower(ltrim(rtrim(p_technician))) 
        AND TECHNICIAN.d_active = 1 
        AND technician.ID = BUM.ORG_USER 
        AND lower(bum.bu) = lower(ltrim(rtrim(p_business_unit_name))) 
        AND ur.org_user = TECHNICIAN.id 
        AND ur.roles = role.id 
        AND lower(role.name) = 'technician' 
        AND technician.id = torgs.org_user
        AND torgs.belongs_to_organizations = dealer.id
        AND lower(OU.login) = lower(ltrim(rtrim(p_dealer))) 
        AND ou.id = orgs.org_user
        AND orgs.belongs_to_organizations = dealer.id 
        AND ROWNUM = 1;
RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidTechnician;


 FUNCTION isValidDate (p_date VARCHAR2, p_format VARCHAR2)
 RETURN BOOLEAN
 IS
  v_date DATE := NULL;
  BEGIN
   SELECT TO_DATE(p_date,p_format)
   INTO   v_date
   FROM   DUAL;
   RETURN TRUE;
  EXCEPTION
  WHEN OTHERS THEN
   RETURN FALSE;
  END isValidDate;


 FUNCTION isValidCurrency (p_currency VARCHAR2)
 RETURN BOOLEAN
 IS
  v_currency VARCHAR2(256) := NULL;
  BEGIN
   SELECT from_currency
   INTO   v_currency
   FROM   CURRENCY_EXCHANGE_RATE
   WHERE upper(from_currency) = upper(ltrim(rtrim(p_currency))) AND ROWNUM = 1;
   RETURN TRUE;
  EXCEPTION
  WHEN OTHERS THEN
   RETURN FALSE;
  END isValidCurrency;


 FUNCTION isConfigParamSet (p_config_param VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
 IS
  v_config_value VARCHAR2(10) := NULL;
  BEGIN
    SELECT cpo.value INTO v_config_value
    FROM config_param cp, config_value cv, config_param_option cpo
    WHERE cp.id=cv.config_param AND cp.type='boolean'
	AND upper(cp.name) = upper(p_config_param) 
	AND cp.d_active=1 AND cv.d_active=1
    AND cv.business_unit_info = p_business_unit_name
	AND cv.config_param_option=cpo.id;
	IF lower(v_config_value) = 'true' THEN
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
  EXCEPTION
  WHEN OTHERS THEN
   RETURN FALSE;
  END isConfigParamSet;


FUNCTION isValidAssemblyDefinitionCode (p_code VARCHAR2, p_level NUMBER)
RETURN BOOLEAN
IS
    v_assembly_id       NUMBER;
BEGIN
    IF p_code = '0000' THEN
        RETURN FALSE;
    END IF;

    SELECT id INTO v_assembly_id
    FROM assembly_definition 
    WHERE lower(code) = lower(p_code) AND assembly_level = p_level
		AND d_active=1;
	RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidAssemblyDefinitionCode;

FUNCTION isValidActionName (p_action VARCHAR2)
RETURN BOOLEAN
IS
    v_id       NUMBER;
BEGIN
    SELECT id INTO v_id FROM action_definition 
    WHERE LOWER(name) = LOWER(p_action) AND ROWNUM=1;
    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidActionName;

FUNCTION isValidActionCode (p_action VARCHAR2)
RETURN BOOLEAN
IS
    v_id       NUMBER;
BEGIN
    SELECT id INTO v_id FROM action_definition 
    WHERE LOWER(code) = LOWER(p_action) AND d_active=1;
    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidActionCode;

FUNCTION getValidSMRReasonId (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
RETURN VARCHAR2
IS
    v_lov_id VARCHAR2(255);
BEGIN
    SELECT l.id INTO v_lov_id
    FROM list_of_values l , i18nlov_text t 
    WHERE 
	l.id=t.list_of_i18n_values 
	AND (t.locale = p_locale OR t.locale='en_US') 
	AND t.description = p_lov
        AND UPPER(l.business_unit_info) = UPPER(p_business_unit_info)
        AND l.type = 'SMRREASON'
        AND l.d_active = 1
        AND l.state='active'
	AND ROWNUM=1;

    RETURN v_lov_id;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END getValidSMRReasonId;

FUNCTION getValidCompetitorModelId (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
RETURN VARCHAR2
IS
    v_lov_id VARCHAR2(255);
BEGIN
    SELECT l.id INTO v_lov_id
    FROM list_of_values l , i18nlov_text t 
    WHERE 
	l.id=t.list_of_i18n_values 
	AND (t.locale = p_locale OR t.locale='en_US') 
	AND UPPER(t.description) = UPPER(p_lov)
        AND UPPER(l.business_unit_info) = UPPER(p_business_unit_info)
        AND l.type = 'CLAIMCOMPETITORMODEL'
        AND l.d_active = 1
        AND l.state='active'
	AND ROWNUM=1;

    RETURN v_lov_id;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END getValidCompetitorModelId;

FUNCTION isValidSMRReason (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
RETURN BOOLEAN
IS
    v_lov_id       NUMBER;
BEGIN

    SELECT l.id INTO v_lov_id
    FROM list_of_values l , i18nlov_text t 
    WHERE 
	l.id=t.list_of_i18n_values 
	AND (t.locale = p_locale OR t.locale='en_US') 
	AND t.description = p_lov
        AND UPPER(l.business_unit_info) = UPPER(p_business_unit_info)
        AND l.type = 'SMRREASON'
        AND l.d_active = 1
        AND l.state='active'
	AND ROWNUM=1;

    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidSMRReason;


FUNCTION isValidFaultCodeForModelId(p_model NUMBER, p_fault_code VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_fault_code            VARCHAR2(256) := NULL;
BEGIN

    SELECT fcd.code 
    INTO v_fault_code
    FROM fault_code_definition fcd, fault_code fc,
        (select fault_code from assembly where fault_code is not null 
            connect by prior id = is_part_of_assembly start with id in 
            (select a.id 
            from failure_structure fs, failure_structure_assemblies fsa, assembly a
            where a.active = 1 and
                fs.for_item_group = p_model and
                fs.id = fsa.failure_structure and
                fsa.assemblies = a.id )
        ) adata
    WHERE
        adata.fault_code = fc.id and
        fc.definition = fcd.id and
        lower(fcd.code) = lower(ltrim(rtrim(p_fault_code))) and 
        lower(fcd.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and 
        fcd.d_active=1 AND ROWNUM = 1;

    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidFaultCodeForModelId;


FUNCTION isValidJobCodeForModelId(p_model NUMBER, p_job_code VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_job_code VARCHAR2(256) := NULL;
BEGIN

    select to_char(spd.code)
    INTO v_job_code
    FROM action_node an,
        service_procedure sp,
        service_procedure_definition spd,
        (select id from assembly connect by prior id = is_part_of_assembly start with id in 
            ( select a.id 
            from 
                failure_structure fs,
                failure_structure_assemblies fsa,
                assembly a
            where
                a.active = 1 and
                fs.for_item_group = p_model and
                fs.id = fsa.failure_structure and
                fsa.assemblies = a.id)
        ) adata
    WHERE
        adata.id = an.defined_for and
        an.id = sp.defined_for and
        an.active = 1 and
        sp.definition = spd.id and
        lower(spd.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and
        lower(spd.code) = lower(ltrim(rtrim(p_job_code))) and spd.d_active = 1 AND ROWNUM = 1;

    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidJobCodeForModelId;


FUNCTION isValidFaultFoundForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_fault_found NUMBER := 0;
BEGIN
    SELECT ft.id 
    INTO v_fault_found
    from FAILURE_TYPE ft, 
        I18NFAILURE_TYPE_DEFINITION ftd
    where 
        ft.definition_id = ftd.failure_type_definition
        AND lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) 
        AND ft.for_item_group_id = p_model 
        AND ft.d_active = 1
        AND ROWNUM = 1;

    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidFaultFoundForModelId;


FUNCTION isValidCausedByForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_caused_by VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_caused_by VARCHAR2(256) := NULL;
BEGIN
    select fc.id 
    INTO v_caused_by
    from FAILURE_CAUSE fc , FAILURE_CAUSE_DEFINITION fcd , 
        FAILURE_TYPE ft, FAILURE_TYPE_DEFINITION ftd
    where fc.definition_id = fcd.id 
        and lower(fcd.name) = lower(ltrim(rtrim(p_caused_by))) 
        and fc.failure_type_id = ft.id and ft.definition_id = ftd.id 
        and lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) 
        and ft.for_item_group_id = p_model 
        and fc.d_active = 1
        AND ROWNUM = 1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidCausedByForModelId;

FUNCTION isValidRootCauseForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_root_cause VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_root_cause VARCHAR2(256) := NULL;
BEGIN
    select frc.id 
    INTO v_root_cause
    from FAILURE_ROOT_CAUSE frc , FAILURE_ROOT_CAUSE_DEFINITION frcd ,
        FAILURE_TYPE ft, FAILURE_TYPE_DEFINITION ftd
    where frc.definition_id = frcd.id 
        and lower(frcd.name) = lower(ltrim(rtrim(p_root_cause))) 
        and frc.failure_type_id = ft.id 
        and ft.definition_id = ftd.id 
        and lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) 
        and ft.for_item_group_id = p_model 
        and frc.d_active = 1 
        and ROWNUM = 1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidRootCauseForModelId;


FUNCTION isValidDelimitedValue(p_value VARCHAR2, p_delimiter VARCHAR2)
RETURN BOOLEAN
IS
  v_index         NUMBER := 1;
  v_cur_idx       NUMBER := 1;
  v_delim_length  NUMBER;
  v_value_length  NUMBER;
BEGIN
  v_delim_length := LENGTH(p_delimiter);
  v_value_length := LENGTH(p_value);

  IF v_value_length <= v_delim_length THEN
    RETURN TRUE;
  END IF;

  WHILE v_index != 0 AND v_cur_idx <= v_value_length LOOP
    v_index := INSTR(p_value, p_delimiter, v_cur_idx);
    IF v_index = v_cur_idx THEN
      RETURN FALSE;
    ELSIF v_index = v_value_length - v_delim_length + 1 THEN
      RETURN FALSE;
    ELSIF v_index > v_cur_idx THEN
      v_cur_idx := v_index + v_delim_length;
    END IF;
  END LOOP;

  RETURN TRUE;
END isValidDelimitedValue;

FUNCTION isValidReplacedIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN
    SELECT i.id INTO v_id
    FROM item i, item_group ig,
        config_param p,config_value v,config_param_option o
    WHERE p.name='replacedItemsOnClaimConfiguration' AND
        v.config_param=p.id AND v.config_param_option=o.id AND
        UPPER(ig.name)=UPPER(o.value) AND
        i.model=ig.id AND 
        v.business_unit_info=p_business_unit AND
        i.business_unit_info=p_business_unit AND
        p.d_active=1 AND i.d_active=1 AND
        i.owned_by in (SELECT org.id FROM party pty,organization org 
            WHERE pty.id=org.id AND pty.name='OEM') AND
        (i.item_number=p_item_number OR i.alternate_item_number=p_item_number)
        AND ROWNUM=1;

    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidReplacedIRPart;

FUNCTION isValidReplacedIRPart(p_serial_number VARCHAR2, p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN
    SELECT i.id INTO v_id
    FROM item i, item_group ig,inventory_item ii,
        config_param p,config_value v,config_param_option o
    WHERE p.name='replacedItemsOnClaimConfiguration' AND
        v.config_param=p.id AND v.config_param_option=o.id AND
        UPPER(ig.name)=UPPER(o.value) AND
        i.model=ig.id AND 
        ii.serial_number=p_serial_number AND
        ii.of_type=i.id AND
        v.business_unit_info=p_business_unit AND
        i.business_unit_info=p_business_unit AND
        p.d_active=1 AND i.d_active=1 AND
        i.owned_by in (SELECT org.id FROM party pty,organization org 
            WHERE pty.id=org.id AND pty.name='OEM') AND
        (i.item_number=p_item_number OR i.alternate_item_number=p_item_number)
        AND ROWNUM=1;

    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidReplacedIRPart;

FUNCTION isValidInstalledIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
Begin
    SELECT i.id INTO v_id
      FROM item i, item_group ig, item_group pg 
      WHERE
        I.Business_Unit_Info = P_Business_Unit And I.D_Active = 1 
        AND (i.item_number =p_item_number or i.alternate_item_number =p_item_number) 
        AND i.owned_by = 1 AND i.model = ig.ID 
        AND i.service_part = 1  AND (UPPER(pg.name) in ('PART'))  
        AND ig.tree_id = pg.tree_id  
        AND ig.lft >= pg.lft  
        And Ig.Rgt <= Pg.Rgt  
        AND rownum =1; 


    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidInstalledIRPart;

FUNCTION isValidAlarmCode(p_alarm_code VARCHAR2,p_product VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN       
      select COUNT(1) into  v_id from item_groups_alarm_code where alarm_code in (select id from alarm_code where  code = p_alarm_code);
      IF v_id=0 then
          RETURN TRUE;
      ELSE    
        SELECT COUNT(1) into v_id FROM DUAL WHERE p_product IN (
        select ITEM_GROUP from item_groups_alarm_code where alarm_code in (select id from alarm_code where  code = p_alarm_code));

         IF v_id >0 then     
          RETURN TRUE;
          else
            RETURN FALSE;
         END IF;
       END IF;   
    EXCEPTION 
        WHEN OTHERS THEN
        RETURN FALSE;
END isValidAlarmCode;

FUNCTION isAllowedCostCategory(p_cost_cat_code VARCHAR2,p_product VARCHAR2,p_business_unit_info VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN
    select COUNT(1) into  v_id from COSTCAT_APPL_PRODUCTS cp, COST_CATEGORY c,item_group g where cp.cost_category = c.id and c.code = p_cost_cat_code
      and g.id =cp.item_group  and g.business_unit_info = p_business_unit_info;
      IF v_id=0 then
          RETURN TRUE;
      ELSE    
        SELECT COUNT(1) into v_id from COSTCAT_APPL_PRODUCTS cp, COST_CATEGORY c where cp.cost_category = c.id 
        and c.code = p_cost_cat_code and cp.item_group = p_product;
         IF v_id >0 then
            RETURN TRUE;
         else
            RETURN FALSE;
         END IF;
       END IF;
    EXCEPTION 
        WHEN OTHERS THEN
        RETURN FALSE;
END isAllowedCostCategory;


FUNCTION isValidMiscPart(p_item_number VARCHAR2, p_service_provider NUMBER, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN
   select
        distinct miscellane6_.id INTO v_id
    from
        misc_item_criteria miscellane0_ 
    inner join
        misc_item_config itemconfig1_ 
            on miscellane0_.id=itemconfig1_.for_criteria 
    inner join
        misc_item miscellane6_ 
            on itemconfig1_.miscellaneous_item=miscellane6_.id 
    left outer join
        dealer_group dealergrou2_ 
            on miscellane0_.dealer_group=dealergrou2_.id cross 
    join
        dealer_group dealergrou3_ 
    inner join
        dealers_in_group includedde4_ 
            on dealergrou3_.id=includedde4_.dealer_group 
    inner join
        service_provider servicepro5_ 
            on includedde4_.dealer=servicepro5_.id 
    inner join
        organization servicepro5_1_ 
            on servicepro5_.id=servicepro5_1_.id 
    inner join
        party servicepro5_2_ 
            on servicepro5_.id=servicepro5_2_.id cross 
    join
        misc_item miscellane7_ 
    where
        miscellane0_.business_unit_info in (
            p_business_unit
        ) 
        and miscellane0_.d_active = 1 
        and dealergrou3_.business_unit_info in (
           p_business_unit
        ) 
        and dealergrou3_.d_active = 1 
        and itemconfig1_.miscellaneous_item=miscellane7_.id 
        and (
            miscellane0_.service_provider is null 
            or miscellane0_.service_provider=p_service_provider
        ) 
        and (
            dealergrou2_.id is null 
            or dealergrou2_.tree_id=dealergrou3_.tree_id 
            and dealergrou2_.lft<=dealergrou3_.lft 
            and dealergrou3_.rgt<=dealergrou2_.rgt 
            and p_service_provider=servicepro5_.id
        ) 
        and (
            upper(miscellane7_.part_number) =upper(p_item_number)
        ) 
        and miscellane0_.active=1 ;
    RETURN TRUE;
EXCEPTION 
WHEN OTHERS THEN
BEGIN 
   SELECT i.id INTO v_id
    FROM misc_item_criteria cr, misc_item_config cfg, misc_item i
    WHERE cr.active=1 AND cr.service_provider=p_service_provider AND
        cfg.for_criteria=cr.id AND cfg.active=1 AND
        cfg.miscellaneous_item=i.id AND
        i.part_number=p_item_number AND
        i.business_unit_info=p_business_unit AND ROWNUM=1;
           RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN

    BEGIN 
        SELECT i.id INTO v_id
        FROM dealers_in_group dig,dealer_group grp,dealer_scheme_purposes sp, 
            purpose pp,misc_item_criteria cr, misc_item_config cfg, misc_item i
        WHERE 
            dig.dealer=p_service_provider AND
            dig.dealer_group = grp.id AND
            grp.scheme = sp.dealer_scheme AND
            sp.purposes = pp.id AND
            pp.name='Dealer Rates' AND
            cr.dealer_group = grp.id AND
            cr.active=1 and cfg.active=1 AND
            cfg.for_criteria=cr.id AND
            cfg.miscellaneous_item=i.id AND 
            i.part_number=p_item_number AND 
            i.business_unit_info=p_business_unit AND rownum=1;
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN FALSE;
     END;
     END;
END isValidMiscPart;


FUNCTION isValidCountry(p_country_code VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
BEGIN
    SELECT id INTO v_id
    FROM country WHERE UPPER(code) = UPPER(p_country_code);
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidCountry;

FUNCTION isValidState(p_state VARCHAR2, p_country_code VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
BEGIN
    SELECT id INTO v_id
    FROM msa 
    WHERE UPPER(country) = UPPER(p_country_code) 
        AND UPPER(st) = UPPER(p_state) AND ROWNUM=1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidState;

FUNCTION isValidCity(p_city VARCHAR2, p_state VARCHAR2, p_country_code VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
BEGIN
    SELECT id INTO v_id
    FROM msa 
    WHERE UPPER(country) = UPPER(p_country_code) 
        AND UPPER(st) = UPPER(p_state)
        AND UPPER(city) = UPPER(p_city) AND ROWNUM=1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidCity;

FUNCTION isValidZipcode(p_zipcode VARCHAR2, p_city VARCHAR2, p_state VARCHAR2, p_country_code VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
BEGIN
    SELECT id INTO v_id
    FROM msa 
    WHERE UPPER(country) = UPPER(p_country_code) 
        AND UPPER(st) = UPPER(p_state)
        AND UPPER(city) = UPPER(p_city)
        AND UPPER(zip2) = UPPER(p_zipcode) AND ROWNUM=1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidZipcode;

FUNCTION isValidCampaignCode(p_campaign_code VARCHAR2, p_dealer NUMBER, p_business_unit VARCHAR2,p_date DATE,v_service_provider_number VARCHAR2,p_serial_number VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;     
BEGIN

    SELECT c.id INTO v_id 
    FROM campaign_notification n, campaign c
    WHERE UPPER(c.business_unit_info) = UPPER(p_business_unit) 
        AND n.campaign = c.id 
        AND n.dealership = p_dealer
        AND n.notification_status = 'PENDING'
        AND p_date >= c.from_date AND p_date <= c.till_date
        AND UPPER(c.code) = UPPER(p_campaign_code)
        AND n.d_active=1 
        AND ROWNUM = 1;

    RETURN TRUE;
EXCEPTION  WHEN others THEN 
   BEGIN    
    select   distinct inventoryi0_.id as id86_ into v_id

        from
            inventory_item inventoryi0_ cross 
        join
            campaign_notification campaignno1_ cross 
        join
            service_provider servicepro2_ 
        inner join
            organization servicepro2_1_ 
                on servicepro2_.id=servicepro2_1_.id 
        inner join
            party servicepro2_2_ 
                on servicepro2_.id=servicepro2_2_.id cross 
        join
            campaign campaign3_ 
        where
            inventoryi0_.business_unit_info in (p_business_unit) 
            and inventoryi0_.d_active = 1 
            and campaignno1_.d_active = 1 
            and servicepro2_2_.d_active = 1 
            and campaignno1_.campaign=campaign3_.id 
            and campaignno1_.item=inventoryi0_.id 
            and campaignno1_.dealership=servicepro2_.id 
            and (
                servicepro2_.service_provider_number=p_dealer
                and inventoryi0_.type='STOCK' 
                or inventoryi0_.type='RETAIL'
            ) 
            and (
                campaignno1_.claim is null
            ) 
            and campaignno1_.notification_status='PENDING' 
            and campaign3_.from_date<=sysdate 
            and campaign3_.code=p_campaign_code
            and (
                upper(inventoryi0_.serial_number)=p_serial_number
            ) 
            and inventoryi0_.serialized_part=0        
          AND ROWNUM = 1;
    RETURN TRUE; 
EXCEPTION
    WHEN others THEN    
        RETURN FALSE;  
 END;
END isValidCampaignCode;

FUNCTION isValidInventoryForFieldMod(
	p_serial_number VARCHAR2, 
	p_campaign_code VARCHAR2, 
	p_dealer NUMBER, 
	p_business_unit VARCHAR2,
	p_rep_date DATE,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_id NUMBER;
	v_date DATE;
BEGIN
	p_error_code := NULL;
	v_date := p_rep_date;
	IF v_date IS NULL THEN
		v_date := sysdate;
	END IF;
    SELECT i.id INTO v_id 
    FROM campaign_notification n,inventory_item i, campaign c
    WHERE UPPER(i.business_unit_info) = UPPER(p_business_unit) 
        AND n.item = i.id
        AND n.campaign = c.id 
        AND (n.dealership=p_dealer AND i.type='STOCK'
			OR i.type='RETAIL')
        AND n.notification_status = 'PENDING'
        AND v_date >= c.from_date and v_date <= c.till_date
        AND UPPER(i.serial_number) = UPPER(p_serial_number)
        AND UPPER(c.code) = UPPER(p_campaign_code)
		AND i.serialized_part=0
		AND i.d_active=1 AND c.d_active=1 and n.d_active=1;

    RETURN v_id;  
EXCEPTION
    WHEN NO_DATA_FOUND THEN
		p_error_code := 'SN_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'SN_DUP';
		RETURN NULL;
END isValidInventoryForFieldMod;

FUNCTION isValidInventoryForFieldModWCN(
	p_container_number VARCHAR2, 
	p_campaign_code VARCHAR2, 
	p_dealer NUMBER, 
	p_business_unit VARCHAR2,
	p_rep_date DATE,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_id    NUMBER;
	v_date DATE;
BEGIN
	p_error_code := NULL;
	v_date := p_rep_date;
	IF v_date IS NULL THEN
		v_date := sysdate;
	END IF;
    SELECT i.id INTO v_id 
    FROM campaign_notification n,inventory_item i, campaign c
    WHERE i.business_unit_info=p_business_unit
        AND n.item = i.id
        AND n.campaign = c.id 
        AND (n.dealership=p_dealer AND i.type='STOCK'
			OR i.type='RETAIL')
        AND n.notification_status = 'PENDING'
        AND v_date >= c.from_date and v_date <= c.till_date
        AND UPPER(i.vin_number) = UPPER(p_container_number)
        AND UPPER(c.code) = UPPER(p_campaign_code)
        AND i.serialized_part=0
		AND i.d_active=1 AND c.d_active=1 and n.d_active=1;

    RETURN v_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
		p_error_code := 'CN_INV';
        RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'CN_DUP';
		RETURN NULL;
END isValidInventoryForFieldModWCN;

FUNCTION isClaimTypeAllowed(p_type VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
    v_type  VARCHAR2(255);
BEGIN

    IF UPPER(p_type) IN ('MACHINE SERIALIZED','MACHINE NON SERIALIZED') THEN
        v_type := 'Machine';
    ELSIF UPPER(p_type) IN ('ATTACHMENT SERIALIZED','ATTACHMENT NON SERIALIZED') THEN
        v_type := 'Attachment';    
    ELSIF UPPER(p_type) IN ('PARTS WITH HOST','PARTS WITHOUT HOST') THEN
        v_type := 'Parts';
    ELSE
        v_type := 'Campaign';
    END IF;

    SELECT o.id INTO v_id
    FROM config_param p,config_value v,config_param_option o
    WHERE p.d_active=1 AND p.id=v.config_param 
        AND v.d_active=1 AND v.config_param_option=o.id
        AND p.name='claimType'
        AND o.value=v_type
        AND UPPER(v.business_unit_info)=UPPER(p_business_unit)
        AND ROWNUM = 1;

    IF UPPER(p_type) IN ('MACHINE SERIALIZED','ATTACHMENT SERIALIZED','PARTS WITH HOST','FIELDMODIFICATION') THEN
        RETURN TRUE;
    ELSIF UPPER(p_type) IN ('MACHINE NON SERIALIZED','ATTACHMENT NON SERIALIZED','PARTS WITHOUT HOST') THEN
        IF UPPER(p_type) in ('MACHINE NON SERIALIZED','ATTACHMENT NON SERIALIZED') THEN
            v_type := 'nonSerializedClaimAllowed';
        ELSE
            v_type := 'partsClaimWithoutHostAllowed';
        END IF;

        SELECT o.id INTO v_id
        FROM config_param p,config_value v,config_param_option o
        WHERE p.d_active=1 AND p.id=v.config_param 
            AND v.d_active=1 AND v.config_param_option=o.id
            AND p.name=v_type
            AND o.value='true'
            AND UPPER(v.business_unit_info)=UPPER(p_business_unit)
            AND ROWNUM = 1;

        RETURN TRUE;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isClaimTypeAllowed;

FUNCTION hasDuplicateSerializedPart
  (
    p_value_serialNo     VARCHAR2,
    p_value_partNo     VARCHAR2,
    p_delimiter VARCHAR2)
  RETURN BOOLEAN
IS
       v_serial_count                NUMBER         := 0;
       v_part_count                NUMBER         := 0;
       p_serialized_part     VARCHAR2(4000) := NULL;
       v_count                NUMBER         := 0;
BEGIN
  v_serial_count := Common_Utils.count_delimited_values(p_value_serialNo, p_delimiter);
  v_part_count := Common_Utils.count_delimited_values(p_value_partNo, p_delimiter);
   FOR i IN 1 .. v_serial_count LOOP
      p_serialized_part := getSerialNoPartNo( p_value_serialNo,p_value_partNo,p_delimiter,i);

            v_count := 0;
            FOR j IN 1 .. v_serial_count LOOP  

               IF upper(p_serialized_part)= upper(getSerialNoPartNo( p_value_serialNo,p_value_partNo,p_delimiter,j)) THEN                              
                  v_count := v_count+1;                  
                  IF v_count > 1 THEN
                    RETURN TRUE; 
                  END IF;                

               END IF;               
            END LOOP;
    END LOOP;
  RETURN FALSE;
END hasDuplicateSerializedPart;



FUNCTION getSerialNoPartNo
  (
    p_value_serialNo     VARCHAR2,
    p_value_partNo     VARCHAR2,
    p_delimiter VARCHAR2,
    p_index     NUMBER)
  RETURN VARCHAR2
IS
   p_serial_no     VARCHAR2(4000) := NULL;
   p_part_no VARCHAR2(4000) := NULL;
BEGIN
  p_serial_no := common_utils.get_delimited_value(p_value_serialNo, p_delimiter, p_index); 
  p_part_no := common_utils.get_delimited_value(p_value_partNo, p_delimiter, p_index);   
  RETURN CONCAT(p_serial_no, p_part_no);
END getSerialNoPartNo;

FUNCTION getValidCausalPart(p_item_number VARCHAR2, p_business_unit_name VARCHAR2)
RETURN VARCHAR2
IS
    v_item_id NUMBER := NULL;
    v_item_number_index NUMBER := -1;
    v_item_number VARCHAR2(255) := NULL;
BEGIN
SELECT i.item_number 
    INTO v_item_number
    FROM ITEM i, PARTY p, item_group ig, item_group pg
    WHERE ( UPPER(i.alternate_item_number) = UPPER(ltrim(rtrim(p_item_number)))  OR 
    UPPER(i.item_number) = UPPER(ltrim(rtrim(p_item_number))) )
    AND (i.business_unit_info) = (ltrim(rtrim(p_business_unit_name)))
    AND i.owned_by = p.ID
    AND p.NAME = common_utils.constant_oem_name and i.d_active = 1 
    AND i.model=ig.id 
    AND UPPER(pg.name) in (SELECT UPPER(co.value)
        FROM config_param cp, config_value cv, config_param_option co
        WHERE cp.name='causalItemsOnClaimConfiguration' 
		AND cp.id=cv.config_param
            AND cv.d_active=1
			AND cv.config_param_option=co.id
            AND (cv.business_unit_info) = (ltrim(rtrim(p_business_unit_name))))
    AND ig.tree_id=pg.tree_id
    AND ig.lft >= pg.lft
    AND ig.rgt <= pg.rgt 
    AND rownum  < 2; 
    RETURN v_item_number;
EXCEPTION 
WHEN OTHERS THEN
    RETURN NULL;
END getValidCausalPart;

FUNCTION getReplacedIRPartNumber(p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN VARCHAR2
IS
  v_item_number         VARCHAR2(255) := NULL;
BEGIN
    SELECT i.item_number
    INTO v_item_number
    FROM item i,
      item_group ig,
      item_group pg,
      config_param p,
      config_value v,
      config_param_option o
    WHERE p.name             ='replacedItemsOnClaimConfiguration'
    AND v.config_param       =p.id
    AND v.config_param_option=o.id
    AND UPPER(ig.name)       =UPPER(o.value)
    AND i.model              =pg.id
    AND v.business_unit_info = p_business_unit
    AND i.business_unit_info =p_business_unit
    AND p.d_active           =1
    AND i.d_active           =1
    AND pg.tree_id           = ig.tree_id
    AND pg.lft              >= ig.lft
    AND pg.rgt              <= ig.rgt
    AND i.owned_by          IN
      (SELECT org.id
      FROM party pty,
        organization org
      WHERE pty.id=org.id
      AND pty.name='OEM'
      )
    AND (i.item_number        =p_item_number
    OR i.alternate_item_number=p_item_number)
    AND rownum                < 2;      
    RETURN v_item_number;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN NULL;
END getReplacedIRPartNumber;

FUNCTION getInstalledIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN VARCHAR2
IS
  v_item_number         VARCHAR2(255) := NULL;
Begin
    SELECT i.item_number INTO v_item_number
      FROM item i, item_group ig, item_group pg 
      WHERE
        I.Business_Unit_Info = P_Business_Unit And I.D_Active = 1 
        AND (i.item_number =p_item_number or i.alternate_item_number =p_item_number) 
        AND i.owned_by = 1 AND i.model = ig.ID 
        AND i.service_part = 1  
        AND (UPPER(pg.name) in (SELECT t3.value 
FROM config_param t1 ,
  config_value t2 ,
  config_param_option t3
WHERE t1.name              = 'replacedItemsOnClaimConfiguration'
AND t2.config_param        = t1.id
AND t2.config_param_option = t3.id
AND t2.d_active            = 1
AND t2.active              = 1
AND t2.business_unit_info  = P_Business_Unit ))  
        AND ig.tree_id = pg.tree_id  
        AND ig.lft >= pg.lft  
        And Ig.Rgt <= Pg.Rgt 
        AND rownum  <2;        
    RETURN v_item_number;

EXCEPTION 
    WHEN OTHERS THEN
        RETURN NULL;
END getInstalledIRPart;

FUNCTION getOwnershipForInventory(p_inv NUMBER)
RETURN NUMBER
IS
	v_owner NUMBER;
BEGIN
	SELECT it.owner_ship INTO v_owner
	FROM inventory_transaction it
	WHERE d_active=1 AND transacted_item=p_inv
		AND transaction_order=(
			SELECT MAX(transaction_order) FROM inventory_transaction t 
			WHERE t.transacted_item=p_inv AND t.d_active=1);

	RETURN v_owner;
EXCEPTION
	WHEN OTHERS THEN
		RETURN NULL;
END getOwnershipForInventory;

FUNCTION getServiceProviderType(p_service_provider NUMBER)
RETURN VARCHAR2
IS
	v_cust_type VARCHAR2(20);
BEGIN
	SELECT CASE WHEN d.id IS NOT NULL THEN 'Dealer'
		WHEN dc.id IS NOT NULL THEN 'DirectCustomer'
		WHEN ic.id IS NOT NULL THEN 'InterCompany'
		WHEN na.id IS NOT NULL THEN 'NationalAccount'
		WHEN oem.id IS NOT NULL THEN 'OEM' END
	INTO v_cust_type
	FROM party sp
	LEFT OUTER JOIN dealership d ON d.id=sp.id
	LEFT OUTER JOIN direct_customer dc ON dc.id=sp.id
	LEFT OUTER JOIN inter_company ic ON ic.id=sp.id
	LEFT OUTER JOIN national_account na ON na.id=sp.id
	LEFT OUTER JOIN original_equip_manufacturer oem ON oem.id=sp.id
	WHERE sp.id=p_service_provider AND sp.d_active=1;

	RETURN v_cust_type;
EXCEPTION
	WHEN OTHERS THEN
		RETURN NULL;
END getServiceProviderType;

FUNCTION isAllowedCustomerTypeForSearch(
	p_cust_type VARCHAR2,
	p_bu VARCHAR2)
RETURN BOOLEAN
IS
	v_count NUMBER;
BEGIN
	SELECT COUNT(cp.id) INTO v_count
	FROM config_param cp, config_value cv, config_param_option po
	WHERE cp.name='wntyConfigCustomerTypesAllowedinSearchResult'
		AND cv.config_param=cp.id
		AND cv.business_unit_info=p_bu and cv.d_active=1
		AND po.id=cv.config_param_option
		AND UPPER(po.value)=UPPER(p_cust_type);
	IF v_count > 0 THEN
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
END isAllowedCustomerTypeForSearch;

FUNCTION isValidMachineSerialNumber (
	p_serial_number VARCHAR2, 
	p_business_unit_name VARCHAR2,
	p_model VARCHAR2,
	p_dealer_id NUMBER,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_inventory NUMBER := NULL;
	v_type VARCHAR2(10);
	v_owner NUMBER;
	v_cust_type VARCHAR2(20);
BEGIN
p_error_code := NULL;
BEGIN
	SELECT ID,type INTO v_inventory, v_type
	FROM inventory_item 
	WHERE lower(serial_number) = lower(p_serial_number)
		AND business_unit_info = p_business_unit_name
		AND d_active=1 AND serialized_part = 0;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN
		p_error_code:='SN_INV';
	WHEN TOO_MANY_ROWS THEN
		IF p_model IS NULL THEN
			p_error_code:='SN_DUP_M_EMP';
		ELSE
		BEGIN
			SELECT inv.id,inv.type INTO v_inventory,v_type
			FROM inventory_item inv, item i, item_group m
			WHERE LOWER(inv.serial_number) = LOWER(p_serial_number)
			AND inv.business_unit_info = p_business_unit_name
			AND inv.d_active=1 AND inv.serialized_part = 0
			AND inv.of_type = i.id AND i.model = m.id 
			AND m.item_group_type = 'MODEL'
			AND LOWER(m.name) = LOWER(p_model)
			AND i.d_active = 1 AND m.d_active = 1;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				p_error_code:='SN_DUP_M_INV';
			WHEN TOO_MANY_ROWS THEN
				p_error_code:='SN_M_DUP';
		END;
		END IF;
END;
IF v_type = 'STOCK' THEN
	v_owner := getOwnershipForInventory(v_inventory);
	IF v_owner != p_dealer_id THEN
		v_cust_type := getServiceProviderType(v_owner);
		IF NOT isAllowedCustomerTypeForSearch(v_cust_type, p_business_unit_name) THEN
			p_error_code:='SN_CUST_INV';
		END IF;
	END IF;
END IF;
RETURN v_inventory;
END isValidMachineSerialNumber;

FUNCTION getValidPartSerialNumber(
	p_serial_number VARCHAR2, 
	p_business_unit_name VARCHAR2)
RETURN NUMBER
IS
	v_item_id NUMBER := NULL;  
BEGIN
	SELECT i.ID INTO v_item_id
	FROM INVENTORY_ITEM i
	WHERE lower(i.serial_number) = lower(p_serial_number)
	AND i.business_unit_info = p_business_unit_name
	AND i.d_active = 1 AND i.serialized_part=1
	AND i.source='MAJORCOMPREGISTRATION';
	RETURN v_item_id;
EXCEPTION 
	WHEN OTHERS THEN
		RETURN NULL;
END getValidPartSerialNumber;

FUNCTION isValidItemForNonSerialized (
	p_item_number VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_item NUMBER;
BEGIN
	p_error_code := NULL;
	SELECT i.id INTO v_item
	FROM item i
	WHERE (UPPER(i.item_number)=UPPER(p_item_number)
			OR(UPPER(i.item_number)!=UPPER(p_item_number)
				AND UPPER(i.alternate_item_number)=UPPER(p_item_number)))
		AND i.d_active=1 AND i.business_unit_info=p_bu
		AND i.item_type in ('MACHINE', 'ATTACHMENT') AND i.owned_by=1;
	RETURN v_item;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		p_error_code := 'IT_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'IT_DUP';
		RETURN NULL;
END isValidItemForNonSerialized;

FUNCTION isValidModelForNonSerialized (
	p_model_name VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_model NUMBER;
BEGIN
	p_error_code := NULL;
	SELECT m.id INTO v_model
	FROM item_group m,item_group p
	WHERE m.lft > p.lft AND m.rgt <= p.rgt
		AND UPPER(m.name)=UPPER(p_model_name)
		AND m.item_group_type='MODEL'
		AND p.item_group_type='PRODUCT TYPE'
		AND UPPER(p.name) in ('MACHINE', 'ATTACHMENT') 
		AND m.d_active=1 AND p.d_active=1
		AND m.business_unit_info=p_bu
		AND p.business_unit_info=p_bu;
	RETURN v_model;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN
		p_error_code := 'M_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'M_DUP';
		RETURN NULL;
END isValidModelForNonSerialized;

FUNCTION isValidItemForPartsClaim(
	p_item_number VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_item NUMBER;
BEGIN
	p_error_code := NULL;
	SELECT i.id INTO v_item
	FROM item i, item_group ig, item_group pg,
	config_param cp, config_value cv, config_param_option po
	WHERE (UPPER(i.item_number)=UPPER(p_item_number)
			OR(UPPER(i.item_number)!=UPPER(p_item_number)
				AND UPPER(i.alternate_item_number)=UPPER(p_item_number)))
		AND i.d_active=1 AND i.business_unit_info=p_bu
		AND i.model=ig.id AND i.owned_by=1
		AND ig.tree_id=pg.tree_id 
		AND ig.lft>=pg.lft AND ig.rgt<=pg.rgt
		AND UPPER(pg.name)=UPPER(po.value)
		AND po.id=cv.config_param_option
		AND cv.business_unit_info=p_bu and cv.d_active=1
		AND cv.config_param=cp.id
		AND cp.name='itemTypeAllowedForPartsClaim';
	RETURN v_item;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		p_error_code := 'PRT_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'PRT_DUP';
		RETURN NULL;
END isValidItemForPartsClaim;

END COMMON_VALIDATION_UTILS;
 INFO 22-Aug-12 13:06:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:50 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create or replace
PROCEDURE                 UPLOAD_DRAFT_CLAIM_VALIDATION AS
CURSOR ALL_REC IS
	SELECT * FROM STG_DRAFT_CLAIM
	WHERE NVL(ERROR_STATUS,'N') = 'N' 
		 ORDER BY ID ASC;

CURSOR DUP_REC IS
SELECT serial_number,campaign_code,COUNT(*)
          FROM STG_DRAFT_CLAIM
          WHERE claim_type='FIELDMODIFICATION'
          GROUP BY serial_number,campaign_code
          HAVING COUNT(*)>1;  

    v_loop_count            NUMBER         := 0;
    v_success_count         NUMBER         := 0;
    v_error_count           NUMBER         := 0;
    v_count                 NUMBER         := 0;
    v_count2                NUMBER         := 0;
    v_file_upload_mgt_id    NUMBER         := 0;
    v_number_temp           NUMBER         := 0;
    isFaultFoundValid       BOOLEAN        := FALSE;
    v_error                 VARCHAR2(4000) := NULL;
    v_error_code            VARCHAR2(4000) := NULL;
    v_model                 NUMBER := NULL;
	v_causal_part           VARCHAR2(255) := NULL;
	v_replaced_parts        VARCHAR2(255) := NULL;
	v_installed_parts       VARCHAR2(255) := NULL;
    v_temp_part_number      VARCHAR2(255) := NULL;
    v_product               NUMBER := NULL;
    v_machine_serial_number VARCHAR2(4000) := NULL;
    v_replaced_part      NUMBER := NULL;
    v_flag                  BOOLEAN := FALSE;
    v_valid_bu              BOOLEAN;
    v_valid_fault_found     BOOLEAN := FALSE;
    v_valid_campaign_code   BOOLEAN := FALSE;
    v_user_locale           VARCHAR2(255) := NULL;
    v_dealer                VARCHAR2(255) := NULL;
    v_dealer_id             NUMBER := NULL;
    v_bu_name               VARCHAR2(255) := NULL;
    v_smr_reason_id         VARCHAR2(255) := NULL;
    v_service_provider      NUMBER := NULL;
    v_service_provider_number  VARCHAR2(255) := NULL;
    v_delimiter             VARCHAR2(10) := '#$#';
    v_fault_code            VARCHAR2(255);
    v_job_codes_delimited   VARCHAR2(255);
    v_job_code              VARCHAR2(255);
    v_fault_found           VARCHAR2(255);    
    v_item_number           VARCHAR2(255) := NULL;   
    v_competitor_model_id   NUMBER := NULL;
    v_ac_input      		    NUMBER         := 0;
    v_id                    NUMBER := NULL;   
    v_repairdate        DATE := NULL;
    v_installeddate      VARCHAR2(255) := NULL;
    v_failuredate       VARCHAR2(255) := NULL;
    v_serial_number       VARCHAR2(20) := NULL;
	v_serialized BOOLEAN;
	v_part_installed BOOLEAN;
	v_part_installed_on_tktsa BOOLEAN;
	v_bu_config_display_item BOOLEAN := FALSE;
	v_err VARCHAR2(20);
	v_inv NUMBER;
	v_item NUMBER;
	v_part_serial NUMBER;
	v_part NUMBER;
	v_model_id NUMBER;

BEGIN

    BEGIN
     FOR EACH_DUP_REC IN DUP_REC
      LOOP
        UPDATE STG_DRAFT_CLAIM
        SET ERROR_STATUS    = 'N',
          ERROR_CODE        = 'Field modification code is duplicate for same Serial Number'
        WHERE serial_number = EACH_DUP_REC.serial_number
        AND campaign_code   = EACH_DUP_REC.campaign_code;
      END LOOP;
    END;

    BEGIN
    SELECT u.locale, u.login, f.business_unit_info, o.id INTO v_user_locale, v_dealer, v_bu_name, v_dealer_id
    FROM org_user u,file_upload_mgt f,org_user_belongs_to_orgs orgu,organization o
    WHERE u.id = f.uploaded_by 
        and orgu.org_user=u.id and orgu.belongs_to_organizations=o.id AND f.id=(SELECT file_upload_mgt_id FROM stg_draft_claim WHERE rownum = 1);
       /* SELECT u.locale, u.login, f.business_unit_info, u.belongs_to_organization  INTO v_user_locale, v_dealer, v_bu_name, v_dealer_id
        FROM org_user u,file_upload_mgt f
        WHERE u.id = f.uploaded_by AND f.id = 
            (SELECT file_upload_mgt_id FROM stg_draft_claim WHERE rownum = 1);*/
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            v_user_locale := 'en_US';
    END;


    BEGIN
        SELECT id, service_provider_number 
		INTO v_service_provider,v_service_provider_number 
        FROM service_provider WHERE id=v_dealer_id;
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            NULL;
    END;

	IF common_validation_utils.isConfigParamSet('isItemNumberDisplayRequired', v_bu_name) THEN
		v_bu_config_display_item := TRUE;
	END IF;

  FOR EACH_REC IN ALL_REC
  LOOP

    v_error_code := '';
    v_model := NULL;
	v_causal_part := NULL;
	v_replaced_parts := NULL;
	v_installed_parts := NULL;
    v_product := NULL;
    v_valid_bu := FALSE;
    v_valid_fault_found := FALSE;
    v_job_codes_delimited := NULL;
    v_valid_campaign_code := FALSE;
    v_smr_reason_id := NULL;
    v_fault_code := NULL;
    v_job_code := NULL;
    v_fault_found := NULL;
	v_serial_number := ltrim(rtrim(each_rec.serial_number));
	v_err := NULL;
	v_inv := NULL;
	v_item := NULL;
	v_part_serial := NULL;
	v_part := NULL;
	v_model_id := NULL;
	v_machine_serial_number := NULL;
	v_item_number := NULL;
	v_competitor_model_id := NULL;
	v_serialized := TRUE;
	v_part_installed := FALSE;
	v_part_installed_on_tktsa := FALSE;
	v_repairdate := NULL;
	v_failuredate := NULL;
	v_installeddate := NULL;

	IF EACH_REC.REPAIR_DATE IS NOT NULL AND 
		COMMON_VALIDATION_UTILS.isValidDate(each_rec.REPAIR_DATE, 'YYYY-MM-DD') THEN
		v_repairdate := TO_DATE(each_rec.repair_date,'YYYY-MM-DD');
	ELSIF EACH_REC.REPAIR_DATE IS NOT NULL AND 
		COMMON_VALIDATION_UTILS.isValidDate(each_rec.REPAIR_DATE, 'YYYYMMDD') THEN
		v_repairdate := TO_DATE(each_rec.repair_date,'YYYYMMDD');
	ELSE
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC018');
	END IF;

	IF UPPER(EACH_REC.CLAIM_TYPE) NOT IN ('FIELDMODIFICATION') THEN
		IF EACH_REC.FAILURE_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.FAILURE_DATE, 'YYYY-MM-DD') THEN
			v_failuredate := TO_DATE(each_rec.FAILURE_DATE,'YYYY-MM-DD');
		ELSIF EACH_REC.FAILURE_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.FAILURE_DATE, 'YYYYMMDD') THEN
			v_failuredate := TO_DATE(each_rec.FAILURE_DATE,'YYYYMMDD');
		ELSE
			v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC019');
		END IF;
	END IF;

	IF UPPER(EACH_REC.CLAIM_TYPE) IN ('MACHINE NON SERIALIZED', 'ATTACHMENT NON SERIALIZED', 'PARTS WITH HOST') THEN
		IF EACH_REC.INSTALLATION_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.INSTALLATION_DATE, 'YYYY-MM-DD') THEN
			v_installeddate := TO_DATE(each_rec.INSTALLATION_DATE,'YYYY-MM-DD');
		ELSIF EACH_REC.INSTALLATION_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.INSTALLATION_DATE, 'YYYYMMDD') THEN
			v_installeddate := TO_DATE(each_rec.INSTALLATION_DATE,'YYYYMMDD');
		ELSE
			v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC020');
		END IF;
	END IF;


    BEGIN
        IF v_bu_name IS NULL OR lower(v_bu_name) != lower(each_rec.business_unit_name) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC001');
        ELSIF NOT (COMMON_VALIDATION_UTILS.isUserBelongsToBU(v_bu_name,v_dealer)) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC044');
        ELSE
            v_valid_bu := TRUE;
        END IF;
	END;

	IF EACH_REC.UNIQUE_IDENTIFIER IS NULL THEN
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC002');
	END IF;

	BEGIN
        IF each_rec.claim_type IS NULL OR UPPER(each_rec.claim_type) NOT IN 
            ('MACHINE SERIALIZED', 'MACHINE NON SERIALIZED', 'PARTS WITH HOST', 
            'PARTS WITHOUT HOST', 'FIELDMODIFICATION' , 'ATTACHMENT SERIALIZED', 'ATTACHMENT NON SERIALIZED')
        THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC003');
        ELSIF v_valid_bu = TRUE AND NOT common_validation_utils.isClaimTypeAllowed(each_rec.claim_type, v_bu_name) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC066');
        END IF;
	END;


    IF UPPER(each_rec.claim_type) IN ('FIELDMODIFICATION') THEN
        IF each_rec.campaign_code IS NULL THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC026');
        ELSIF NOT common_validation_utils.isValidCampaignCode(each_rec.campaign_code, v_service_provider, v_bu_name,v_repairdate,v_service_provider_number,v_serial_number) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC065');
        ELSE
            v_valid_campaign_code := TRUE;
        END IF;
    END IF;

	IF UPPER(each_rec.is_serialized) = 'N' THEN
		v_serialized := FALSE;
	END IF;
	IF UPPER(each_rec.is_part_installed) = 'Y' THEN
		v_part_installed := TRUE;
	END IF;
	IF UPPER(each_rec.is_part_installed_on_oem) = 'Y' THEN
		v_part_installed_on_tktsa := TRUE;
	END IF;

	IF UPPER(each_rec.claim_type) = 'PARTS WITHOUT HOST' THEN
		v_serialized := NULL;
		v_part_installed_on_tktsa := NULL;
	ELSIF UPPER(each_rec.claim_type) in ('FIELDMODIFICATION',
		'MACHINE SERIALIZED','MACHINE NON SERIALIZED', 'ATTACHMENT SERIALIZED', 'ATTACHMENT NON SERIALIZED') THEN
		v_part_installed := NULL;
		v_part_installed_on_tktsa := NULL;
	ELSIF UPPER(each_rec.claim_type) = 'PARTS WITH HOST' AND v_serialized THEN
		v_part_installed_on_tktsa := NULL;
	END IF;

	IF NOT v_serialized AND UPPER(each_rec.claim_type) IN 
			('MACHINE SERIALIZED','ATTACHMENT SERIALIZED','FIELDMODIFICATION') THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC101');
	ELSIF v_serialized AND UPPER(each_rec.claim_type) IN 
			('MACHINE NON SERIALIZED', 'ATTACHMENT NON SERIALIZED') THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC107');
	END IF;
	IF UPPER(each_rec.claim_type) = 'PARTS WITH HOST' 
			AND NOT v_part_installed THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC102');
	END IF;
	IF UPPER(each_rec.claim_type) = 'PARTS WITHOUT HOST' 
			AND v_part_installed THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC103');
	END IF;

	IF UPPER(each_rec.claim_type) IN ('PARTS WITHOUT HOST','PARTS WITH HOST') THEN
		IF each_rec.part_serial_number IS NOT NULL THEN
			v_part_serial := common_validation_utils.getValidPartSerialNumber(
								each_rec.part_serial_number, v_bu_name);
			IF v_part_serial IS NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC073_PS');
			ELSE
			SELECT of_type INTO v_part 
			FROM inventory_item WHERE id=v_part_serial;
			BEGIN
				select id,serial_number into v_inv,v_machine_serial_number 
				from inventory_item where id in ( 
					select part_of from inventory_item_composition  
					where part = v_part_serial);
			EXCEPTION 
				WHEN NO_DATA_FOUND THEN
					NULL;
			END;
			END IF;
		ELSIF each_rec.part_item_number IS NOT NULL THEN
			v_part := common_validation_utils.isValidItemForPartsClaim(
								each_rec.PART_ITEM_NUMBER, v_bu_name,v_err);
			IF v_err IS NOT NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_'||v_err);
				v_err := NULL;
			END IF;
		ELSE
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC014');
		END IF;
	END IF;

	IF v_machine_serial_number IS NOT NULL THEN
		IF UPPER(each_rec.claim_type)='PARTS WITHOUT HOST' THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC104');
		ELSIF NOT v_serialized THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC105');
		ELSIF v_serial_number IS NULL THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC004');
		ELSIF UPPER(v_serial_number) != UPPER(v_machine_serial_number) THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_90');
		END IF;
	ELSIF v_serialized THEN
		IF v_serial_number IS NOT NULL THEN
			IF UPPER(each_rec.claim_type)='FIELDMODIFICATION' THEN
				v_inv := common_validation_utils.isValidInventoryForFieldMod(
							v_serial_number,each_rec.campaign_code,
							v_service_provider,v_bu_name,v_repairdate,v_err);
			ELSE
				v_inv := common_validation_utils.isValidMachineSerialNumber(
								v_serial_number, v_bu_name, each_rec.model_number,
								v_service_provider, v_err);
			END IF;
		ELSIF each_rec.container_number IS NOT NULL THEN
			IF UPPER(each_rec.claim_type)='FIELDMODIFICATION' THEN
				v_inv := common_validation_utils.isValidInventoryForFieldModWCN(
							each_rec.container_number,each_rec.campaign_code,
							v_service_provider,v_bu_name,v_repairdate,v_err);
			ELSE 
				v_inv := common_validation_utils.isValidInventoryWithConNum(
								each_rec.container_number, v_bu_name,v_err);
			END IF;
		ELSE
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC004');
		END IF;
		IF v_err IS NOT NULL THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_'||v_err);
			v_err := NULL;
			v_inv := NULL;
		END IF;
	ELSIF NOT v_serialized THEN
		IF v_part_installed AND NOT v_part_installed_on_tktsa THEN
			IF each_rec.competitor_model IS NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC106');
			ELSE
				v_competitor_model_id := common_validation_utils.getValidCompetitorModelId(
					each_rec.competitor_model, v_user_locale, v_bu_name);
				IF v_competitor_model_id IS NULL THEN
					v_error_code := common_utils.addErrorMessage(v_error_code,'DC071_CM');
				END IF;
			END IF;
		ELSIF (v_part_installed AND v_part_installed_on_tktsa)
				OR v_part_installed IS NULL THEN
			IF v_bu_config_display_item THEN
				IF each_rec.item_number IS NULL THEN
					v_error_code := common_utils.addErrorMessage(v_error_code,'DC011');
				ELSE 
					v_item := common_validation_utils.isValidItemForNonSerialized(
									each_rec.item_number,v_bu_name,v_err);
				END IF;
			ELSIF each_rec.model_number IS NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code,'DC009');
			ELSE
				v_model_id := common_validation_utils.isValidModelForNonSerialized(
									each_rec.model_number, v_bu_name, v_err);
			END IF;
			IF v_err IS NOT NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_'||v_err);
				v_err := NULL;
			END IF;
		END IF;
	END IF;

	IF v_model_id IS NOT NULL THEN
		v_model := v_model_id;
	ELSIF v_item IS NOT NULL THEN
		SELECT m.id INTO v_model
		FROM item i,item_group m
		WHERE i.id=v_item AND i.model=m.id;
	ELSIF v_inv IS NOT NULL THEN
		SELECT m.id,CASE WHEN p1.item_group_type='PRODUCT' THEN p1.id
			ELSE p2.id END INTO v_model,v_product
		FROM inventory_item ii,item i,item_group m,item_group p1,item_group p2
		WHERE ii.id=v_inv AND ii.of_type=i.id and i.model=m.id
			AND m.is_part_of=p1.id AND p1.is_part_of=p2.id;
	END IF;


     BEGIN
       IF EACH_REC.ALARM_CODES IS NOT NULL THEN          
            v_ac_input := Common_Utils.count_delimited_values(each_rec.ALARM_CODES, ',');
            FOR i IN 1 .. v_ac_input LOOP

                IF  v_product IS NOT NULL THEN       
                      IF NOT common_validation_utils.isValidAlarmCode(
                              common_utils.get_delimited_value(each_rec.ALARM_CODES, ',', i),v_product, v_bu_name)
                      THEN
                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC067_IAC');
                          EXIT;
                      END IF;
                ELSE 
                     select alarm_code.id into v_id from alarm_code where  lower(trim(code)) = lower(trim(common_utils.get_delimited_value(each_rec.ALARM_CODES, ',', i)));

                END IF;
            END LOOP;
        END IF; 
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC067_IAC');
     END;




  IF UPPER(EACH_REC.CLAIM_TYPE) IN ('MACHINE SERIALIZED', 'ATTACHMENT SERIALIZED', 'PARTS WITH HOST', 'FIELDMODIFICATION')
  THEN
    IF EACH_REC.MACHINE_HOURS IS NULL
    THEN
      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC016');
    END IF;

    IF EACH_REC.MACHINE_HOURS IS NOT NULL AND (EACH_REC.MACHINE_HOURS < 0 OR EACH_REC.MACHINE_HOURS > 999999)
    THEN
      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC017');
    END IF;
  END IF;

	BEGIN
		 IF EACH_REC.WORK_ORDER_NUMBER IS NULL
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC021');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.CONDITIONS_FOUND IS NULL
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC022');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.WORK_PERFORMED IS NULL
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC023');
		 END IF;
	END;




	BEGIN
    IF UPPER(EACH_REC.CLAIM_TYPE) NOT IN ('PARTS WITHOUT HOST', 'FIELDMODIFICATION') THEN
        IF (EACH_REC.CAUSAL_PART IS NOT NULL) THEN
            v_causal_part := COMMON_VALIDATION_UTILS.getValidCausalPart(EACH_REC.CAUSAL_PART, v_bu_name);
        END IF;
        IF EACH_REC.CAUSAL_PART IS NULL OR (EACH_REC.CAUSAL_PART IS NOT NULL AND v_causal_part IS NULL) THEN
		    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC025');
        ELSIF v_causal_part != each_rec.causal_part THEN
            UPDATE stg_draft_claim SET causal_part=v_causal_part WHERE id=each_rec.id;
		END IF;
    END IF;
	END;







    IF UPPER(each_rec.claim_type) NOT IN ('PARTS WITHOUT HOST') AND 
            each_rec.replaced_oem_parts IS NOT NULL THEN

         IF  each_rec.INSTALLED_OEM_PARTS IS NULL THEN            
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045_ADD_INP');         
         END IF;    

        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_oem_parts, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045');
            v_flag := FALSE;
        ELSE
            v_count := Common_Utils.count_delimited_values(each_rec.replaced_oem_parts, v_delimiter);
             IF  each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN            
                IF NOT common_validation_utils.isValidDelimitedValue(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter) THEN
                  v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045_SE');
                  v_flag := FALSE;
                ELSE
                  v_count2 := Common_Utils.count_delimited_values(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter); 
                END IF; 
             END IF;
            IF v_flag = TRUE THEN


            IF UPPER(each_rec.claim_type) IN ('PARTS WITH HOST') AND common_validation_utils.hasDuplicateSerializedPart(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM,each_rec.replaced_oem_parts, v_delimiter) THEN
                  v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_98');          
            END IF;

            FOR i IN 1 .. v_count LOOP
                IF i <= v_count2 THEN
                IF UPPER(each_rec.claim_type) IN ('PARTS WITHOUT HOST') THEN

                            IF UPPER(each_rec.PART_SERIAL_NUMBER) IS NOT NULL THEN
                               IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NULL THEN   
                                        v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Removed part should be serialized replaced part');                                         
                               ELSE
                                                     IF each_rec.PART_SERIAL_NUMBER != each_rec.REPLACED_OEM_PARTS_SERIAL_NUM THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Replaced part serial number should be same as part serial number');

                                                     ELSIF common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Serialized replaced part quatity should be one');
                                                     END IF;

                               END IF;  
                            ELSIF UPPER(each_rec.Part_item_Number) IS NOT NULL THEN
                                 IF each_rec.Replaced_OEM_Parts IS NOT NULL THEN
                                                  IF common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, i) != each_rec.Part_item_Number THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Please add correct replaced part');
                                                   END IF;
                                  END IF;                         
                                  IF UPPER(each_rec.REPLACED_OEM_PARTS_QUANTITY) IS NOT NULL THEN
                                                  IF common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i) !=1 THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Replaced part quantity should be one only');   
                                                   END IF;
                                  END IF;                 
                             END IF;
                END IF; 
                        IF UPPER(each_rec.claim_type) IN ('PARTS WITH HOST') THEN

                            IF UPPER(each_rec.PART_SERIAL_NUMBER) IS NOT NULL THEN
                                   IF common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_79');
                                   END IF;

                                   IF each_rec.Is_Serialized in ('Y') THEN

                                          IF each_rec.Is_Part_Installed_on_OEM in ('Y') THEN                                         

                                              IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                    select count(*) into v_replaced_part from  Inventory_Item_Composition where part_of in (select id from inventory_item where serial_number = v_machine_serial_number ) and part in (select id from inventory_item where serial_number=common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i) );   

                                                     IF v_replaced_part != 1 THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_78');                                                     
                                                     END IF;
                                               END IF;


                                               IF each_rec.Installed_OEM_Parts_Serial_Num IS NOT NULL THEN
                                                    IF common_utils.get_delimited_value(each_rec.Installed_OEM_Parts_Quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_80');
                                                     END IF;
                                               END IF;

                                           ELSE 

                                              IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL AND common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i) != each_rec.Part_Serial_Number THEN
                                                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_81');
                                              END IF;   

                                              IF each_rec.Installed_OEM_Parts_Serial_Num IS NOT NULL AND common_utils.get_delimited_value(each_rec.Installed_OEM_Parts_Quantity, v_delimiter, i) !=1 THEN

                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_80');

                                               END IF;
                                           END IF;

                                    ELSE
                                             IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL AND common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i) != each_rec.Part_Serial_Number THEN
                                                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_81');
                                              END IF;    

                                              IF each_rec.Installed_OEM_Parts_Serial_Num IS NOT NULL AND common_utils.get_delimited_value(each_rec.Installed_OEM_Parts_Quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_80');
                                               END IF;  
                                    END IF;


                            ELSIF UPPER(each_rec.Part_item_Number) IS NOT NULL THEN

                                      IF each_rec.Is_Serialized in ('Y') THEN    

                                            IF each_rec.Is_Part_Installed_on_OEM in ('Y') THEN
                                                  IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_82');
                                                   END IF;        

                                            ELSE
                                                  IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_82'); 
                                                  END IF;
                                                  IF each_rec.Replaced_OEM_Parts IS NOT NULL AND UPPER(each_rec.Part_item_Number) != common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, 1) THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_85');
                                                   END IF;
                                                   IF Common_Utils.count_delimited_values(each_rec.Replaced_OEM_Parts, v_delimiter)  !=1 THEN
                                                      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Should not add more than one part');
                                                   END IF;

                                                   IF each_rec.Installed_OEM_Parts_Serial_Num is NOT NULL THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_87');
                                                   END IF;  
                                             END IF;

                                       ELSE

                                              IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_84');
                                               END IF;

                                              IF each_rec.Replaced_OEM_Parts IS NOT NULL AND UPPER(each_rec.Part_item_Number) != common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, i) THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_85');
                                              END IF;

                                              IF Common_Utils.count_delimited_values(each_rec.Replaced_OEM_Parts, v_delimiter)  !=1 THEN
                                                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Should not add more than one part');
                                              END IF;

                                              IF each_rec.Installed_OEM_Parts_Serial_Num is NOT NULL THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_87');
                                              END IF;  
                                       END IF;
                            END IF;   
                         END IF; 
                        IF NOT common_validation_utils.isValidReplacedIRPart(common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i),
                              common_utils.get_delimited_value(each_rec.replaced_OEM_parts, v_delimiter, i), v_bu_name)
                        THEN
                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC046');
                          EXIT;
                        END IF;

                ELSE          

                              IF UPPER(each_rec.Part_item_Number) IS NOT NULL THEN
                                   IF each_rec.Is_Part_Installed_on_OEM in ('N') OR each_rec.Is_Serialized in ('N') THEN                                         

                                        IF each_rec.Replaced_OEM_Parts IS NOT NULL AND UPPER(each_rec.Part_item_Number) != common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, i) THEN
                                                                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_88');
                                        END IF;

                                        IF Common_Utils.count_delimited_values(each_rec.Replaced_OEM_Parts, v_delimiter)  !=1 THEN
                                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Should not add more than one part');
                                        END IF;

                                        IF each_rec.Installed_OEM_Parts_Serial_Num is NOT NULL THEN
                                                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_87');
                                        END IF;  
                                    END IF;
                              END IF;

                      v_temp_part_number := common_validation_utils.getReplacedIRPartNumber(
		                        common_utils.get_delimited_value(each_rec.replaced_OEM_parts, v_delimiter, i), v_bu_name);
		                IF v_temp_part_number IS NULL
		                THEN
		                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC046');
		                    v_replaced_parts := NULL;
		                    EXIT;
		                END IF;
		                IF i > 1 THEN
		                    v_replaced_parts := v_replaced_parts || v_delimiter;
		                END IF;			  
						v_replaced_parts := v_replaced_parts || v_temp_part_number;
                END IF;     

            END LOOP;
			IF v_replaced_parts IS NOT NULL AND v_replaced_parts != each_rec.replaced_OEM_parts THEN
                UPDATE stg_draft_claim SET replaced_OEM_parts=v_replaced_parts WHERE id=each_rec.id;
            ENd IF;
            END IF;   
        END IF;

        IF each_rec.replaced_oem_parts_quantity IS NULL THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC027');
        ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_oem_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC047');
        ELSIF v_flag = TRUE AND v_count != Common_Utils.count_delimited_values(each_rec.replaced_oem_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC048');
        ELSIF v_flag = TRUE THEN
            FOR i IN 1 .. v_count LOOP
                IF NOT common_utils.isPositiveInteger(
                        common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i)) 
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC054');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
    END IF; 




    IF UPPER(each_rec.claim_type) NOT IN ('PARTS WITHOUT HOST') AND 
            each_rec.INSTALLED_OEM_PARTS IS NOT NULL THEN
        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.INSTALLED_OEM_PARTS, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045_INP');
            v_flag := FALSE;
        ELSE            
              IF v_count != Common_Utils.count_delimited_values(each_rec.INSTALLED_OEM_PARTS, v_delimiter) THEN
                 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC075');
              End If;
            v_count := Common_Utils.count_delimited_values(each_rec.INSTALLED_OEM_PARTS, v_delimiter);
            For I In 1 .. V_Count Loop               
                v_temp_part_number := common_validation_utils.getInstalledIRPart(
                        common_utils.get_delimited_value(each_rec.INSTALLED_OEM_PARTS, v_delimiter, i), v_bu_name);
                IF v_temp_part_number IS NULL
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC046_INP');
                    v_installed_parts := NULL;
                    EXIT;
                END IF;
                IF i > 1 THEN
                    v_installed_parts := v_installed_parts || v_delimiter;
                END IF;
                v_installed_parts := v_installed_parts || v_temp_part_number;
            END LOOP;
			IF v_installed_parts IS NOT NULL AND v_installed_parts != each_rec.INSTALLED_OEM_PARTS THEN
                UPDATE stg_draft_claim SET INSTALLED_OEM_PARTS=v_installed_parts WHERE id=each_rec.id;
            ENd IF;
        END IF;

        IF each_rec.INSTALLED_OEM_PARTS_QUANTITY IS NULL THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC027_INP');
        ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.INSTALLED_OEM_PARTS_QUANTITY, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC047_INP');
        ELSIF v_flag = TRUE AND v_count != Common_Utils.count_delimited_values(each_rec.INSTALLED_OEM_PARTS_QUANTITY, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC048_INP');
        ELSIF v_flag = TRUE THEN
            FOR i IN 1 .. v_count LOOP
                IF NOT common_utils.isPositiveInteger(
                        common_utils.get_delimited_value(each_rec.INSTALLED_OEM_PARTS_QUANTITY, v_delimiter, i)) 
                THEN
                      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC054_INP');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
    END IF;

    IF each_rec.miscellaneous_parts IS NOT NULL THEN
        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.miscellaneous_parts, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC049');
            v_flag := FALSE;
        ELSE
            v_count := Common_Utils.count_delimited_values(each_rec.miscellaneous_parts, v_delimiter);
            FOR i IN 1 .. v_count LOOP
                IF NOT common_validation_utils.isValidMiscPart(
                        common_utils.get_delimited_value(each_rec.miscellaneous_parts, v_delimiter, i), v_service_provider, v_bu_name)
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC050');
                    EXIT;
                END IF;
            END LOOP;
        END IF;

        IF each_rec.misc_parts_quantity IS NULL THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC051');
        ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.misc_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC052');
        ELSIF v_flag = TRUE AND v_count != Common_Utils.count_delimited_values(each_rec.misc_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC053');
        ELSIF v_flag = TRUE THEN
            FOR i IN 1 .. v_count LOOP
                IF NOT common_utils.isPositiveInteger(
                        common_utils.get_delimited_value(each_rec.misc_parts_quantity, v_delimiter, i)) 
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC055');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
    END IF;

    IF UPPER(each_rec.claim_type) NOT IN ('PARTS WITHOUT HOST') AND 
            each_rec.replaced_non_oem_parts IS NOT NULL 
    THEN
        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC056');
            v_flag := FALSE;
        ELSE
            v_count := common_utils.count_delimited_values(each_rec.replaced_non_oem_parts, v_delimiter);
            IF each_rec.replaced_non_oem_parts_qty IS NULL THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC028');
            ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts_qty, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC057');
            ELSIF v_count != common_utils.count_delimited_values(each_rec.replaced_non_oem_parts_qty, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC058');
            ELSE
                FOR i IN 1 .. v_count LOOP
                    IF NOT common_utils.isPositiveInteger(
                            common_utils.get_delimited_value(each_rec.replaced_non_oem_parts_qty, v_delimiter, i)) 
                    THEN
                        v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC059');
                        EXIT;
                    END IF;
                END LOOP;
            END IF;

            IF each_rec.replaced_non_oem_parts_price IS NULL THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC029');
            ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts_price, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC060');
            ELSIF v_count != common_utils.count_delimited_values(each_rec.replaced_non_oem_parts_price, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC061');
            END IF;

            IF each_rec.replaced_non_oem_parts_desc IS NULL THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC030');
            ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts_desc, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC062');
            ELSIF v_count != common_utils.count_delimited_values(each_rec.replaced_non_oem_parts_desc, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC063');
            END IF;        
        END IF;
    END IF;




	BEGIN
		 IF EACH_REC.SMR_CLAIM IS NOT NULL AND EACH_REC.SMR_CLAIM NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC031');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.COMMERCIAL_POLICY IS NOT NULL AND EACH_REC.COMMERCIAL_POLICY NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC068_CP');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.IS_PART_INSTALLED IS NOT NULL AND EACH_REC.IS_PART_INSTALLED NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC069_IPI');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.IS_PART_INSTALLED_ON_OEM IS NOT NULL AND EACH_REC.IS_PART_INSTALLED_ON_OEM NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC070_PITKTSA');
		 END IF;
	END;



	BEGIN
		 IF EACH_REC.SMR_CLAIM IS NOT NULL AND each_rec.smr_claim = 'Y' THEN
            IF EACH_REC.REASON_FOR_SMR_CLAIM IS NULL THEN
			    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC032');
            ELSE
                v_smr_reason_id := common_validation_utils.getValidSMRReasonId(each_rec.reason_for_smr_claim, v_user_locale, v_bu_name);
                IF v_smr_reason_id IS NULL THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC033');
                END IF;
            END IF;
		 END IF;
	END;

	IF (UPPER(each_rec.claim_type) = 'MACHINE NON SERIALIZED' OR UPPER(each_rec.claim_type) = 'ATTACHMENT NON SERIALIZED' OR
			(UPPER(each_rec.claim_type) = 'PARTS WITH HOST' 
				AND NOT v_serialized AND v_part_installed_on_tktsa))
			AND COMMON_VALIDATION_UTILS.isConfigParamSet('invoiceNumberApplicable', v_bu_name) 
			AND EACH_REC.INVOICE_NUMBER IS NULL THEN
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC034');
	END IF;

	BEGIN
		 IF TO_NUMBER(EACH_REC.HOURS_ON_PARTS) IS NOT NULL  AND (TO_NUMBER(EACH_REC.HOURS_ON_PARTS)<0) 

		 THEN

			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC035');
		 END IF;
	END;





	BEGIN

		 IF UPPER(EACH_REC.CLAIM_TYPE) NOT IN ('PARTS WITHOUT HOST') AND 
		 EACH_REC.LABOUR_HOURS IS NOT NULL  
		 THEN
        IF EACH_REC.REASON_FOR_EXTRA_LABOR_HOURS IS NULL THEN 
        	 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036');
        ELSE 
         select count(1)  into v_id  from add_lbr_egl_service_providers alesp,additional_labor_eligibility ale where 
          alesp.additional_labor_eligibility=ale.id and ale.business_unit_info=v_bu_name and alesp.d_active = 1;
           IF v_id =0 then
              null;               
            ELSE             
                select count(1) into v_id from add_lbr_egl_service_providers alesp,additional_labor_eligibility ale where 
                alesp.SERVICE_PROVIDERS = v_dealer_id and alesp.additional_labor_eligibility=ale.id and ale.business_unit_info=v_bu_name
                and alesp.d_active = 1; 
                IF v_id = 0 then
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_ALH');
                END IF; 
            END IF; 
        END IF;  
		 END IF;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_ALH');

	END;

IF v_product IS NOT NULL THEN     




BEGIN
       IF UPPER(EACH_REC.LABOUR_HOURS)IS NOT NULL THEN 
               IF NOT common_validation_utils.isAllowedCostCategory('LABOR',v_product,v_bu_name) THEN
                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC072');                                
               END IF;
        END IF;

        EXCEPTION 
          WHEN OTHERS THEN
          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC072');
END;




BEGIN
       IF UPPER(EACH_REC.REPLACED_OEM_PARTS)IS NOT NULL THEN 
               IF NOT common_validation_utils.isAllowedCostCategory('OEM_PARTS',v_product,v_bu_name) THEN
                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_RP');                                
              END IF;
        END IF;

    EXCEPTION 
        WHEN OTHERS THEN
        v_error_code := Common_Utils.addErrorMessage(v_error_code, '123');
END;





BEGIN
       IF UPPER(EACH_REC.MISCELLANEOUS_PARTS)IS NOT NULL THEN 
            IF NOT common_validation_utils.isAllowedCostCategory('MISC_PARTS',v_product,'v_bu_name') THEN
                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_MP');                                
              END IF;
       END IF;
END;

END IF;

	IF v_repairdate IS NOT NULL AND v_failuredate IS NOT NULL 
			AND v_repairdate < v_failuredate THEN
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC037');
	END IF;

	BEGIN
        v_fault_code := common_utils.getValidFaultCode(EACH_REC.fault_location);
		 IF v_model IS NOT NULL  AND EACH_REC.fault_location IS NOT NULL AND 
     NOT COMMON_VALIDATION_UTILS.isValidFaultCodeForModelId(v_model, v_fault_code, v_bu_name)
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC038');
		 END IF;
	END;


	IF each_rec.job_code IS NOT NULL THEN
        v_count := Common_Utils.count_delimited_values_new(each_rec.job_code, ',');
        FOR i IN 1 .. v_count LOOP
            v_job_code := common_utils.getValidJobCode(common_utils.get_delimited_value(each_rec.job_code, ',', i));
            IF v_job_code IS NULL THEN
                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC039');
                EXIT;
            ELSIF v_model IS NOT NULL AND
                NOT common_validation_utils.isValidJobCodeForModelId(v_model, v_job_code, v_bu_name)
		    THEN
			    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC039');
                EXIT;
            ELSE
                IF v_job_codes_delimited IS NULL THEN
                    v_job_codes_delimited := '';
                ELSE
                    v_job_codes_delimited := v_job_codes_delimited || ',';
                END IF;
                v_job_codes_delimited := v_job_codes_delimited || v_job_code;
            END IF;

        END LOOP;
        IF each_rec.labour_hours IS NOT NULL AND Common_Utils.count_delimited_values(each_rec.labour_hours, ',') > 0 THEN
            IF Common_Utils.count_delimited_values_new(each_rec.labour_hours, ',') < v_count THEN
                v_count := Common_Utils.count_delimited_values_new(each_rec.labour_hours, ',');
            END IF;
            FOR i IN 1 .. v_count LOOP
                IF common_utils.get_delimited_value(each_rec.labour_hours, ',', i) IS NOT NULL AND 
                        common_utils.get_delimited_value(each_rec.labour_hours, ',', i) != '0' AND 
                        common_utils.get_delimited_value(each_rec.reason_for_extra_labor_hours, v_delimiter, i) IS NULL THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
	END IF;





	BEGIN
		 IF v_model IS NOT NULL  AND EACH_REC.FAULT_FOUND IS NOT NULL THEN
            IF NOT COMMON_VALIDATION_UTILS.isValidFaultFoundForModelId(v_model, EACH_REC.FAULT_FOUND, v_bu_name)
		    THEN
			    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC040');
            ELSE
                v_valid_fault_found := TRUE;
                SELECT ftd.name INTO v_fault_found
                FROM failure_type ft, 
                    i18nfailure_type_definition i18n_ftd,
                    failure_type_definition ftd
                where 
                    ft.definition_id = i18n_ftd.failure_type_definition
                    AND lower(i18n_ftd.name) = lower(ltrim(rtrim(each_rec.fault_found))) 
                    AND ft.for_item_group_id = v_model 
                    AND ft.d_active = 1
                    AND ftd.id = i18n_ftd.failure_type_definition
                    AND ROWNUM = 1;
            END IF;
		 END IF;
	END;


	BEGIN
		 IF v_valid_fault_found  AND EACH_REC.failure_detail IS NOT NULL AND 
     NOT COMMON_VALIDATION_UTILS.isValidRootCauseForModelId(v_model, EACH_REC.FAULT_FOUND, EACH_REC.failure_detail, v_bu_name)
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC042');
		 END IF;
	END;

    BEGIN
		 IF each_rec.technician_id IS NOT NULL AND 
            NOT COMMON_VALIDATION_UTILS.isValidTechnician(each_rec.technician_id, v_dealer, v_bu_name)
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC043');
		 END IF;
	END;


 IF v_error_code IS NULL
	THEN

	   UPDATE STG_DRAFT_CLAIM
	   SET
		  ERROR_STATUS = 'Y',
			ERROR_CODE = NULL,
            business_unit_name = v_bu_name,
            reason_for_smr_claim = v_smr_reason_id,
            competitor_model_id = v_competitor_model_id,
            fault_location = v_fault_code,
            job_code = v_job_codes_delimited,
            fault_found = v_fault_found,
            part_number=  v_item_number,
            repair_date= CAST (each_rec.REPAIR_DATE AS number(8,0)),                      
            failure_date= CAST (each_rec.FAILURE_DATE AS number(8,0)) ,                    
            installation_date=CAST (each_rec.INSTALLATION_DATE AS number(8,0)),
			serial_number_id = v_inv,
			item_number_id = v_item,
			model_id = v_model_id,
			part_id = v_part,
			part_serial_id = v_part_serial

		WHERE
		  ID = EACH_REC.ID;
	ELSE

		UPDATE STG_DRAFT_CLAIM
	   SET
		  ERROR_STATUS = 'N',
		  ERROR_CODE = v_error_code
		WHERE
		  ID = EACH_REC.ID;
	END IF;

    v_loop_count := v_loop_count + 1;

    IF v_loop_count = 10 THEN

      COMMIT;
      v_loop_count := 0; -- Initialize the count size
    END IF;

  END LOOP;

    BEGIN
     FOR EACH_DUP_REC IN DUP_REC
      LOOP
        UPDATE STG_DRAFT_CLAIM
        SET ERROR_STATUS    = 'N',
          ERROR_CODE        = 'Field modification code is duplicate for same Serial Number'
        WHERE serial_number = EACH_DUP_REC.serial_number
        AND campaign_code   = EACH_DUP_REC.campaign_code;
      END LOOP;
    END;

    IF v_loop_count > 0 THEN
        COMMIT;
    END IF;

  BEGIN



    SELECT DISTINCT file_upload_mgt_id 
    INTO v_file_upload_mgt_id
    FROM STG_DRAFT_CLAIM 
    WHERE ROWNUM < 2;


    BEGIN
      SELECT count(*)
      INTO v_success_count
      FROM STG_DRAFT_CLAIM 
      where file_upload_mgt_id = v_file_upload_mgt_id and error_status = 'Y';
    EXCEPTION
    WHEN OTHERS THEN
      v_success_count := 0;
    END;


    BEGIN
      SELECT count(*)
      INTO v_error_count
      FROM STG_DRAFT_CLAIM 
      where file_upload_mgt_id = v_file_upload_mgt_id and error_status = 'N';
    EXCEPTION
    WHEN OTHERS THEN
      v_error_count := 0;
    END;


    SELECT count(*)
    INTO v_count
    FROM STG_DRAFT_CLAIM 
    where file_upload_mgt_id = v_file_upload_mgt_id ;

    UPDATE FILE_UPLOAD_MGT 
    SET 
      SUCCESS_RECORDS= v_success_count, 
      ERROR_RECORDS= v_error_count,
      TOTAL_RECORDS = v_count
    WHERE ID = v_file_upload_mgt_id;

  EXCEPTION
  WHEN OTHERS THEN

    v_error := SUBSTR(SQLERRM, 1, 4000);
    UPDATE FILE_UPLOAD_MGT 
    SET 
      ERROR_MESSAGE = v_error
    WHERE ID = v_file_upload_mgt_id;

  END;
  COMMIT; -- Final Commit for the procedure

END UPLOAD_DRAFT_CLAIM_VALIDATION;
 INFO 22-Aug-12 13:06:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:51 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 




UPDATE UPLOAD_MGT SET CONSUME_ROWS_FROM=12 WHERE NAME_TO_DISPLAY='Draft Warranty Claims'

 INFO 22-Aug-12 13:06:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

commit

 INFO 22-Aug-12 13:06:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 13:06:51 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 13:06:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in Policy'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='Dealer Rental'))

ERROR 22-Aug-12 13:06:51 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01400: cannot insert NULL into ("TWMS_OWNER"."CONFIG_PARAM_OPTIONS_MAPPING"."OPTION_ID")

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01400: cannot insert NULL into ("TWMS_OWNER"."CONFIG_PARAM_OPTIONS_MAPPING"."OPTION_ID")

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-01400: cannot insert NULL into ("TWMS_OWNER"."CONFIG_PARAM_OPTIONS_MAPPING"."OPTION_ID")

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:582)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1986)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1144)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2152)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:2035)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2876)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:945)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-Aug-12 13:06:51 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-Aug-12 13:06:51 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-Aug-12 16:12:03 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 16:12:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

Insert into config_param_option (ID,DISPLAY_VALUE,VALUE) values (config_param_option_seq.nextval,'Dealer Rental','Dealer Rental')

 INFO 22-Aug-12 16:12:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 16:12:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO config_param_options_mapping (id, param_id,option_id) VALUES(cfg_param_optns_mapping_seq.NEXTVAL,(SELECT id FROM config_param WHERE DISPLAY_NAME='Customer Types Displayed in Policy'),(SELECT id FROM config_param_option WHERE DISPLAY_VALUE ='Dealer Rental'))

 INFO 22-Aug-12 16:12:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 16:12:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

commit

 INFO 22-Aug-12 16:12:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 16:12:04 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 16:12:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





Insert into upload_error (ID,CODE,UPLOAD_FIELD) values (upload_error_seq.nextval,'DC_SN_MCHNE','SERIAL NUMBER')

ERROR 22-Aug-12 16:12:04 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00001: unique constraint (TWMS_OWNER.UPLOAD_ERROR_PK) violated

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00001: unique constraint (TWMS_OWNER.UPLOAD_ERROR_PK) violated

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00001: unique constraint (TWMS_OWNER.UPLOAD_ERROR_PK) violated

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:582)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1986)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1144)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2152)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:2035)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2876)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:945)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-Aug-12 16:12:04 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-Aug-12 16:12:04 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-Aug-12 17:14:48 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 17:14:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





Insert into upload_error (ID,CODE,UPLOAD_FIELD) values (upload_error_seq.nextval,'DC_SN_MCHNE','SERIAL NUMBER')

 INFO 22-Aug-12 17:14:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:14:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

Insert into upload_error (ID,CODE,UPLOAD_FIELD) values (upload_error_seq.nextval,'DC_SN_ATTCHMNT','SERIAL NUMBER')

 INFO 22-Aug-12 17:14:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:14:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

Insert into i18nupload_error_text (ID,LOCALE,DESCRIPTION,UPLOAD_ERROR) 
values (I18N_UPLOAD_ERROR_SEQ.nextval,'en_US','Claim type not matching with Machine Serial Number',(SELECT id FROM upload_error WHERE code ='DC_SN_MCHNE'))

ERROR 22-Aug-12 17:14:48 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00001: unique constraint (TWMS_OWNER.I18NUPLOAD_ERROR_TEXT_PK) violated

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00001: unique constraint (TWMS_OWNER.I18NUPLOAD_ERROR_TEXT_PK) violated

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00001: unique constraint (TWMS_OWNER.I18NUPLOAD_ERROR_TEXT_PK) violated

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:582)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1986)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1144)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2152)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:2035)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2876)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:945)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-Aug-12 17:14:48 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-Aug-12 17:14:48 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-Aug-12 17:16:59 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 17:16:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





Insert into i18nupload_error_text (ID,LOCALE,DESCRIPTION,UPLOAD_ERROR) 
values (I18N_UPLOAD_ERROR_SEQ.nextval,'en_US','Claim type not matching with Machine Serial Number',(SELECT id FROM upload_error WHERE code ='DC_SN_MCHNE'))

 INFO 22-Aug-12 17:16:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:16:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

Insert into i18nupload_error_text (ID,LOCALE,DESCRIPTION,UPLOAD_ERROR) 
values (I18N_UPLOAD_ERROR_SEQ.nextval,'en_US','Claim type not matching with Attachment Serial Number',(SELECT id FROM upload_error WHERE code ='DC_SN_ATTCHMNT'))

 INFO 22-Aug-12 17:16:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:16:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

commit

 INFO 22-Aug-12 17:16:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:16:59 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 17:16:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create or replace
PACKAGE  COMMON_VALIDATION_UTILS AS

 FUNCTION getValidBusinessUnitName(p_business_unit_name VARCHAR2)
 RETURN VARCHAR2;


 FUNCTION isValidBusinessUnitName(p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isUserBelongsToBU(p_business_unit_name VARCHAR2, p_user_login VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidModel(p_model VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidProductCode(p_product_code VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidModelForProduct(p_model VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidModelCodeForProduct(p_model_code VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION getModelForModelCodeAndProduct(p_model_code VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN NUMBER;

 FUNCTION isValidSupplier(p_supplier_name VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidItemNumber(p_item_number VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

  FUNCTION isValidPartSerialNumber(p_serial_number VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN;


 FUNCTION isValidJobCode(p_job_code VARCHAR2, p_model VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidUser(p_user_login VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidDealer(p_dealer_login VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidDealerByNumber(p_dealer_number VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidInventory(p_serial_number VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

FUNCTION isValidInventoryWithConNum (p_container_number VARCHAR2,
	p_business_unit_name VARCHAR2, p_error_code OUT VARCHAR2)
RETURN NUMBER;

FUNCTION isValidInventoryForFieldModWCN(p_container_number VARCHAR2, 
	p_campaign_code VARCHAR2, p_dealer NUMBER, 
	p_business_unit VARCHAR2, p_rep_date DATE, p_error_code OUT VARCHAR2)
RETURN NUMBER;

 FUNCTION isValidFaultCode(p_model VARCHAR2, p_fault_code VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidFaultFound(p_model VARCHAR2, p_fault_found VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidCausedBy(p_model VARCHAR2, p_fault_found VARCHAR2, p_caused_by VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidRootCause(p_model VARCHAR2, p_fault_found VARCHAR2, p_root_cause VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidTechnician(p_technician VARCHAR2, p_dealer VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidDate (p_date VARCHAR2, p_format VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidCurrency (p_currency VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isConfigParamSet (p_config_param VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;


 FUNCTION isValidAssemblyDefinitionCode (p_code VARCHAR2, p_level NUMBER)
 RETURN BOOLEAN;

 FUNCTION isValidActionName (p_action VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidActionCode (p_action VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION getValidSMRReasonId (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
 RETURN VARCHAR2;

 FUNCTION getValidCompetitorModelId (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
 RETURN VARCHAR2;

 FUNCTION isValidSMRReason (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidFaultCodeForModelId(p_model NUMBER, p_fault_code VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidJobCodeForModelId(p_model NUMBER, p_job_code VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidFaultFoundForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidCausedByForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_caused_by VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidRootCauseForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_root_cause VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isAllowedCostCategory(p_cost_cat_code VARCHAR2,p_product VARCHAR2,p_business_unit_info VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidDelimitedValue(p_value VARCHAR2, p_delimiter VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidReplacedIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidReplacedIRPart(p_serial_number VARCHAR2, p_item_number VARCHAR2, p_business_unit VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidInstalledIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidAlarmCode(p_alarm_code VARCHAR2,p_product VARCHAR2, p_business_unit VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidMiscPart(p_item_number VARCHAR2, p_service_provider NUMBER, p_business_unit VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidCountry(p_country_code VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidState(p_state VARCHAR2, p_country_code VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidCity(p_city VARCHAR2, p_state VARCHAR2, p_country_code VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidZipcode(p_zipcode VARCHAR2, p_city VARCHAR2, p_state VARCHAR2, p_country_code VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION isValidCampaignCode(p_campaign_code VARCHAR2, p_dealer NUMBER, p_business_unit VARCHAR2,p_date DATE,v_service_provider_number VARCHAR2,p_serial_number VARCHAR2)
 RETURN BOOLEAN;

FUNCTION isValidInventoryForFieldMod(p_serial_number VARCHAR2, 
	p_campaign_code VARCHAR2,p_dealer NUMBER,
	p_business_unit VARCHAR2,p_rep_date DATE,p_error_code OUT VARCHAR2)
RETURN NUMBER;

 FUNCTION isClaimTypeAllowed(p_type VARCHAR2, p_business_unit VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION hasDuplicateSerializedPart(p_value_serialNo     VARCHAR2,p_value_partNo     VARCHAR2,p_delimiter VARCHAR2)
 RETURN BOOLEAN;

 FUNCTION getSerialNoPartNo(p_value_serialNo     VARCHAR2,p_value_partNo     VARCHAR2,p_delimiter VARCHAR2,p_index     NUMBER)
 RETURN VARCHAR2;

 FUNCTION getValidCausalPart(p_item_number VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN VARCHAR2;

 FUNCTION getReplacedIRPartNumber(p_item_number VARCHAR2, p_business_unit VARCHAR2)
 RETURN VARCHAR2;

 FUNCTION getInstalledIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
 RETURN VARCHAR2;

FUNCTION getOwnershipForInventory(p_inv NUMBER)
RETURN NUMBER;

FUNCTION getServiceProviderType(p_service_provider NUMBER)
RETURN VARCHAR2;

FUNCTION isAllowedCustomerTypeForSearch(p_cust_type VARCHAR2,p_bu VARCHAR2)
RETURN BOOLEAN;

 FUNCTION isValidSerialNumber(p_serial_number VARCHAR2,
	p_business_unit_name VARCHAR2, p_model VARCHAR2,
	p_dealer_id NUMBER, p_claim_type VARCHAR2, p_error_code OUT VARCHAR2)
RETURN NUMBER;

FUNCTION getValidPartSerialNumber(
	p_serial_number VARCHAR2, 
	p_business_unit_name VARCHAR2)
RETURN NUMBER;

FUNCTION isValidItemForNonSerialized (
	p_item_number VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER;

FUNCTION isValidModelForNonSerialized (
	p_model_name VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER;

FUNCTION isValidItemForPartsClaim(
	p_item_number VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER;

end COMMON_VALIDATION_UTILS;
 INFO 22-Aug-12 17:17:00 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:17:00 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 17:17:00 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create or replace
PACKAGE BODY COMMON_VALIDATION_UTILS AS 

  FUNCTION getValidBusinessUnitName(p_business_unit_name VARCHAR2)
  RETURN VARCHAR2
  IS
  v_business_unit_name VARCHAR2(255) := NULL;
  BEGIN

    SELECT NAME 
    INTO v_business_unit_name
    FROM business_unit
    WHERE 
    lower(name) = lower(p_business_unit_name) AND ROWNUM = 1;
    RETURN v_business_unit_name;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN NULL;
  END getValidBusinessUnitName;


  FUNCTION isValidBusinessUnitName(p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_business_unit_name VARCHAR2(255) := NULL;
  BEGIN

    SELECT NAME 
    INTO v_business_unit_name
    FROM business_unit
    WHERE 
    lower(name) = lower(p_business_unit_name) AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidBusinessUnitName;

  FUNCTION isUserBelongsToBU(p_business_unit_name VARCHAR2, p_user_login VARCHAR2)
  RETURN BOOLEAN
  IS
  v_business_unit_name VARCHAR2(255) := NULL;
  BEGIN
    SELECT bum.bu
    INTO v_business_unit_name
    FROM org_user u, bu_user_mapping bum
    WHERE 
	lower(bum.bu) = lower(p_business_unit_name)
	AND u.login=p_user_login 
	AND u.id=bum.org_user 
	AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isUserBelongsToBU;


  FUNCTION isValidModel(p_model VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_model VARCHAR2(255) := NULL;
  BEGIN

    SELECT NAME 
    INTO v_model
    FROM item_group
    WHERE 
    lower(name) = lower(ltrim(rtrim(p_model))) 
    and lower(business_unit_info) = lower(p_business_unit_name)
    and item_group_type = 'MODEL' and d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidModel;


 FUNCTION isValidProductCode(p_product_code VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_product_code NUMBER := NULL;
  BEGIN

    SELECT id
    INTO v_product_code
    FROM item_group
    WHERE 
    lower(name) = lower(ltrim(rtrim(p_product_code))) 
    and lower(business_unit_info) = lower(p_business_unit_name)
    and item_group_type = 'PRODUCT' and d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidProductCode;


  FUNCTION isValidModelForProduct(p_model VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_model VARCHAR2(255) := NULL;
  BEGIN

    SELECT m.NAME 
    INTO v_model
    FROM item_group m,item_group p1,item_group p2
    WHERE 
    lower(m.name) = lower(ltrim(rtrim(p_model))) 
    and (lower(p1.name) = lower(ltrim(rtrim(p_product))) and p1.item_group_type='PRODUCT'
      or lower(p2.name) = lower(ltrim(rtrim(p_product))) and p1.item_group_type='PRODUCT')
    and lower(m.business_unit_info) = lower(p_business_unit_name)
    and lower(p1.business_unit_info) = lower(p_business_unit_name)
    and lower(p2.business_unit_info) = lower(p_business_unit_name)
    and m.is_part_of=p1.id and p1.d_active = 1
    and p1.is_part_of=p2.id and p2.d_active = 1
    and m.item_group_type = 'MODEL' and m.d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidModelForProduct;


  FUNCTION isValidModelCodeForProduct(p_model_code VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_model VARCHAR2(255) := NULL;
  BEGIN

    SELECT m.NAME 
    INTO v_model
    FROM item_group m,item_group p1,item_group p2
    WHERE 
    lower(m.group_code) = lower(ltrim(rtrim(p_model_code))) 
    and (lower(p1.name) = lower(ltrim(rtrim(p_product))) and p1.item_group_type='PRODUCT'
      or lower(p2.name) = lower(ltrim(rtrim(p_product))) and p2.item_group_type='PRODUCT')
    and lower(m.business_unit_info) = lower(p_business_unit_name)
    and lower(p1.business_unit_info) = lower(p_business_unit_name)
    and lower(p2.business_unit_info) = lower(p_business_unit_name)
    and m.is_part_of=p1.id and p1.d_active = 1
    and p1.is_part_of=p2.id and p2.d_active = 1
    and m.item_group_type = 'MODEL' and m.d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidModelCodeForProduct;

  FUNCTION getModelForModelCodeAndProduct(p_model_code VARCHAR2, p_product VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN NUMBER
  IS
  v_model NUMBER := NULL;
  v_scheme NUMBER := NULL;
  BEGIN
	SELECT id INTO v_scheme
	FROM item_scheme WHERE UPPER(name)='PROD STRUCT SCHEME'
		AND business_unit_info=p_business_unit_name;

	SELECT A.id INTO v_model
	FROM
	(SELECT IG.group_code,
	  IG.item_group_type,
	  IG.business_unit_info,
	  IG.id
	FROM item_group IG
	  CONNECT BY PRIOR IG.ID = IG.IS_PART_OF
	  START WITH
	  (
		UPPER(IG.NAME)           = UPPER(LTRIM(RTRIM(p_product)))
	  AND IG.BUSINESS_UNIT_INFO = p_business_unit_name
	  AND IG.ITEM_GROUP_TYPE    = 'PRODUCT'
	  AND IG.D_ACTIVE           = 1
	  AND IG.SCHEME             = v_scheme
	  )
	) A
	WHERE A.ITEM_GROUP_TYPE  = 'MODEL'
	AND UPPER(A.group_code)               = UPPER(LTRIM(RTRIM(p_model_code)))
	AND A.BUSINESS_UNIT_INFO = p_business_unit_name
	AND ROWNUM               = 1;

    RETURN v_model;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN NULL;
  END getModelForModelCodeAndProduct;

  FUNCTION isValidItemNumber(p_item_number VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_item_id NUMBER := NULL;
  v_item_number_index NUMBER := -1;
  v_item_number VARCHAR2(255) := NULL;
  BEGIN


    SELECT i.ID 
    INTO v_item_id
    FROM ITEM i, PARTY p 
    WHERE ( UPPER(i.alternate_item_number) = UPPER(ltrim(rtrim(p_item_number)))  OR 
	UPPER(i.item_number) = UPPER(ltrim(rtrim(p_item_number))) )
    AND lower(i.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name)))
    AND i.owned_by = p.ID
    AND p.NAME = common_utils.constant_oem_name and i.d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidItemNumber;



  FUNCTION isValidPartSerialNumber(p_serial_number VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_item_id NUMBER := NULL;  
  BEGIN


    SELECT i.ID 
    INTO v_item_id
    FROM INVENTORY_ITEM i, PARTY p 
    WHERE lower(i.serial_number) = lower(ltrim(rtrim(p_serial_number))) 
    AND lower(i.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name)))
    and i.d_active = 1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidPartSerialNumber;


  FUNCTION isValidSupplier(p_supplier_name VARCHAR2, p_business_unit_name VARCHAR2)
  RETURN BOOLEAN
  IS
  v_supplier_id NUMBER := NULL;
  BEGIN

    SELECT s.ID 
    INTO v_supplier_id
    FROM SUPPLIER s, bu_org_mapping m
    WHERE UPPER(supplier_number) = UPPER(p_supplier_name)
        AND s.id = m.org AND UPPER(m.bu) = UPPER(p_business_unit_name)
        AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidSupplier;


 FUNCTION isValidJobCode(p_job_code VARCHAR2, p_model VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_job_code VARCHAR2(256) := NULL;
  BEGIN

    select to_char(spd.code)
    INTO v_job_code
    FROM 
      action_node an,
      service_procedure sp,
      service_procedure_definition spd,
      (select id from assembly connect by prior id = is_part_of_assembly start with id in 
          ( select a.id 
            from 
            failure_structure fs,
            failure_structure_assemblies fsa,
            assembly a,
            item_group ig
            where
              a.active = 1 and
              fs.for_item_group = ig.id and
              fs.id = fsa.failure_structure and
              fsa.assemblies = a.id and
              upper(ig.name) = upper(p_model))) adata
    WHERE
      adata.id = an.defined_for and
      an.id = sp.defined_for and
      an.active = 1 and
      sp.definition = spd.id and
      lower(spd.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and
      lower(spd.code) = lower(ltrim(rtrim(p_job_code))) and spd.d_active = 1 AND ROWNUM = 1;

    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidJobCode;


 FUNCTION isValidUser(p_user_login VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_user_login VARCHAR2(256) := NULL;
  BEGIN

    SELECT OU.LOGIN  
    INTO v_user_login
    FROM ORG_USER OU, BU_USER_MAPPING BUM 
    WHERE lower(OU.login) = lower(ltrim(rtrim(p_user_login))) AND 
    OU.ID = BUM.ORG_USER AND 
    lower(bum.bu) = lower(ltrim(rtrim(p_business_unit_name))) AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidUser;


 FUNCTION isValidDealer(p_dealer_login VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_dealer_login VARCHAR2(256) := NULL;
  BEGIN

    SELECT OU.LOGIN  
    INTO v_dealer_login
    FROM ORG_USER OU, DEALERSHIP dealer, BU_USER_MAPPING BUM 
    WHERE lower(OU.login) = lower(ltrim(rtrim(p_dealer_login))) AND 
    OU.ID = BUM.ORG_USER AND dealer.id = OU.belongs_to_organization AND 
    lower(bum.bu) = lower(ltrim(rtrim(p_business_unit_name))) AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidDealer;


 FUNCTION isValidDealerByNumber(p_dealer_number VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_dealer_number VARCHAR2(256) := NULL;
  BEGIN

    SELECT dealer.dealer_number  
    INTO v_dealer_number
    from bu_org_mapping bom, dealership dealer 
    where lower(dealer.dealer_number) = lower(ltrim(rtrim(p_dealer_number))) and dealer.id = bom.org and 
    lower(bom.bu) = lower(ltrim(rtrim(p_business_unit_name))) AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidDealerByNumber;


 FUNCTION isValidInventory (p_serial_number VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_inventory VARCHAR2(256) := NULL;
  BEGIN

    SELECT ID   
    INTO v_inventory
    FROM INVENTORY_ITEM 
    WHERE lower(serial_number) = lower(ltrim(rtrim(p_serial_number))) AND 
    lower(business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and d_active=1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidInventory;


FUNCTION isValidInventoryWithConNum (
	p_container_number VARCHAR2, 
	p_business_unit_name VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
v_inventory NUMBER := NULL;
BEGIN
	p_error_code := NULL;
	SELECT ID INTO v_inventory
	FROM INVENTORY_ITEM 
	WHERE lower(vin_number) = lower(ltrim(rtrim(p_container_number)))
		AND business_unit_info=p_business_unit_name 
		AND d_active=1 AND serialized_part = 0;
	RETURN v_inventory;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN
		p_error_code := 'CN_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'CN_DUP';
		RETURN NULL;
END isValidInventoryWithConNum;

 FUNCTION isValidFaultCode(p_model VARCHAR2, p_fault_code VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_fault_code            VARCHAR2(256) := NULL;
  v_failure_structure     NUMBER := NULL;
  v_complete_fault_code   VARCHAR2(4000) := NULL;
  BEGIN

    SELECT fcd.code 
    INTO v_fault_code
    FROM 
      fault_code_definition fcd,
      fault_code fc,
        (select fault_code from assembly where fault_code is not null connect by prior id = 
            is_part_of_assembly start with id in 
            (select a.id 
            from 
              failure_structure fs,
              failure_structure_assemblies fsa,
              assembly a,
              item_group ig
            where
              a.active = 1 and
              fs.for_item_group = ig.id and
              fs.id = fsa.failure_structure and
              fsa.assemblies = a.id and
              upper(ig.name) = upper(p_model))) adata
    WHERE
      adata.fault_code = fc.id and
      fc.definition = fcd.id and
      lower(fcd.code) = lower(ltrim(rtrim(p_fault_code))) and 
      lower(fcd.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and fcd.d_active=1 AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidFaultCode;


 FUNCTION isValidFaultFound(p_model VARCHAR2, p_fault_found VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
 IS
  v_fault_found NUMBER := 0;
 BEGIN
    SELECT ft.id 
    INTO v_fault_found
    from FAILURE_TYPE ft, 
    FAILURE_TYPE_DEFINITION ftd, 
    ITEM_GROUP model
    where 
    ft.definition_id = ftd.id and 
    lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) and ft.for_item_group_id = model.id and 
    lower(model.name) = lower(ltrim(rtrim(p_model))) and model.d_active = 1 and ft.d_active = 1 and 
    lower(model.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and 
	lower(model.item_group_type) = 'model' AND ROWNUM = 1;

    RETURN TRUE;
 EXCEPTION
 WHEN OTHERS THEN
    RETURN FALSE;
 END isValidFaultFound;


 FUNCTION isValidCausedBy(p_model VARCHAR2, p_fault_found VARCHAR2, p_caused_by VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_caused_by VARCHAR2(256) := NULL;
  BEGIN
    select fc.id 
    INTO v_caused_by
    from FAILURE_CAUSE fc , FAILURE_CAUSE_DEFINITION fcd , FAILURE_TYPE ft, 
    FAILURE_TYPE_DEFINITION ftd, ITEM_GROUP model
    where fc.definition_id = fcd.id and lower(fcd.name) = lower(ltrim(rtrim(p_caused_by))) and 
    fc.failure_type_id = ft.id and ft.definition_id = ftd.id and 
    lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) and ft.for_item_group_id = model.id and 
    lower(model.name) = lower(ltrim(rtrim(p_model))) and model.d_active = 1 and fc.d_active = 1 and 
    lower(model.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and 
	lower(model.item_group_type) = 'model' AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
 END isValidCausedBy;


 FUNCTION isValidRootCause(p_model VARCHAR2, p_fault_found VARCHAR2, p_root_cause VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
  IS
  v_root_cause VARCHAR2(256) := NULL;
  BEGIN
    select frc.id 
    INTO v_root_cause
    from FAILURE_ROOT_CAUSE frc , FAILURE_ROOT_CAUSE_DEFINITION frcd , FAILURE_TYPE ft, 
    FAILURE_TYPE_DEFINITION ftd, ITEM_GROUP model
    where frc.definition_id = frcd.id and lower(frcd.name) = lower(ltrim(rtrim(p_root_cause))) and 
    frc.failure_type_id = ft.id and ft.definition_id = ftd.id and 
    lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) and ft.for_item_group_id = model.id and 
    lower(model.name) = lower(ltrim(rtrim(p_model))) and model.d_active = 1 and frc.d_active = 1 and 
    lower(model.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and 
	lower(model.item_group_type) = 'model' AND ROWNUM = 1;
    RETURN TRUE;
  EXCEPTION 
  WHEN OTHERS THEN
    RETURN FALSE;
  END isValidRootCause;


FUNCTION isValidTechnician(p_technician VARCHAR2, p_dealer VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_technician VARCHAR2(256) := NULL;
BEGIN

    SELECT OU.LOGIN  
    INTO v_technician
    FROM ORG_USER TECHNICIAN, BU_USER_MAPPING BUM, USER_ROLES ur, ROLE role, 
        org_user_belongs_to_orgs torgs, service_provider dealer,
        ORG_USER OU, org_user_belongs_to_orgs orgs
    WHERE 
        lower(TECHNICIAN.login) = lower(ltrim(rtrim(p_technician))) 
        AND TECHNICIAN.d_active = 1 
        AND technician.ID = BUM.ORG_USER 
        AND lower(bum.bu) = lower(ltrim(rtrim(p_business_unit_name))) 
        AND ur.org_user = TECHNICIAN.id 
        AND ur.roles = role.id 
        AND lower(role.name) = 'technician' 
        AND technician.id = torgs.org_user
        AND torgs.belongs_to_organizations = dealer.id
        AND lower(OU.login) = lower(ltrim(rtrim(p_dealer))) 
        AND ou.id = orgs.org_user
        AND orgs.belongs_to_organizations = dealer.id 
        AND ROWNUM = 1;
RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidTechnician;


 FUNCTION isValidDate (p_date VARCHAR2, p_format VARCHAR2)
 RETURN BOOLEAN
 IS
  v_date DATE := NULL;
  BEGIN
   SELECT TO_DATE(p_date,p_format)
   INTO   v_date
   FROM   DUAL;
   RETURN TRUE;
  EXCEPTION
  WHEN OTHERS THEN
   RETURN FALSE;
  END isValidDate;


 FUNCTION isValidCurrency (p_currency VARCHAR2)
 RETURN BOOLEAN
 IS
  v_currency VARCHAR2(256) := NULL;
  BEGIN
   SELECT from_currency
   INTO   v_currency
   FROM   CURRENCY_EXCHANGE_RATE
   WHERE upper(from_currency) = upper(ltrim(rtrim(p_currency))) AND ROWNUM = 1;
   RETURN TRUE;
  EXCEPTION
  WHEN OTHERS THEN
   RETURN FALSE;
  END isValidCurrency;


 FUNCTION isConfigParamSet (p_config_param VARCHAR2, p_business_unit_name VARCHAR2)
 RETURN BOOLEAN
 IS
  v_config_value VARCHAR2(10) := NULL;
  BEGIN
    SELECT cpo.value INTO v_config_value
    FROM config_param cp, config_value cv, config_param_option cpo
    WHERE cp.id=cv.config_param AND cp.type='boolean'
	AND upper(cp.name) = upper(p_config_param) 
	AND cp.d_active=1 AND cv.d_active=1
    AND cv.business_unit_info = p_business_unit_name
	AND cv.config_param_option=cpo.id;
	IF lower(v_config_value) = 'true' THEN
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
  EXCEPTION
  WHEN OTHERS THEN
   RETURN FALSE;
  END isConfigParamSet;


FUNCTION isValidAssemblyDefinitionCode (p_code VARCHAR2, p_level NUMBER)
RETURN BOOLEAN
IS
    v_assembly_id       NUMBER;
BEGIN
    IF p_code = '0000' THEN
        RETURN FALSE;
    END IF;

    SELECT id INTO v_assembly_id
    FROM assembly_definition 
    WHERE lower(code) = lower(p_code) AND assembly_level = p_level
		AND d_active=1;
	RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidAssemblyDefinitionCode;

FUNCTION isValidActionName (p_action VARCHAR2)
RETURN BOOLEAN
IS
    v_id       NUMBER;
BEGIN
    SELECT id INTO v_id FROM action_definition 
    WHERE LOWER(name) = LOWER(p_action) AND ROWNUM=1;
    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidActionName;

FUNCTION isValidActionCode (p_action VARCHAR2)
RETURN BOOLEAN
IS
    v_id       NUMBER;
BEGIN
    SELECT id INTO v_id FROM action_definition 
    WHERE LOWER(code) = LOWER(p_action) AND d_active=1;
    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidActionCode;

FUNCTION getValidSMRReasonId (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
RETURN VARCHAR2
IS
    v_lov_id VARCHAR2(255);
BEGIN
    SELECT l.id INTO v_lov_id
    FROM list_of_values l , i18nlov_text t 
    WHERE 
	l.id=t.list_of_i18n_values 
	AND (t.locale = p_locale OR t.locale='en_US') 
	AND t.description = p_lov
        AND UPPER(l.business_unit_info) = UPPER(p_business_unit_info)
        AND l.type = 'SMRREASON'
        AND l.d_active = 1
        AND l.state='active'
	AND ROWNUM=1;

    RETURN v_lov_id;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END getValidSMRReasonId;

FUNCTION getValidCompetitorModelId (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
RETURN VARCHAR2
IS
    v_lov_id VARCHAR2(255);
BEGIN
    SELECT l.id INTO v_lov_id
    FROM list_of_values l , i18nlov_text t 
    WHERE 
	l.id=t.list_of_i18n_values 
	AND (t.locale = p_locale OR t.locale='en_US') 
	AND UPPER(t.description) = UPPER(p_lov)
        AND UPPER(l.business_unit_info) = UPPER(p_business_unit_info)
        AND l.type = 'CLAIMCOMPETITORMODEL'
        AND l.d_active = 1
        AND l.state='active'
	AND ROWNUM=1;

    RETURN v_lov_id;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END getValidCompetitorModelId;

FUNCTION isValidSMRReason (p_lov VARCHAR2, p_locale VARCHAR2, p_business_unit_info VARCHAR2)
RETURN BOOLEAN
IS
    v_lov_id       NUMBER;
BEGIN

    SELECT l.id INTO v_lov_id
    FROM list_of_values l , i18nlov_text t 
    WHERE 
	l.id=t.list_of_i18n_values 
	AND (t.locale = p_locale OR t.locale='en_US') 
	AND t.description = p_lov
        AND UPPER(l.business_unit_info) = UPPER(p_business_unit_info)
        AND l.type = 'SMRREASON'
        AND l.d_active = 1
        AND l.state='active'
	AND ROWNUM=1;

    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidSMRReason;


FUNCTION isValidFaultCodeForModelId(p_model NUMBER, p_fault_code VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_fault_code            VARCHAR2(256) := NULL;
BEGIN

    SELECT fcd.code 
    INTO v_fault_code
    FROM fault_code_definition fcd, fault_code fc,
        (select fault_code from assembly where fault_code is not null 
            connect by prior id = is_part_of_assembly start with id in 
            (select a.id 
            from failure_structure fs, failure_structure_assemblies fsa, assembly a
            where a.active = 1 and
                fs.for_item_group = p_model and
                fs.id = fsa.failure_structure and
                fsa.assemblies = a.id )
        ) adata
    WHERE
        adata.fault_code = fc.id and
        fc.definition = fcd.id and
        lower(fcd.code) = lower(ltrim(rtrim(p_fault_code))) and 
        lower(fcd.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and 
        fcd.d_active=1 AND ROWNUM = 1;

    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidFaultCodeForModelId;


FUNCTION isValidJobCodeForModelId(p_model NUMBER, p_job_code VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_job_code VARCHAR2(256) := NULL;
BEGIN

    select to_char(spd.code)
    INTO v_job_code
    FROM action_node an,
        service_procedure sp,
        service_procedure_definition spd,
        (select id from assembly connect by prior id = is_part_of_assembly start with id in 
            ( select a.id 
            from 
                failure_structure fs,
                failure_structure_assemblies fsa,
                assembly a
            where
                a.active = 1 and
                fs.for_item_group = p_model and
                fs.id = fsa.failure_structure and
                fsa.assemblies = a.id)
        ) adata
    WHERE
        adata.id = an.defined_for and
        an.id = sp.defined_for and
        an.active = 1 and
        sp.definition = spd.id and
        lower(spd.business_unit_info) = lower(ltrim(rtrim(p_business_unit_name))) and
        lower(spd.code) = lower(ltrim(rtrim(p_job_code))) and spd.d_active = 1 AND ROWNUM = 1;

    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidJobCodeForModelId;


FUNCTION isValidFaultFoundForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_fault_found NUMBER := 0;
BEGIN
    SELECT ft.id 
    INTO v_fault_found
    from FAILURE_TYPE ft, 
        I18NFAILURE_TYPE_DEFINITION ftd
    where 
        ft.definition_id = ftd.failure_type_definition
        AND lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) 
        AND ft.for_item_group_id = p_model 
        AND ft.d_active = 1
        AND ROWNUM = 1;

    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidFaultFoundForModelId;


FUNCTION isValidCausedByForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_caused_by VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_caused_by VARCHAR2(256) := NULL;
BEGIN
    select fc.id 
    INTO v_caused_by
    from FAILURE_CAUSE fc , FAILURE_CAUSE_DEFINITION fcd , 
        FAILURE_TYPE ft, FAILURE_TYPE_DEFINITION ftd
    where fc.definition_id = fcd.id 
        and lower(fcd.name) = lower(ltrim(rtrim(p_caused_by))) 
        and fc.failure_type_id = ft.id and ft.definition_id = ftd.id 
        and lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) 
        and ft.for_item_group_id = p_model 
        and fc.d_active = 1
        AND ROWNUM = 1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidCausedByForModelId;

FUNCTION isValidRootCauseForModelId(p_model NUMBER, p_fault_found VARCHAR2, p_root_cause VARCHAR2, p_business_unit_name VARCHAR2)
RETURN BOOLEAN
IS
    v_root_cause VARCHAR2(256) := NULL;
BEGIN
    select frc.id 
    INTO v_root_cause
    from FAILURE_ROOT_CAUSE frc , FAILURE_ROOT_CAUSE_DEFINITION frcd ,
        FAILURE_TYPE ft, FAILURE_TYPE_DEFINITION ftd
    where frc.definition_id = frcd.id 
        and lower(frcd.name) = lower(ltrim(rtrim(p_root_cause))) 
        and frc.failure_type_id = ft.id 
        and ft.definition_id = ftd.id 
        and lower(ftd.name) = lower(ltrim(rtrim(p_fault_found))) 
        and ft.for_item_group_id = p_model 
        and frc.d_active = 1 
        and ROWNUM = 1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidRootCauseForModelId;


FUNCTION isValidDelimitedValue(p_value VARCHAR2, p_delimiter VARCHAR2)
RETURN BOOLEAN
IS
  v_index         NUMBER := 1;
  v_cur_idx       NUMBER := 1;
  v_delim_length  NUMBER;
  v_value_length  NUMBER;
BEGIN
  v_delim_length := LENGTH(p_delimiter);
  v_value_length := LENGTH(p_value);

  IF v_value_length <= v_delim_length THEN
    RETURN TRUE;
  END IF;

  WHILE v_index != 0 AND v_cur_idx <= v_value_length LOOP
    v_index := INSTR(p_value, p_delimiter, v_cur_idx);
    IF v_index = v_cur_idx THEN
      RETURN FALSE;
    ELSIF v_index = v_value_length - v_delim_length + 1 THEN
      RETURN FALSE;
    ELSIF v_index > v_cur_idx THEN
      v_cur_idx := v_index + v_delim_length;
    END IF;
  END LOOP;

  RETURN TRUE;
END isValidDelimitedValue;

FUNCTION isValidReplacedIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN
    SELECT i.id INTO v_id
    FROM item i, item_group ig,
        config_param p,config_value v,config_param_option o
    WHERE p.name='replacedItemsOnClaimConfiguration' AND
        v.config_param=p.id AND v.config_param_option=o.id AND
        UPPER(ig.name)=UPPER(o.value) AND
        i.model=ig.id AND 
        v.business_unit_info=p_business_unit AND
        i.business_unit_info=p_business_unit AND
        p.d_active=1 AND i.d_active=1 AND
        i.owned_by in (SELECT org.id FROM party pty,organization org 
            WHERE pty.id=org.id AND pty.name='OEM') AND
        (i.item_number=p_item_number OR i.alternate_item_number=p_item_number)
        AND ROWNUM=1;

    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidReplacedIRPart;

FUNCTION isValidReplacedIRPart(p_serial_number VARCHAR2, p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN
    SELECT i.id INTO v_id
    FROM item i, item_group ig,inventory_item ii,
        config_param p,config_value v,config_param_option o
    WHERE p.name='replacedItemsOnClaimConfiguration' AND
        v.config_param=p.id AND v.config_param_option=o.id AND
        UPPER(ig.name)=UPPER(o.value) AND
        i.model=ig.id AND 
        ii.serial_number=p_serial_number AND
        ii.of_type=i.id AND
        v.business_unit_info=p_business_unit AND
        i.business_unit_info=p_business_unit AND
        p.d_active=1 AND i.d_active=1 AND
        i.owned_by in (SELECT org.id FROM party pty,organization org 
            WHERE pty.id=org.id AND pty.name='OEM') AND
        (i.item_number=p_item_number OR i.alternate_item_number=p_item_number)
        AND ROWNUM=1;

    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidReplacedIRPart;

FUNCTION isValidInstalledIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
Begin
    SELECT i.id INTO v_id
      FROM item i, item_group ig, item_group pg 
      WHERE
        I.Business_Unit_Info = P_Business_Unit And I.D_Active = 1 
        AND (i.item_number =p_item_number or i.alternate_item_number =p_item_number) 
        AND i.owned_by = 1 AND i.model = ig.ID 
        AND i.service_part = 1  AND (UPPER(pg.name) in ('PART'))  
        AND ig.tree_id = pg.tree_id  
        AND ig.lft >= pg.lft  
        And Ig.Rgt <= Pg.Rgt  
        AND rownum =1; 


    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidInstalledIRPart;

FUNCTION isValidAlarmCode(p_alarm_code VARCHAR2,p_product VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN       
      select COUNT(1) into  v_id from item_groups_alarm_code where alarm_code in (select id from alarm_code where  code = p_alarm_code);
      IF v_id=0 then
          RETURN TRUE;
      ELSE    
        SELECT COUNT(1) into v_id FROM DUAL WHERE p_product IN (
        select ITEM_GROUP from item_groups_alarm_code where alarm_code in (select id from alarm_code where  code = p_alarm_code));

         IF v_id >0 then     
          RETURN TRUE;
          else
            RETURN FALSE;
         END IF;
       END IF;   
    EXCEPTION 
        WHEN OTHERS THEN
        RETURN FALSE;
END isValidAlarmCode;

FUNCTION isAllowedCostCategory(p_cost_cat_code VARCHAR2,p_product VARCHAR2,p_business_unit_info VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN
    select COUNT(1) into  v_id from COSTCAT_APPL_PRODUCTS cp, COST_CATEGORY c,item_group g where cp.cost_category = c.id and c.code = p_cost_cat_code
      and g.id =cp.item_group  and g.business_unit_info = p_business_unit_info;
      IF v_id=0 then
          RETURN TRUE;
      ELSE    
        SELECT COUNT(1) into v_id from COSTCAT_APPL_PRODUCTS cp, COST_CATEGORY c where cp.cost_category = c.id 
        and c.code = p_cost_cat_code and cp.item_group = p_product;
         IF v_id >0 then
            RETURN TRUE;
         else
            RETURN FALSE;
         END IF;
       END IF;
    EXCEPTION 
        WHEN OTHERS THEN
        RETURN FALSE;
END isAllowedCostCategory;


FUNCTION isValidMiscPart(p_item_number VARCHAR2, p_service_provider NUMBER, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
  v_id         NUMBER := NULL;
BEGIN
   select
        distinct miscellane6_.id INTO v_id
    from
        misc_item_criteria miscellane0_ 
    inner join
        misc_item_config itemconfig1_ 
            on miscellane0_.id=itemconfig1_.for_criteria 
    inner join
        misc_item miscellane6_ 
            on itemconfig1_.miscellaneous_item=miscellane6_.id 
    left outer join
        dealer_group dealergrou2_ 
            on miscellane0_.dealer_group=dealergrou2_.id cross 
    join
        dealer_group dealergrou3_ 
    inner join
        dealers_in_group includedde4_ 
            on dealergrou3_.id=includedde4_.dealer_group 
    inner join
        service_provider servicepro5_ 
            on includedde4_.dealer=servicepro5_.id 
    inner join
        organization servicepro5_1_ 
            on servicepro5_.id=servicepro5_1_.id 
    inner join
        party servicepro5_2_ 
            on servicepro5_.id=servicepro5_2_.id cross 
    join
        misc_item miscellane7_ 
    where
        miscellane0_.business_unit_info in (
            p_business_unit
        ) 
        and miscellane0_.d_active = 1 
        and dealergrou3_.business_unit_info in (
           p_business_unit
        ) 
        and dealergrou3_.d_active = 1 
        and itemconfig1_.miscellaneous_item=miscellane7_.id 
        and (
            miscellane0_.service_provider is null 
            or miscellane0_.service_provider=p_service_provider
        ) 
        and (
            dealergrou2_.id is null 
            or dealergrou2_.tree_id=dealergrou3_.tree_id 
            and dealergrou2_.lft<=dealergrou3_.lft 
            and dealergrou3_.rgt<=dealergrou2_.rgt 
            and p_service_provider=servicepro5_.id
        ) 
        and (
            upper(miscellane7_.part_number) =upper(p_item_number)
        ) 
        and miscellane0_.active=1 ;
    RETURN TRUE;
EXCEPTION 
WHEN OTHERS THEN
BEGIN 
   SELECT i.id INTO v_id
    FROM misc_item_criteria cr, misc_item_config cfg, misc_item i
    WHERE cr.active=1 AND cr.service_provider=p_service_provider AND
        cfg.for_criteria=cr.id AND cfg.active=1 AND
        cfg.miscellaneous_item=i.id AND
        i.part_number=p_item_number AND
        i.business_unit_info=p_business_unit AND ROWNUM=1;
           RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN

    BEGIN 
        SELECT i.id INTO v_id
        FROM dealers_in_group dig,dealer_group grp,dealer_scheme_purposes sp, 
            purpose pp,misc_item_criteria cr, misc_item_config cfg, misc_item i
        WHERE 
            dig.dealer=p_service_provider AND
            dig.dealer_group = grp.id AND
            grp.scheme = sp.dealer_scheme AND
            sp.purposes = pp.id AND
            pp.name='Dealer Rates' AND
            cr.dealer_group = grp.id AND
            cr.active=1 and cfg.active=1 AND
            cfg.for_criteria=cr.id AND
            cfg.miscellaneous_item=i.id AND 
            i.part_number=p_item_number AND 
            i.business_unit_info=p_business_unit AND rownum=1;
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN FALSE;
     END;
     END;
END isValidMiscPart;


FUNCTION isValidCountry(p_country_code VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
BEGIN
    SELECT id INTO v_id
    FROM country WHERE UPPER(code) = UPPER(p_country_code);
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidCountry;

FUNCTION isValidState(p_state VARCHAR2, p_country_code VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
BEGIN
    SELECT id INTO v_id
    FROM msa 
    WHERE UPPER(country) = UPPER(p_country_code) 
        AND UPPER(st) = UPPER(p_state) AND ROWNUM=1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidState;

FUNCTION isValidCity(p_city VARCHAR2, p_state VARCHAR2, p_country_code VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
BEGIN
    SELECT id INTO v_id
    FROM msa 
    WHERE UPPER(country) = UPPER(p_country_code) 
        AND UPPER(st) = UPPER(p_state)
        AND UPPER(city) = UPPER(p_city) AND ROWNUM=1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidCity;

FUNCTION isValidZipcode(p_zipcode VARCHAR2, p_city VARCHAR2, p_state VARCHAR2, p_country_code VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
BEGIN
    SELECT id INTO v_id
    FROM msa 
    WHERE UPPER(country) = UPPER(p_country_code) 
        AND UPPER(st) = UPPER(p_state)
        AND UPPER(city) = UPPER(p_city)
        AND UPPER(zip2) = UPPER(p_zipcode) AND ROWNUM=1;
    RETURN TRUE;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN FALSE;
END isValidZipcode;

FUNCTION isValidCampaignCode(p_campaign_code VARCHAR2, p_dealer NUMBER, p_business_unit VARCHAR2,p_date DATE,v_service_provider_number VARCHAR2,p_serial_number VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;     
BEGIN

    SELECT c.id INTO v_id 
    FROM campaign_notification n, campaign c
    WHERE UPPER(c.business_unit_info) = UPPER(p_business_unit) 
        AND n.campaign = c.id 
        AND n.dealership = p_dealer
        AND n.notification_status = 'PENDING'
        AND p_date >= c.from_date AND p_date <= c.till_date
        AND UPPER(c.code) = UPPER(p_campaign_code)
        AND n.d_active=1 
        AND ROWNUM = 1;

    RETURN TRUE;
EXCEPTION  WHEN others THEN 
   BEGIN    
    select   distinct inventoryi0_.id as id86_ into v_id

        from
            inventory_item inventoryi0_ cross 
        join
            campaign_notification campaignno1_ cross 
        join
            service_provider servicepro2_ 
        inner join
            organization servicepro2_1_ 
                on servicepro2_.id=servicepro2_1_.id 
        inner join
            party servicepro2_2_ 
                on servicepro2_.id=servicepro2_2_.id cross 
        join
            campaign campaign3_ 
        where
            inventoryi0_.business_unit_info in (p_business_unit) 
            and inventoryi0_.d_active = 1 
            and campaignno1_.d_active = 1 
            and servicepro2_2_.d_active = 1 
            and campaignno1_.campaign=campaign3_.id 
            and campaignno1_.item=inventoryi0_.id 
            and campaignno1_.dealership=servicepro2_.id 
            and (
                servicepro2_.service_provider_number=p_dealer
                and inventoryi0_.type='STOCK' 
                or inventoryi0_.type='RETAIL'
            ) 
            and (
                campaignno1_.claim is null
            ) 
            and campaignno1_.notification_status='PENDING' 
            and campaign3_.from_date<=sysdate 
            and campaign3_.code=p_campaign_code
            and (
                upper(inventoryi0_.serial_number)=p_serial_number
            ) 
            and inventoryi0_.serialized_part=0        
          AND ROWNUM = 1;
    RETURN TRUE; 
EXCEPTION
    WHEN others THEN    
        RETURN FALSE;  
 END;
END isValidCampaignCode;

FUNCTION isValidInventoryForFieldMod(
	p_serial_number VARCHAR2, 
	p_campaign_code VARCHAR2, 
	p_dealer NUMBER, 
	p_business_unit VARCHAR2,
	p_rep_date DATE,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_id NUMBER;
	v_date DATE;
BEGIN
	p_error_code := NULL;
	v_date := p_rep_date;
	IF v_date IS NULL THEN
		v_date := sysdate;
	END IF;
    SELECT i.id INTO v_id 
    FROM campaign_notification n,inventory_item i, campaign c
    WHERE UPPER(i.business_unit_info) = UPPER(p_business_unit) 
        AND n.item = i.id
        AND n.campaign = c.id 
        AND (n.dealership=p_dealer AND i.type='STOCK'
			OR i.type='RETAIL')
        AND n.notification_status = 'PENDING'
        AND v_date >= c.from_date and v_date <= c.till_date
        AND UPPER(i.serial_number) = UPPER(p_serial_number)
        AND UPPER(c.code) = UPPER(p_campaign_code)
		AND i.serialized_part=0
		AND i.d_active=1 AND c.d_active=1 and n.d_active=1;

    RETURN v_id;  
EXCEPTION
    WHEN NO_DATA_FOUND THEN
		p_error_code := 'SN_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'SN_DUP';
		RETURN NULL;
END isValidInventoryForFieldMod;

FUNCTION isValidInventoryForFieldModWCN(
	p_container_number VARCHAR2, 
	p_campaign_code VARCHAR2, 
	p_dealer NUMBER, 
	p_business_unit VARCHAR2,
	p_rep_date DATE,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_id    NUMBER;
	v_date DATE;
BEGIN
	p_error_code := NULL;
	v_date := p_rep_date;
	IF v_date IS NULL THEN
		v_date := sysdate;
	END IF;
    SELECT i.id INTO v_id 
    FROM campaign_notification n,inventory_item i, campaign c
    WHERE i.business_unit_info=p_business_unit
        AND n.item = i.id
        AND n.campaign = c.id 
        AND (n.dealership=p_dealer AND i.type='STOCK'
			OR i.type='RETAIL')
        AND n.notification_status = 'PENDING'
        AND v_date >= c.from_date and v_date <= c.till_date
        AND UPPER(i.vin_number) = UPPER(p_container_number)
        AND UPPER(c.code) = UPPER(p_campaign_code)
        AND i.serialized_part=0
		AND i.d_active=1 AND c.d_active=1 and n.d_active=1;

    RETURN v_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
		p_error_code := 'CN_INV';
        RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'CN_DUP';
		RETURN NULL;
END isValidInventoryForFieldModWCN;

FUNCTION isClaimTypeAllowed(p_type VARCHAR2, p_business_unit VARCHAR2)
RETURN BOOLEAN
IS
    v_id    NUMBER;
    v_type  VARCHAR2(255);
BEGIN

    IF UPPER(p_type) IN ('MACHINE SERIALIZED','MACHINE NON SERIALIZED') THEN
        v_type := 'Machine';
    ELSIF UPPER(p_type) IN ('ATTACHMENT SERIALIZED','ATTACHMENT NON SERIALIZED') THEN
        v_type := 'Attachment';    
    ELSIF UPPER(p_type) IN ('PARTS WITH HOST','PARTS WITHOUT HOST') THEN
        v_type := 'Parts';
    ELSE
        v_type := 'Campaign';
    END IF;

    SELECT o.id INTO v_id
    FROM config_param p,config_value v,config_param_option o
    WHERE p.d_active=1 AND p.id=v.config_param 
        AND v.d_active=1 AND v.config_param_option=o.id
        AND p.name='claimType'
        AND o.value=v_type
        AND UPPER(v.business_unit_info)=UPPER(p_business_unit)
        AND ROWNUM = 1;

    IF UPPER(p_type) IN ('MACHINE SERIALIZED','ATTACHMENT SERIALIZED','PARTS WITH HOST','FIELDMODIFICATION') THEN
        RETURN TRUE;
    ELSIF UPPER(p_type) IN ('MACHINE NON SERIALIZED','ATTACHMENT NON SERIALIZED','PARTS WITHOUT HOST') THEN
        IF UPPER(p_type) in ('MACHINE NON SERIALIZED','ATTACHMENT NON SERIALIZED') THEN
            v_type := 'nonSerializedClaimAllowed';
        ELSE
            v_type := 'partsClaimWithoutHostAllowed';
        END IF;

        SELECT o.id INTO v_id
        FROM config_param p,config_value v,config_param_option o
        WHERE p.d_active=1 AND p.id=v.config_param 
            AND v.d_active=1 AND v.config_param_option=o.id
            AND p.name=v_type
            AND o.value='true'
            AND UPPER(v.business_unit_info)=UPPER(p_business_unit)
            AND ROWNUM = 1;

        RETURN TRUE;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END isClaimTypeAllowed;

FUNCTION hasDuplicateSerializedPart
  (
    p_value_serialNo     VARCHAR2,
    p_value_partNo     VARCHAR2,
    p_delimiter VARCHAR2)
  RETURN BOOLEAN
IS
       v_serial_count                NUMBER         := 0;
       v_part_count                NUMBER         := 0;
       p_serialized_part     VARCHAR2(4000) := NULL;
       v_count                NUMBER         := 0;
BEGIN
  v_serial_count := Common_Utils.count_delimited_values(p_value_serialNo, p_delimiter);
  v_part_count := Common_Utils.count_delimited_values(p_value_partNo, p_delimiter);
   FOR i IN 1 .. v_serial_count LOOP
      p_serialized_part := getSerialNoPartNo( p_value_serialNo,p_value_partNo,p_delimiter,i);

            v_count := 0;
            FOR j IN 1 .. v_serial_count LOOP  

               IF upper(p_serialized_part)= upper(getSerialNoPartNo( p_value_serialNo,p_value_partNo,p_delimiter,j)) THEN                              
                  v_count := v_count+1;                  
                  IF v_count > 1 THEN
                    RETURN TRUE; 
                  END IF;                

               END IF;               
            END LOOP;
    END LOOP;
  RETURN FALSE;
END hasDuplicateSerializedPart;



FUNCTION getSerialNoPartNo
  (
    p_value_serialNo     VARCHAR2,
    p_value_partNo     VARCHAR2,
    p_delimiter VARCHAR2,
    p_index     NUMBER)
  RETURN VARCHAR2
IS
   p_serial_no     VARCHAR2(4000) := NULL;
   p_part_no VARCHAR2(4000) := NULL;
BEGIN
  p_serial_no := common_utils.get_delimited_value(p_value_serialNo, p_delimiter, p_index); 
  p_part_no := common_utils.get_delimited_value(p_value_partNo, p_delimiter, p_index);   
  RETURN CONCAT(p_serial_no, p_part_no);
END getSerialNoPartNo;

FUNCTION getValidCausalPart(p_item_number VARCHAR2, p_business_unit_name VARCHAR2)
RETURN VARCHAR2
IS
    v_item_id NUMBER := NULL;
    v_item_number_index NUMBER := -1;
    v_item_number VARCHAR2(255) := NULL;
BEGIN
SELECT i.item_number 
    INTO v_item_number
    FROM ITEM i, PARTY p, item_group ig, item_group pg
    WHERE ( UPPER(i.alternate_item_number) = UPPER(ltrim(rtrim(p_item_number)))  OR 
    UPPER(i.item_number) = UPPER(ltrim(rtrim(p_item_number))) )
    AND (i.business_unit_info) = (ltrim(rtrim(p_business_unit_name)))
    AND i.owned_by = p.ID
    AND p.NAME = common_utils.constant_oem_name and i.d_active = 1 
    AND i.model=ig.id 
    AND UPPER(pg.name) in (SELECT UPPER(co.value)
        FROM config_param cp, config_value cv, config_param_option co
        WHERE cp.name='causalItemsOnClaimConfiguration' 
		AND cp.id=cv.config_param
            AND cv.d_active=1
			AND cv.config_param_option=co.id
            AND (cv.business_unit_info) = (ltrim(rtrim(p_business_unit_name))))
    AND ig.tree_id=pg.tree_id
    AND ig.lft >= pg.lft
    AND ig.rgt <= pg.rgt 
    AND rownum  < 2; 
    RETURN v_item_number;
EXCEPTION 
WHEN OTHERS THEN
    RETURN NULL;
END getValidCausalPart;

FUNCTION getReplacedIRPartNumber(p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN VARCHAR2
IS
  v_item_number         VARCHAR2(255) := NULL;
BEGIN
    SELECT i.item_number
    INTO v_item_number
    FROM item i,
      item_group ig,
      item_group pg,
      config_param p,
      config_value v,
      config_param_option o
    WHERE p.name             ='replacedItemsOnClaimConfiguration'
    AND v.config_param       =p.id
    AND v.config_param_option=o.id
    AND UPPER(ig.name)       =UPPER(o.value)
    AND i.model              =pg.id
    AND v.business_unit_info = p_business_unit
    AND i.business_unit_info =p_business_unit
    AND p.d_active           =1
    AND i.d_active           =1
    AND pg.tree_id           = ig.tree_id
    AND pg.lft              >= ig.lft
    AND pg.rgt              <= ig.rgt
    AND i.owned_by          IN
      (SELECT org.id
      FROM party pty,
        organization org
      WHERE pty.id=org.id
      AND pty.name='OEM'
      )
    AND (i.item_number        =p_item_number
    OR i.alternate_item_number=p_item_number)
    AND rownum                < 2;      
    RETURN v_item_number;
EXCEPTION 
    WHEN OTHERS THEN
        RETURN NULL;
END getReplacedIRPartNumber;

FUNCTION getInstalledIRPart(p_item_number VARCHAR2, p_business_unit VARCHAR2)
RETURN VARCHAR2
IS
  v_item_number         VARCHAR2(255) := NULL;
Begin
    SELECT i.item_number INTO v_item_number
      FROM item i, item_group ig, item_group pg 
      WHERE
        I.Business_Unit_Info = P_Business_Unit And I.D_Active = 1 
        AND (i.item_number =p_item_number or i.alternate_item_number =p_item_number) 
        AND i.owned_by = 1 AND i.model = ig.ID 
        AND i.service_part = 1  
        AND (UPPER(pg.name) in (SELECT t3.value 
FROM config_param t1 ,
  config_value t2 ,
  config_param_option t3
WHERE t1.name              = 'replacedItemsOnClaimConfiguration'
AND t2.config_param        = t1.id
AND t2.config_param_option = t3.id
AND t2.d_active            = 1
AND t2.active              = 1
AND t2.business_unit_info  = P_Business_Unit ))  
        AND ig.tree_id = pg.tree_id  
        AND ig.lft >= pg.lft  
        And Ig.Rgt <= Pg.Rgt 
        AND rownum  <2;        
    RETURN v_item_number;

EXCEPTION 
    WHEN OTHERS THEN
        RETURN NULL;
END getInstalledIRPart;

FUNCTION getOwnershipForInventory(p_inv NUMBER)
RETURN NUMBER
IS
	v_owner NUMBER;
BEGIN
	SELECT it.owner_ship INTO v_owner
	FROM inventory_transaction it
	WHERE d_active=1 AND transacted_item=p_inv
		AND transaction_order=(
			SELECT MAX(transaction_order) FROM inventory_transaction t 
			WHERE t.transacted_item=p_inv AND t.d_active=1);

	RETURN v_owner;
EXCEPTION
	WHEN OTHERS THEN
		RETURN NULL;
END getOwnershipForInventory;

FUNCTION getServiceProviderType(p_service_provider NUMBER)
RETURN VARCHAR2
IS
	v_cust_type VARCHAR2(20);
BEGIN
	SELECT CASE WHEN d.id IS NOT NULL THEN 'Dealer'
		WHEN dc.id IS NOT NULL THEN 'DirectCustomer'
		WHEN ic.id IS NOT NULL THEN 'InterCompany'
		WHEN na.id IS NOT NULL THEN 'NationalAccount'
		WHEN oem.id IS NOT NULL THEN 'OEM' END
	INTO v_cust_type
	FROM party sp
	LEFT OUTER JOIN dealership d ON d.id=sp.id
	LEFT OUTER JOIN direct_customer dc ON dc.id=sp.id
	LEFT OUTER JOIN inter_company ic ON ic.id=sp.id
	LEFT OUTER JOIN national_account na ON na.id=sp.id
	LEFT OUTER JOIN original_equip_manufacturer oem ON oem.id=sp.id
	WHERE sp.id=p_service_provider AND sp.d_active=1;

	RETURN v_cust_type;
EXCEPTION
	WHEN OTHERS THEN
		RETURN NULL;
END getServiceProviderType;

FUNCTION isAllowedCustomerTypeForSearch(
	p_cust_type VARCHAR2,
	p_bu VARCHAR2)
RETURN BOOLEAN
IS
	v_count NUMBER;
BEGIN
	SELECT COUNT(cp.id) INTO v_count
	FROM config_param cp, config_value cv, config_param_option po
	WHERE cp.name='wntyConfigCustomerTypesAllowedinSearchResult'
		AND cv.config_param=cp.id
		AND cv.business_unit_info=p_bu and cv.d_active=1
		AND po.id=cv.config_param_option
		AND UPPER(po.value)=UPPER(p_cust_type);
	IF v_count > 0 THEN
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
END isAllowedCustomerTypeForSearch;

FUNCTION isValidSerialNumber (
	p_serial_number VARCHAR2, 
	p_business_unit_name VARCHAR2,
	p_model VARCHAR2,
	p_dealer_id NUMBER,
    p_claim_type VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_inventory NUMBER := NULL;
	v_type VARCHAR2(10);
	v_owner NUMBER;
  v_item_type VARCHAR2(10);
	v_cust_type VARCHAR2(20);
BEGIN
p_error_code := NULL;
BEGIN
	SELECT inv.ID,inv.type,i.item_type INTO v_inventory, v_type,v_item_type
	FROM inventory_item inv, item i
	WHERE lower(inv.serial_number) = lower(p_serial_number)
		AND inv.business_unit_info = p_business_unit_name
    AND i.business_unit_info = p_business_unit_name
    AND i.d_active = 1 AND inv.of_type = i.id
		AND inv.d_active=1 AND inv.serialized_part = 0;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN
		p_error_code:='SN_INV';
	WHEN TOO_MANY_ROWS THEN
		IF p_model IS NULL THEN
			p_error_code:='SN_DUP_M_EMP';
		ELSE
		BEGIN
			SELECT inv.id,inv.type,i.item_type INTO v_inventory,v_type,v_item_type 
			FROM inventory_item inv, item i, item_group m
			WHERE LOWER(inv.serial_number) = LOWER(p_serial_number)
			AND inv.business_unit_info = p_business_unit_name
			AND inv.d_active=1 AND inv.serialized_part = 0
			AND inv.of_type = i.id AND i.model = m.id 
			AND m.item_group_type = 'MODEL'
			AND LOWER(m.name) = LOWER(p_model)
			AND i.d_active = 1 AND m.d_active = 1;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				p_error_code:='SN_DUP_M_INV';
			WHEN TOO_MANY_ROWS THEN
				p_error_code:='SN_M_DUP';
		END;
		END IF;
END;
IF v_type = 'STOCK' THEN
	v_owner := getOwnershipForInventory(v_inventory);
	IF v_owner != p_dealer_id THEN
		v_cust_type := getServiceProviderType(v_owner);
		IF NOT isAllowedCustomerTypeForSearch(v_cust_type, p_business_unit_name) THEN
			p_error_code:='SN_CUST_INV';
		END IF;
	END IF;
END IF;
IF (upper(v_item_type) = 'MACHINE' AND upper(p_claim_type) NOT IN ('MACHINE SERIALIZED','MACHINE NON SERIALIZED')) THEN
	p_error_code:='SN_MCHNE';
ELSIF (upper(v_item_type) = 'ATTACHMENT' AND upper(p_claim_type) NOT IN ('ATTACHMENT SERIALIZED','ATTACHMENT NON SERIALIZED')) THEN
	p_error_code:='SN_ATTCHMNT';
END IF;
RETURN v_inventory;
END isValidSerialNumber;

FUNCTION getValidPartSerialNumber(
	p_serial_number VARCHAR2, 
	p_business_unit_name VARCHAR2)
RETURN NUMBER
IS
	v_item_id NUMBER := NULL;  
BEGIN
	SELECT i.ID INTO v_item_id
	FROM INVENTORY_ITEM i
	WHERE lower(i.serial_number) = lower(p_serial_number)
	AND i.business_unit_info = p_business_unit_name
	AND i.d_active = 1 AND i.serialized_part=1
	AND i.source='MAJORCOMPREGISTRATION';
	RETURN v_item_id;
EXCEPTION 
	WHEN OTHERS THEN
		RETURN NULL;
END getValidPartSerialNumber;

FUNCTION isValidItemForNonSerialized (
	p_item_number VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_item NUMBER;
BEGIN
	p_error_code := NULL;
	SELECT i.id INTO v_item
	FROM item i
	WHERE (UPPER(i.item_number)=UPPER(p_item_number)
			OR(UPPER(i.item_number)!=UPPER(p_item_number)
				AND UPPER(i.alternate_item_number)=UPPER(p_item_number)))
		AND i.d_active=1 AND i.business_unit_info=p_bu
		AND i.item_type in ('MACHINE', 'ATTACHMENT') AND i.owned_by=1;
	RETURN v_item;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		p_error_code := 'IT_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'IT_DUP';
		RETURN NULL;
END isValidItemForNonSerialized;

FUNCTION isValidModelForNonSerialized (
	p_model_name VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_model NUMBER;
BEGIN
	p_error_code := NULL;
	SELECT m.id INTO v_model
	FROM item_group m,item_group p
	WHERE m.lft > p.lft AND m.rgt <= p.rgt
		AND UPPER(m.name)=UPPER(p_model_name)
		AND m.item_group_type='MODEL'
		AND p.item_group_type='PRODUCT TYPE'
		AND UPPER(p.name) in ('MACHINE', 'ATTACHMENT') 
		AND m.d_active=1 AND p.d_active=1
		AND m.business_unit_info=p_bu
		AND p.business_unit_info=p_bu;
	RETURN v_model;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN
		p_error_code := 'M_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'M_DUP';
		RETURN NULL;
END isValidModelForNonSerialized;

FUNCTION isValidItemForPartsClaim(
	p_item_number VARCHAR2,
	p_bu VARCHAR2,
	p_error_code OUT VARCHAR2)
RETURN NUMBER
IS
	v_item NUMBER;
BEGIN
	p_error_code := NULL;
	SELECT i.id INTO v_item
	FROM item i, item_group ig, item_group pg,
	config_param cp, config_value cv, config_param_option po
	WHERE (UPPER(i.item_number)=UPPER(p_item_number)
			OR(UPPER(i.item_number)!=UPPER(p_item_number)
				AND UPPER(i.alternate_item_number)=UPPER(p_item_number)))
		AND i.d_active=1 AND i.business_unit_info=p_bu
		AND i.model=ig.id AND i.owned_by=1
		AND ig.tree_id=pg.tree_id 
		AND ig.lft>=pg.lft AND ig.rgt<=pg.rgt
		AND UPPER(pg.name)=UPPER(po.value)
		AND po.id=cv.config_param_option
		AND cv.business_unit_info=p_bu and cv.d_active=1
		AND cv.config_param=cp.id
		AND cp.name='itemTypeAllowedForPartsClaim';
	RETURN v_item;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		p_error_code := 'PRT_INV';
		RETURN NULL;
	WHEN TOO_MANY_ROWS THEN
		p_error_code := 'PRT_DUP';
		RETURN NULL;
END isValidItemForPartsClaim;

END COMMON_VALIDATION_UTILS;
 INFO 22-Aug-12 17:17:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:17:02 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 17:17:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create or replace
PROCEDURE                 UPLOAD_DRAFT_CLAIM_VALIDATION AS
CURSOR ALL_REC IS
	SELECT * FROM STG_DRAFT_CLAIM
	WHERE NVL(ERROR_STATUS,'N') = 'N' -- AND

		 ORDER BY ID ASC;

CURSOR DUP_REC IS
SELECT serial_number,campaign_code,COUNT(*)
          FROM STG_DRAFT_CLAIM
          WHERE claim_type='FIELDMODIFICATION'
          GROUP BY serial_number,campaign_code
          HAVING COUNT(*)>1;  

    v_loop_count            NUMBER         := 0;
    v_success_count         NUMBER         := 0;
    v_error_count           NUMBER         := 0;
    v_count                 NUMBER         := 0;
    v_count2                NUMBER         := 0;
    v_file_upload_mgt_id    NUMBER         := 0;
    v_number_temp           NUMBER         := 0;
    isFaultFoundValid       BOOLEAN        := FALSE;
    v_error                 VARCHAR2(4000) := NULL;
    v_error_code            VARCHAR2(4000) := NULL;
    v_model                 NUMBER := NULL;
	v_causal_part           VARCHAR2(255) := NULL;
	v_replaced_parts        VARCHAR2(255) := NULL;
	v_installed_parts       VARCHAR2(255) := NULL;
    v_temp_part_number      VARCHAR2(255) := NULL;
    v_product               NUMBER := NULL;
    v_machine_serial_number VARCHAR2(4000) := NULL;
    v_replaced_part      NUMBER := NULL;
    v_flag                  BOOLEAN := FALSE;
    v_valid_bu              BOOLEAN;
    v_valid_fault_found     BOOLEAN := FALSE;
    v_valid_campaign_code   BOOLEAN := FALSE;
    v_user_locale           VARCHAR2(255) := NULL;
    v_dealer                VARCHAR2(255) := NULL;
    v_dealer_id             NUMBER := NULL;
    v_bu_name               VARCHAR2(255) := NULL;
    v_smr_reason_id         VARCHAR2(255) := NULL;
    v_service_provider      NUMBER := NULL;
    v_service_provider_number  VARCHAR2(255) := NULL;
    v_delimiter             VARCHAR2(10) := '#$#';
    v_fault_code            VARCHAR2(255);
    v_job_codes_delimited   VARCHAR2(255);
    v_job_code              VARCHAR2(255);
    v_fault_found           VARCHAR2(255);    
    v_item_number           VARCHAR2(255) := NULL;   
    v_competitor_model_id   NUMBER := NULL;
    v_ac_input      		    NUMBER         := 0;
    v_id                    NUMBER := NULL;   
    v_repairdate        DATE := NULL;
    v_installeddate      VARCHAR2(255) := NULL;
    v_failuredate       VARCHAR2(255) := NULL;
    v_serial_number       VARCHAR2(20) := NULL;
	v_serialized BOOLEAN;
	v_part_installed BOOLEAN;
	v_part_installed_on_tktsa BOOLEAN;
	v_bu_config_display_item BOOLEAN := FALSE;
	v_err VARCHAR2(20);
	v_inv NUMBER;
	v_item NUMBER;
	v_part_serial NUMBER;
	v_part NUMBER;
	v_model_id NUMBER;

BEGIN

    BEGIN
     FOR EACH_DUP_REC IN DUP_REC
      LOOP
        UPDATE STG_DRAFT_CLAIM
        SET ERROR_STATUS    = 'N',
          ERROR_CODE        = 'Field modification code is duplicate for same Serial Number'
        WHERE serial_number = EACH_DUP_REC.serial_number
        AND campaign_code   = EACH_DUP_REC.campaign_code;
      END LOOP;
    END;

    BEGIN
    SELECT u.locale, u.login, f.business_unit_info, o.id INTO v_user_locale, v_dealer, v_bu_name, v_dealer_id
    FROM org_user u,file_upload_mgt f,org_user_belongs_to_orgs orgu,organization o
    WHERE u.id = f.uploaded_by 
        and orgu.org_user=u.id and orgu.belongs_to_organizations=o.id AND f.id=(SELECT file_upload_mgt_id FROM stg_draft_claim WHERE rownum = 1);
       /* SELECT u.locale, u.login, f.business_unit_info, u.belongs_to_organization  INTO v_user_locale, v_dealer, v_bu_name, v_dealer_id
        FROM org_user u,file_upload_mgt f
        WHERE u.id = f.uploaded_by AND f.id = 
            (SELECT file_upload_mgt_id FROM stg_draft_claim WHERE rownum = 1);*/
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            v_user_locale := 'en_US';
    END;


    BEGIN
        SELECT id, service_provider_number 
		INTO v_service_provider,v_service_provider_number 
        FROM service_provider WHERE id=v_dealer_id;
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            NULL;
    END;

	IF common_validation_utils.isConfigParamSet('isItemNumberDisplayRequired', v_bu_name) THEN
		v_bu_config_display_item := TRUE;
	END IF;

  FOR EACH_REC IN ALL_REC
  LOOP

    v_error_code := '';
    v_model := NULL;
	v_causal_part := NULL;
	v_replaced_parts := NULL;
	v_installed_parts := NULL;
    v_product := NULL;
    v_valid_bu := FALSE;
    v_valid_fault_found := FALSE;
    v_job_codes_delimited := NULL;
    v_valid_campaign_code := FALSE;
    v_smr_reason_id := NULL;
    v_fault_code := NULL;
    v_job_code := NULL;
    v_fault_found := NULL;
	v_serial_number := ltrim(rtrim(each_rec.serial_number));
	v_err := NULL;
	v_inv := NULL;
	v_item := NULL;
	v_part_serial := NULL;
	v_part := NULL;
	v_model_id := NULL;
	v_machine_serial_number := NULL;
	v_item_number := NULL;
	v_competitor_model_id := NULL;
	v_serialized := TRUE;
	v_part_installed := FALSE;
	v_part_installed_on_tktsa := FALSE;
	v_repairdate := NULL;
	v_failuredate := NULL;
	v_installeddate := NULL;

	IF EACH_REC.REPAIR_DATE IS NOT NULL AND 
		COMMON_VALIDATION_UTILS.isValidDate(each_rec.REPAIR_DATE, 'YYYY-MM-DD') THEN
		v_repairdate := TO_DATE(each_rec.repair_date,'YYYY-MM-DD');
	ELSIF EACH_REC.REPAIR_DATE IS NOT NULL AND 
		COMMON_VALIDATION_UTILS.isValidDate(each_rec.REPAIR_DATE, 'YYYYMMDD') THEN
		v_repairdate := TO_DATE(each_rec.repair_date,'YYYYMMDD');
	ELSE
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC018');
	END IF;

	IF UPPER(EACH_REC.CLAIM_TYPE) NOT IN ('FIELDMODIFICATION') THEN
		IF EACH_REC.FAILURE_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.FAILURE_DATE, 'YYYY-MM-DD') THEN
			v_failuredate := TO_DATE(each_rec.FAILURE_DATE,'YYYY-MM-DD');
		ELSIF EACH_REC.FAILURE_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.FAILURE_DATE, 'YYYYMMDD') THEN
			v_failuredate := TO_DATE(each_rec.FAILURE_DATE,'YYYYMMDD');
		ELSE
			v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC019');
		END IF;
	END IF;

	IF UPPER(EACH_REC.CLAIM_TYPE) IN ('MACHINE NON SERIALIZED', 'ATTACHMENT NON SERIALIZED', 'PARTS WITH HOST') THEN
		IF EACH_REC.INSTALLATION_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.INSTALLATION_DATE, 'YYYY-MM-DD') THEN
			v_installeddate := TO_DATE(each_rec.INSTALLATION_DATE,'YYYY-MM-DD');
		ELSIF EACH_REC.INSTALLATION_DATE IS NOT NULL AND 
			COMMON_VALIDATION_UTILS.isValidDate(each_rec.INSTALLATION_DATE, 'YYYYMMDD') THEN
			v_installeddate := TO_DATE(each_rec.INSTALLATION_DATE,'YYYYMMDD');
		ELSE
			v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC020');
		END IF;
	END IF;


    BEGIN
        IF v_bu_name IS NULL OR lower(v_bu_name) != lower(each_rec.business_unit_name) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC001');
        ELSIF NOT (COMMON_VALIDATION_UTILS.isUserBelongsToBU(v_bu_name,v_dealer)) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC044');
        ELSE
            v_valid_bu := TRUE;
        END IF;
	END;

	IF EACH_REC.UNIQUE_IDENTIFIER IS NULL THEN
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC002');
	END IF;

	BEGIN
        IF each_rec.claim_type IS NULL OR UPPER(each_rec.claim_type) NOT IN 
            ('MACHINE SERIALIZED', 'MACHINE NON SERIALIZED', 'PARTS WITH HOST', 
            'PARTS WITHOUT HOST', 'FIELDMODIFICATION' , 'ATTACHMENT SERIALIZED', 'ATTACHMENT NON SERIALIZED')
        THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC003');
        ELSIF v_valid_bu = TRUE AND NOT common_validation_utils.isClaimTypeAllowed(each_rec.claim_type, v_bu_name) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC066');
        END IF;
	END;


    IF UPPER(each_rec.claim_type) IN ('FIELDMODIFICATION') THEN
        IF each_rec.campaign_code IS NULL THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC026');
        ELSIF NOT common_validation_utils.isValidCampaignCode(each_rec.campaign_code, v_service_provider, v_bu_name,v_repairdate,v_service_provider_number,v_serial_number) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC065');
        ELSE
            v_valid_campaign_code := TRUE;
        END IF;
    END IF;

	IF UPPER(each_rec.is_serialized) = 'N' THEN
		v_serialized := FALSE;
	END IF;
	IF UPPER(each_rec.is_part_installed) = 'Y' THEN
		v_part_installed := TRUE;
	END IF;
	IF UPPER(each_rec.is_part_installed_on_oem) = 'Y' THEN
		v_part_installed_on_tktsa := TRUE;
	END IF;

	IF UPPER(each_rec.claim_type) = 'PARTS WITHOUT HOST' THEN
		v_serialized := NULL;
		v_part_installed_on_tktsa := NULL;
	ELSIF UPPER(each_rec.claim_type) in ('FIELDMODIFICATION',
		'MACHINE SERIALIZED','MACHINE NON SERIALIZED', 'ATTACHMENT SERIALIZED', 'ATTACHMENT NON SERIALIZED') THEN
		v_part_installed := NULL;
		v_part_installed_on_tktsa := NULL;
	ELSIF UPPER(each_rec.claim_type) = 'PARTS WITH HOST' AND v_serialized THEN
		v_part_installed_on_tktsa := NULL;
	END IF;

	IF NOT v_serialized AND UPPER(each_rec.claim_type) IN 
			('MACHINE SERIALIZED','ATTACHMENT SERIALIZED','FIELDMODIFICATION') THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC101');
	ELSIF v_serialized AND UPPER(each_rec.claim_type) IN 
			('MACHINE NON SERIALIZED', 'ATTACHMENT NON SERIALIZED') THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC107');
	END IF;
	IF UPPER(each_rec.claim_type) = 'PARTS WITH HOST' 
			AND NOT v_part_installed THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC102');
	END IF;
	IF UPPER(each_rec.claim_type) = 'PARTS WITHOUT HOST' 
			AND v_part_installed THEN
		v_error_code := common_utils.addErrorMessage(v_error_code, 'DC103');
	END IF;

	IF UPPER(each_rec.claim_type) IN ('PARTS WITHOUT HOST','PARTS WITH HOST') THEN
		IF each_rec.part_serial_number IS NOT NULL THEN
			v_part_serial := common_validation_utils.getValidPartSerialNumber(
								each_rec.part_serial_number, v_bu_name);
			IF v_part_serial IS NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC073_PS');
			ELSE
			SELECT of_type INTO v_part 
			FROM inventory_item WHERE id=v_part_serial;
			BEGIN
				select id,serial_number into v_inv,v_machine_serial_number 
				from inventory_item where id in ( 
					select part_of from inventory_item_composition  
					where part = v_part_serial);
			EXCEPTION 
				WHEN NO_DATA_FOUND THEN
					NULL;
			END;
			END IF;
		ELSIF each_rec.part_item_number IS NOT NULL THEN
			v_part := common_validation_utils.isValidItemForPartsClaim(
								each_rec.PART_ITEM_NUMBER, v_bu_name,v_err);
			IF v_err IS NOT NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_'||v_err);
				v_err := NULL;
			END IF;
		ELSE
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC014');
		END IF;
	END IF;

	IF v_machine_serial_number IS NOT NULL THEN
		IF UPPER(each_rec.claim_type)='PARTS WITHOUT HOST' THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC104');
		ELSIF NOT v_serialized THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC105');
		ELSIF v_serial_number IS NULL THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC004');
		ELSIF UPPER(v_serial_number) != UPPER(v_machine_serial_number) THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_90');
		END IF;
	ELSIF v_serialized THEN
		IF v_serial_number IS NOT NULL THEN
			IF UPPER(each_rec.claim_type)='FIELDMODIFICATION' THEN
				v_inv := common_validation_utils.isValidInventoryForFieldMod(
							v_serial_number,each_rec.campaign_code,
							v_service_provider,v_bu_name,v_repairdate,v_err);
			ELSE
				v_inv := common_validation_utils.isValidSerialNumber(
								v_serial_number, v_bu_name, each_rec.model_number,
								v_service_provider,each_rec.claim_type, v_err);
			END IF;
		ELSIF each_rec.container_number IS NOT NULL THEN
			IF UPPER(each_rec.claim_type)='FIELDMODIFICATION' THEN
				v_inv := common_validation_utils.isValidInventoryForFieldModWCN(
							each_rec.container_number,each_rec.campaign_code,
							v_service_provider,v_bu_name,v_repairdate,v_err);
			ELSE 
				v_inv := common_validation_utils.isValidInventoryWithConNum(
								each_rec.container_number, v_bu_name,v_err);
			END IF;
		ELSE
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC004');
		END IF;
		IF v_err IS NOT NULL THEN
			v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_'||v_err);
			v_err := NULL;
			v_inv := NULL;
		END IF;
	ELSIF NOT v_serialized THEN
		IF v_part_installed AND NOT v_part_installed_on_tktsa THEN
			IF each_rec.competitor_model IS NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC106');
			ELSE
				v_competitor_model_id := common_validation_utils.getValidCompetitorModelId(
					each_rec.competitor_model, v_user_locale, v_bu_name);
				IF v_competitor_model_id IS NULL THEN
					v_error_code := common_utils.addErrorMessage(v_error_code,'DC071_CM');
				END IF;
			END IF;
		ELSIF (v_part_installed AND v_part_installed_on_tktsa)
				OR v_part_installed IS NULL THEN
			IF v_bu_config_display_item THEN
				IF each_rec.item_number IS NULL THEN
					v_error_code := common_utils.addErrorMessage(v_error_code,'DC011');
				ELSE 
					v_item := common_validation_utils.isValidItemForNonSerialized(
									each_rec.item_number,v_bu_name,v_err);
				END IF;
			ELSIF each_rec.model_number IS NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code,'DC009');
			ELSE
				v_model_id := common_validation_utils.isValidModelForNonSerialized(
									each_rec.model_number, v_bu_name, v_err);
			END IF;
			IF v_err IS NOT NULL THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'DC_'||v_err);
				v_err := NULL;
			END IF;
		END IF;
	END IF;

	IF v_model_id IS NOT NULL THEN
		v_model := v_model_id;
	ELSIF v_item IS NOT NULL THEN
		SELECT m.id INTO v_model
		FROM item i,item_group m
		WHERE i.id=v_item AND i.model=m.id;
	ELSIF v_inv IS NOT NULL THEN
		SELECT m.id,CASE WHEN p1.item_group_type='PRODUCT' THEN p1.id
			ELSE p2.id END INTO v_model,v_product
		FROM inventory_item ii,item i,item_group m,item_group p1,item_group p2
		WHERE ii.id=v_inv AND ii.of_type=i.id and i.model=m.id
			AND m.is_part_of=p1.id AND p1.is_part_of=p2.id;
	END IF;


     BEGIN
       IF EACH_REC.ALARM_CODES IS NOT NULL THEN          
            v_ac_input := Common_Utils.count_delimited_values(each_rec.ALARM_CODES, ',');
            FOR i IN 1 .. v_ac_input LOOP

                IF  v_product IS NOT NULL THEN       
                      IF NOT common_validation_utils.isValidAlarmCode(
                              common_utils.get_delimited_value(each_rec.ALARM_CODES, ',', i),v_product, v_bu_name)
                      THEN
                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC067_IAC');
                          EXIT;
                      END IF;
                ELSE 
                     select alarm_code.id into v_id from alarm_code where  lower(trim(code)) = lower(trim(common_utils.get_delimited_value(each_rec.ALARM_CODES, ',', i)));

                END IF;
            END LOOP;
        END IF; 
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC067_IAC');
     END;




  IF UPPER(EACH_REC.CLAIM_TYPE) IN ('MACHINE SERIALIZED', 'ATTACHMENT SERIALIZED', 'PARTS WITH HOST', 'FIELDMODIFICATION')
  THEN
    IF EACH_REC.MACHINE_HOURS IS NULL
    THEN
      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC016');
    END IF;

    IF EACH_REC.MACHINE_HOURS IS NOT NULL AND (EACH_REC.MACHINE_HOURS < 0 OR EACH_REC.MACHINE_HOURS > 999999)
    THEN
      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC017');
    END IF;
  END IF;

	BEGIN
		 IF EACH_REC.WORK_ORDER_NUMBER IS NULL
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC021');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.CONDITIONS_FOUND IS NULL
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC022');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.WORK_PERFORMED IS NULL
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC023');
		 END IF;
	END;




	BEGIN
    IF UPPER(EACH_REC.CLAIM_TYPE) NOT IN ('PARTS WITHOUT HOST', 'FIELDMODIFICATION') THEN
        IF (EACH_REC.CAUSAL_PART IS NOT NULL) THEN
            v_causal_part := COMMON_VALIDATION_UTILS.getValidCausalPart(EACH_REC.CAUSAL_PART, v_bu_name);
        END IF;
        IF EACH_REC.CAUSAL_PART IS NULL OR (EACH_REC.CAUSAL_PART IS NOT NULL AND v_causal_part IS NULL) THEN
		    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC025');
        ELSIF v_causal_part != each_rec.causal_part THEN
            UPDATE stg_draft_claim SET causal_part=v_causal_part WHERE id=each_rec.id;
		END IF;
    END IF;
	END;







    IF UPPER(each_rec.claim_type) NOT IN ('PARTS WITHOUT HOST') AND 
            each_rec.replaced_oem_parts IS NOT NULL THEN

         IF  each_rec.INSTALLED_OEM_PARTS IS NULL THEN            
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045_ADD_INP');         
         END IF;    

        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_oem_parts, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045');
            v_flag := FALSE;
        ELSE
            v_count := Common_Utils.count_delimited_values(each_rec.replaced_oem_parts, v_delimiter);
             IF  each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN            
                IF NOT common_validation_utils.isValidDelimitedValue(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter) THEN
                  v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045_SE');
                  v_flag := FALSE;
                ELSE
                  v_count2 := Common_Utils.count_delimited_values(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter); 
                END IF; 
             END IF;
            IF v_flag = TRUE THEN


            IF UPPER(each_rec.claim_type) IN ('PARTS WITH HOST') AND common_validation_utils.hasDuplicateSerializedPart(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM,each_rec.replaced_oem_parts, v_delimiter) THEN
                  v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_98');          
            END IF;

            FOR i IN 1 .. v_count LOOP
                IF i <= v_count2 THEN
                IF UPPER(each_rec.claim_type) IN ('PARTS WITHOUT HOST') THEN

                            IF UPPER(each_rec.PART_SERIAL_NUMBER) IS NOT NULL THEN
                               IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NULL THEN   
                                        v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Removed part should be serialized replaced part');                                         
                               ELSE
                                                     IF each_rec.PART_SERIAL_NUMBER != each_rec.REPLACED_OEM_PARTS_SERIAL_NUM THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Replaced part serial number should be same as part serial number');

                                                     ELSIF common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Serialized replaced part quatity should be one');
                                                     END IF;

                               END IF;  
                            ELSIF UPPER(each_rec.Part_item_Number) IS NOT NULL THEN
                                 IF each_rec.Replaced_OEM_Parts IS NOT NULL THEN
                                                  IF common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, i) != each_rec.Part_item_Number THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Please add correct replaced part');
                                                   END IF;
                                  END IF;                         
                                  IF UPPER(each_rec.REPLACED_OEM_PARTS_QUANTITY) IS NOT NULL THEN
                                                  IF common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i) !=1 THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Replaced part quantity should be one only');   
                                                   END IF;
                                  END IF;                 
                             END IF;
                END IF; 
                        IF UPPER(each_rec.claim_type) IN ('PARTS WITH HOST') THEN

                            IF UPPER(each_rec.PART_SERIAL_NUMBER) IS NOT NULL THEN
                                   IF common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_79');
                                   END IF;

                                   IF each_rec.Is_Serialized in ('Y') THEN

                                          IF each_rec.Is_Part_Installed_on_OEM in ('Y') THEN                                         

                                              IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                    select count(*) into v_replaced_part from  Inventory_Item_Composition where part_of in (select id from inventory_item where serial_number = v_machine_serial_number ) and part in (select id from inventory_item where serial_number=common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i) );   

                                                     IF v_replaced_part != 1 THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_78');                                                     
                                                     END IF;
                                               END IF;


                                               IF each_rec.Installed_OEM_Parts_Serial_Num IS NOT NULL THEN
                                                    IF common_utils.get_delimited_value(each_rec.Installed_OEM_Parts_Quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_80');
                                                     END IF;
                                               END IF;

                                           ELSE 

                                              IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL AND common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i) != each_rec.Part_Serial_Number THEN
                                                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_81');
                                              END IF;   

                                              IF each_rec.Installed_OEM_Parts_Serial_Num IS NOT NULL AND common_utils.get_delimited_value(each_rec.Installed_OEM_Parts_Quantity, v_delimiter, i) !=1 THEN

                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_80');

                                               END IF;
                                           END IF;

                                    ELSE
                                             IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL AND common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i) != each_rec.Part_Serial_Number THEN
                                                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_81');
                                              END IF;    

                                              IF each_rec.Installed_OEM_Parts_Serial_Num IS NOT NULL AND common_utils.get_delimited_value(each_rec.Installed_OEM_Parts_Quantity, v_delimiter, i) !=1 THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_80');
                                               END IF;  
                                    END IF;


                            ELSIF UPPER(each_rec.Part_item_Number) IS NOT NULL THEN

                                      IF each_rec.Is_Serialized in ('Y') THEN    

                                            IF each_rec.Is_Part_Installed_on_OEM in ('Y') THEN
                                                  IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_82');
                                                   END IF;        

                                            ELSE
                                                  IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_82'); 
                                                  END IF;
                                                  IF each_rec.Replaced_OEM_Parts IS NOT NULL AND UPPER(each_rec.Part_item_Number) != common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, 1) THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_85');
                                                   END IF;
                                                   IF Common_Utils.count_delimited_values(each_rec.Replaced_OEM_Parts, v_delimiter)  !=1 THEN
                                                      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Should not add more than one part');
                                                   END IF;

                                                   IF each_rec.Installed_OEM_Parts_Serial_Num is NOT NULL THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_87');
                                                   END IF;  
                                             END IF;

                                       ELSE

                                              IF each_rec.REPLACED_OEM_PARTS_SERIAL_NUM IS NOT NULL THEN
                                                            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_84');
                                               END IF;

                                              IF each_rec.Replaced_OEM_Parts IS NOT NULL AND UPPER(each_rec.Part_item_Number) != common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, i) THEN
                                                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_85');
                                              END IF;

                                              IF Common_Utils.count_delimited_values(each_rec.Replaced_OEM_Parts, v_delimiter)  !=1 THEN
                                                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Should not add more than one part');
                                              END IF;

                                              IF each_rec.Installed_OEM_Parts_Serial_Num is NOT NULL THEN
                                                         v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_87');
                                              END IF;  
                                       END IF;
                            END IF;   
                         END IF; 
                        IF NOT common_validation_utils.isValidReplacedIRPart(common_utils.get_delimited_value(each_rec.REPLACED_OEM_PARTS_SERIAL_NUM, v_delimiter, i),
                              common_utils.get_delimited_value(each_rec.replaced_OEM_parts, v_delimiter, i), v_bu_name)
                        THEN
                          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC046');
                          EXIT;
                        END IF;

                ELSE          

                              IF UPPER(each_rec.Part_item_Number) IS NOT NULL THEN
                                   IF each_rec.Is_Part_Installed_on_OEM in ('N') OR each_rec.Is_Serialized in ('N') THEN                                         

                                        IF each_rec.Replaced_OEM_Parts IS NOT NULL AND UPPER(each_rec.Part_item_Number) != common_utils.get_delimited_value(each_rec.Replaced_OEM_Parts, v_delimiter, i) THEN
                                                                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_88');
                                        END IF;

                                        IF Common_Utils.count_delimited_values(each_rec.Replaced_OEM_Parts, v_delimiter)  !=1 THEN
                                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'Should not add more than one part');
                                        END IF;

                                        IF each_rec.Installed_OEM_Parts_Serial_Num is NOT NULL THEN
                                                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC_87');
                                        END IF;  
                                    END IF;
                              END IF;

                      v_temp_part_number := common_validation_utils.getReplacedIRPartNumber(
		                        common_utils.get_delimited_value(each_rec.replaced_OEM_parts, v_delimiter, i), v_bu_name);
		                IF v_temp_part_number IS NULL
		                THEN
		                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC046');
		                    v_replaced_parts := NULL;
		                    EXIT;
		                END IF;
		                IF i > 1 THEN
		                    v_replaced_parts := v_replaced_parts || v_delimiter;
		                END IF;			  
						v_replaced_parts := v_replaced_parts || v_temp_part_number;
                END IF;     

            END LOOP;
			IF v_replaced_parts IS NOT NULL AND v_replaced_parts != each_rec.replaced_OEM_parts THEN
                UPDATE stg_draft_claim SET replaced_OEM_parts=v_replaced_parts WHERE id=each_rec.id;
            ENd IF;
            END IF;   
        END IF;

        IF each_rec.replaced_oem_parts_quantity IS NULL THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC027');
        ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_oem_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC047');
        ELSIF v_flag = TRUE AND v_count != Common_Utils.count_delimited_values(each_rec.replaced_oem_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC048');
        ELSIF v_flag = TRUE THEN
            FOR i IN 1 .. v_count LOOP
                IF NOT common_utils.isPositiveInteger(
                        common_utils.get_delimited_value(each_rec.replaced_oem_parts_quantity, v_delimiter, i)) 
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC054');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
    END IF; 




    IF UPPER(each_rec.claim_type) NOT IN ('PARTS WITHOUT HOST') AND 
            each_rec.INSTALLED_OEM_PARTS IS NOT NULL THEN
        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.INSTALLED_OEM_PARTS, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC045_INP');
            v_flag := FALSE;
        ELSE            
              IF v_count != Common_Utils.count_delimited_values(each_rec.INSTALLED_OEM_PARTS, v_delimiter) THEN
                 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC075');
              End If;
            v_count := Common_Utils.count_delimited_values(each_rec.INSTALLED_OEM_PARTS, v_delimiter);
            For I In 1 .. V_Count Loop               
                v_temp_part_number := common_validation_utils.getInstalledIRPart(
                        common_utils.get_delimited_value(each_rec.INSTALLED_OEM_PARTS, v_delimiter, i), v_bu_name);
                IF v_temp_part_number IS NULL
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC046_INP');
                    v_installed_parts := NULL;
                    EXIT;
                END IF;
                IF i > 1 THEN
                    v_installed_parts := v_installed_parts || v_delimiter;
                END IF;
                v_installed_parts := v_installed_parts || v_temp_part_number;
            END LOOP;
			IF v_installed_parts IS NOT NULL AND v_installed_parts != each_rec.INSTALLED_OEM_PARTS THEN
                UPDATE stg_draft_claim SET INSTALLED_OEM_PARTS=v_installed_parts WHERE id=each_rec.id;
            ENd IF;
        END IF;

        IF each_rec.INSTALLED_OEM_PARTS_QUANTITY IS NULL THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC027_INP');
        ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.INSTALLED_OEM_PARTS_QUANTITY, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC047_INP');
        ELSIF v_flag = TRUE AND v_count != Common_Utils.count_delimited_values(each_rec.INSTALLED_OEM_PARTS_QUANTITY, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC048_INP');
        ELSIF v_flag = TRUE THEN
            FOR i IN 1 .. v_count LOOP
                IF NOT common_utils.isPositiveInteger(
                        common_utils.get_delimited_value(each_rec.INSTALLED_OEM_PARTS_QUANTITY, v_delimiter, i)) 
                THEN
                      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC054_INP');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
    END IF;

    IF each_rec.miscellaneous_parts IS NOT NULL THEN
        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.miscellaneous_parts, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC049');
            v_flag := FALSE;
        ELSE
            v_count := Common_Utils.count_delimited_values(each_rec.miscellaneous_parts, v_delimiter);
            FOR i IN 1 .. v_count LOOP
                IF NOT common_validation_utils.isValidMiscPart(
                        common_utils.get_delimited_value(each_rec.miscellaneous_parts, v_delimiter, i), v_service_provider, v_bu_name)
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC050');
                    EXIT;
                END IF;
            END LOOP;
        END IF;

        IF each_rec.misc_parts_quantity IS NULL THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC051');
        ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.misc_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC052');
        ELSIF v_flag = TRUE AND v_count != Common_Utils.count_delimited_values(each_rec.misc_parts_quantity, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC053');
        ELSIF v_flag = TRUE THEN
            FOR i IN 1 .. v_count LOOP
                IF NOT common_utils.isPositiveInteger(
                        common_utils.get_delimited_value(each_rec.misc_parts_quantity, v_delimiter, i)) 
                THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC055');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
    END IF;

    IF UPPER(each_rec.claim_type) NOT IN ('PARTS WITHOUT HOST') AND 
            each_rec.replaced_non_oem_parts IS NOT NULL 
    THEN
        v_flag := TRUE;
        IF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts, v_delimiter) THEN
            v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC056');
            v_flag := FALSE;
        ELSE
            v_count := common_utils.count_delimited_values(each_rec.replaced_non_oem_parts, v_delimiter);
            IF each_rec.replaced_non_oem_parts_qty IS NULL THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC028');
            ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts_qty, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC057');
            ELSIF v_count != common_utils.count_delimited_values(each_rec.replaced_non_oem_parts_qty, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC058');
            ELSE
                FOR i IN 1 .. v_count LOOP
                    IF NOT common_utils.isPositiveInteger(
                            common_utils.get_delimited_value(each_rec.replaced_non_oem_parts_qty, v_delimiter, i)) 
                    THEN
                        v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC059');
                        EXIT;
                    END IF;
                END LOOP;
            END IF;

            IF each_rec.replaced_non_oem_parts_price IS NULL THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC029');
            ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts_price, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC060');
            ELSIF v_count != common_utils.count_delimited_values(each_rec.replaced_non_oem_parts_price, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC061');
            END IF;

            IF each_rec.replaced_non_oem_parts_desc IS NULL THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC030');
            ELSIF NOT common_validation_utils.isValidDelimitedValue(each_rec.replaced_non_oem_parts_desc, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC062');
            ELSIF v_count != common_utils.count_delimited_values(each_rec.replaced_non_oem_parts_desc, v_delimiter) THEN
                v_error_code := common_utils.addErrorMessage(v_error_code, 'DC063');
            END IF;        
        END IF;
    END IF;




	BEGIN
		 IF EACH_REC.SMR_CLAIM IS NOT NULL AND EACH_REC.SMR_CLAIM NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC031');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.COMMERCIAL_POLICY IS NOT NULL AND EACH_REC.COMMERCIAL_POLICY NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC068_CP');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.IS_PART_INSTALLED IS NOT NULL AND EACH_REC.IS_PART_INSTALLED NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC069_IPI');
		 END IF;
	END;




	BEGIN
		 IF EACH_REC.IS_PART_INSTALLED_ON_OEM IS NOT NULL AND EACH_REC.IS_PART_INSTALLED_ON_OEM NOT IN ('Y', 'N')
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC070_PITKTSA');
		 END IF;
	END;



	BEGIN
		 IF EACH_REC.SMR_CLAIM IS NOT NULL AND each_rec.smr_claim = 'Y' THEN
            IF EACH_REC.REASON_FOR_SMR_CLAIM IS NULL THEN
			    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC032');
            ELSE
                v_smr_reason_id := common_validation_utils.getValidSMRReasonId(each_rec.reason_for_smr_claim, v_user_locale, v_bu_name);
                IF v_smr_reason_id IS NULL THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC033');
                END IF;
            END IF;
		 END IF;
	END;

	IF (UPPER(each_rec.claim_type) = 'MACHINE NON SERIALIZED' OR UPPER(each_rec.claim_type) = 'ATTACHMENT NON SERIALIZED' OR
			(UPPER(each_rec.claim_type) = 'PARTS WITH HOST' 
				AND NOT v_serialized AND v_part_installed_on_tktsa))
			AND COMMON_VALIDATION_UTILS.isConfigParamSet('invoiceNumberApplicable', v_bu_name) 
			AND EACH_REC.INVOICE_NUMBER IS NULL THEN
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC034');
	END IF;

	BEGIN
		 IF TO_NUMBER(EACH_REC.HOURS_ON_PARTS) IS NOT NULL  AND (TO_NUMBER(EACH_REC.HOURS_ON_PARTS)<0) 

		 THEN

			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC035');
		 END IF;
	END;





	BEGIN

		 IF UPPER(EACH_REC.CLAIM_TYPE) NOT IN ('PARTS WITHOUT HOST') AND 
		 EACH_REC.LABOUR_HOURS IS NOT NULL  
		 THEN
        IF EACH_REC.REASON_FOR_EXTRA_LABOR_HOURS IS NULL THEN 
        	 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036');
        ELSE 
         select count(1)  into v_id  from add_lbr_egl_service_providers alesp,additional_labor_eligibility ale where 
          alesp.additional_labor_eligibility=ale.id and ale.business_unit_info=v_bu_name and alesp.d_active = 1;
           IF v_id =0 then
              null;               
            ELSE             
                select count(1) into v_id from add_lbr_egl_service_providers alesp,additional_labor_eligibility ale where 
                alesp.SERVICE_PROVIDERS = v_dealer_id and alesp.additional_labor_eligibility=ale.id and ale.business_unit_info=v_bu_name
                and alesp.d_active = 1; 
                IF v_id = 0 then
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_ALH');
                END IF; 
            END IF; 
        END IF;  
		 END IF;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
      v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_ALH');

	END;

IF v_product IS NOT NULL THEN     




BEGIN
       IF UPPER(EACH_REC.LABOUR_HOURS)IS NOT NULL THEN 
               IF NOT common_validation_utils.isAllowedCostCategory('LABOR',v_product,v_bu_name) THEN
                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC072');                                
               END IF;
        END IF;

        EXCEPTION 
          WHEN OTHERS THEN
          v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC072');
END;




BEGIN
       IF UPPER(EACH_REC.REPLACED_OEM_PARTS)IS NOT NULL THEN 
               IF NOT common_validation_utils.isAllowedCostCategory('OEM_PARTS',v_product,v_bu_name) THEN
                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_RP');                                
              END IF;
        END IF;

    EXCEPTION 
        WHEN OTHERS THEN
        v_error_code := Common_Utils.addErrorMessage(v_error_code, '123');
END;





BEGIN
       IF UPPER(EACH_REC.MISCELLANEOUS_PARTS)IS NOT NULL THEN 
            IF NOT common_validation_utils.isAllowedCostCategory('MISC_PARTS',v_product,'v_bu_name') THEN
                               v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036_MP');                                
              END IF;
       END IF;
END;

END IF;

	IF v_repairdate IS NOT NULL AND v_failuredate IS NOT NULL 
			AND v_repairdate < v_failuredate THEN
		v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC037');
	END IF;

	BEGIN
        v_fault_code := common_utils.getValidFaultCode(EACH_REC.fault_location);
		 IF v_model IS NOT NULL  AND EACH_REC.fault_location IS NOT NULL AND 
     NOT COMMON_VALIDATION_UTILS.isValidFaultCodeForModelId(v_model, v_fault_code, v_bu_name)
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC038');
		 END IF;
	END;


	IF each_rec.job_code IS NOT NULL THEN
        v_count := Common_Utils.count_delimited_values_new(each_rec.job_code, ',');
        FOR i IN 1 .. v_count LOOP
            v_job_code := common_utils.getValidJobCode(common_utils.get_delimited_value(each_rec.job_code, ',', i));
            IF v_job_code IS NULL THEN
                v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC039');
                EXIT;
            ELSIF v_model IS NOT NULL AND
                NOT common_validation_utils.isValidJobCodeForModelId(v_model, v_job_code, v_bu_name)
		    THEN
			    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC039');
                EXIT;
            ELSE
                IF v_job_codes_delimited IS NULL THEN
                    v_job_codes_delimited := '';
                ELSE
                    v_job_codes_delimited := v_job_codes_delimited || ',';
                END IF;
                v_job_codes_delimited := v_job_codes_delimited || v_job_code;
            END IF;

        END LOOP;
        IF each_rec.labour_hours IS NOT NULL AND Common_Utils.count_delimited_values(each_rec.labour_hours, ',') > 0 THEN
            IF Common_Utils.count_delimited_values_new(each_rec.labour_hours, ',') < v_count THEN
                v_count := Common_Utils.count_delimited_values_new(each_rec.labour_hours, ',');
            END IF;
            FOR i IN 1 .. v_count LOOP
                IF common_utils.get_delimited_value(each_rec.labour_hours, ',', i) IS NOT NULL AND 
                        common_utils.get_delimited_value(each_rec.labour_hours, ',', i) != '0' AND 
                        common_utils.get_delimited_value(each_rec.reason_for_extra_labor_hours, v_delimiter, i) IS NULL THEN
                    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC036');
                    EXIT;
                END IF;
            END LOOP;
        END IF;
	END IF;





	BEGIN
		 IF v_model IS NOT NULL  AND EACH_REC.FAULT_FOUND IS NOT NULL THEN
            IF NOT COMMON_VALIDATION_UTILS.isValidFaultFoundForModelId(v_model, EACH_REC.FAULT_FOUND, v_bu_name)
		    THEN
			    v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC040');
            ELSE
                v_valid_fault_found := TRUE;
                SELECT ftd.name INTO v_fault_found
                FROM failure_type ft, 
                    i18nfailure_type_definition i18n_ftd,
                    failure_type_definition ftd
                where 
                    ft.definition_id = i18n_ftd.failure_type_definition
                    AND lower(i18n_ftd.name) = lower(ltrim(rtrim(each_rec.fault_found))) 
                    AND ft.for_item_group_id = v_model 
                    AND ft.d_active = 1
                    AND ftd.id = i18n_ftd.failure_type_definition
                    AND ROWNUM = 1;
            END IF;
		 END IF;
	END;


	BEGIN
		 IF v_valid_fault_found  AND EACH_REC.failure_detail IS NOT NULL AND 
     NOT COMMON_VALIDATION_UTILS.isValidRootCauseForModelId(v_model, EACH_REC.FAULT_FOUND, EACH_REC.failure_detail, v_bu_name)
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC042');
		 END IF;
	END;

    BEGIN
		 IF each_rec.technician_id IS NOT NULL AND 
            NOT COMMON_VALIDATION_UTILS.isValidTechnician(each_rec.technician_id, v_dealer, v_bu_name)
		 THEN
			 v_error_code := Common_Utils.addErrorMessage(v_error_code, 'DC043');
		 END IF;
	END;


 IF v_error_code IS NULL
	THEN

	   UPDATE STG_DRAFT_CLAIM
	   SET
		  ERROR_STATUS = 'Y',
			ERROR_CODE = NULL,
            business_unit_name = v_bu_name,
            reason_for_smr_claim = v_smr_reason_id,
            competitor_model_id = v_competitor_model_id,
            fault_location = v_fault_code,
            job_code = v_job_codes_delimited,
            fault_found = v_fault_found,
            part_number=  v_item_number,
            repair_date= CAST (each_rec.REPAIR_DATE AS number(8,0)),                      
            failure_date= CAST (each_rec.FAILURE_DATE AS number(8,0)) ,                    
            installation_date=CAST (each_rec.INSTALLATION_DATE AS number(8,0)),
			serial_number_id = v_inv,
			item_number_id = v_item,
			model_id = v_model_id,
			part_id = v_part,
			part_serial_id = v_part_serial

		WHERE
		  ID = EACH_REC.ID;
	ELSE

		UPDATE STG_DRAFT_CLAIM
	   SET
		  ERROR_STATUS = 'N',
		  ERROR_CODE = v_error_code
		WHERE
		  ID = EACH_REC.ID;
	END IF;

    v_loop_count := v_loop_count + 1;

    IF v_loop_count = 10 THEN

      COMMIT;
      v_loop_count := 0; -- Initialize the count size
    END IF;

  END LOOP;

    BEGIN
     FOR EACH_DUP_REC IN DUP_REC
      LOOP
        UPDATE STG_DRAFT_CLAIM
        SET ERROR_STATUS    = 'N',
          ERROR_CODE        = 'Field modification code is duplicate for same Serial Number'
        WHERE serial_number = EACH_DUP_REC.serial_number
        AND campaign_code   = EACH_DUP_REC.campaign_code;
      END LOOP;
    END;

    IF v_loop_count > 0 THEN
        COMMIT;
    END IF;

  BEGIN



    SELECT DISTINCT file_upload_mgt_id 
    INTO v_file_upload_mgt_id
    FROM STG_DRAFT_CLAIM 
    WHERE ROWNUM < 2;


    BEGIN
      SELECT count(*)
      INTO v_success_count
      FROM STG_DRAFT_CLAIM 
      where file_upload_mgt_id = v_file_upload_mgt_id and error_status = 'Y';
    EXCEPTION
    WHEN OTHERS THEN
      v_success_count := 0;
    END;


    BEGIN
      SELECT count(*)
      INTO v_error_count
      FROM STG_DRAFT_CLAIM 
      where file_upload_mgt_id = v_file_upload_mgt_id and error_status = 'N';
    EXCEPTION
    WHEN OTHERS THEN
      v_error_count := 0;
    END;


    SELECT count(*)
    INTO v_count
    FROM STG_DRAFT_CLAIM 
    where file_upload_mgt_id = v_file_upload_mgt_id ;

    UPDATE FILE_UPLOAD_MGT 
    SET 
      SUCCESS_RECORDS= v_success_count, 
      ERROR_RECORDS= v_error_count,
      TOTAL_RECORDS = v_count
    WHERE ID = v_file_upload_mgt_id;

  EXCEPTION
  WHEN OTHERS THEN

    v_error := SUBSTR(SQLERRM, 1, 4000);
    UPDATE FILE_UPLOAD_MGT 
    SET 
      ERROR_MESSAGE = v_error
    WHERE ID = v_file_upload_mgt_id;

  END;
  COMMIT; -- Final Commit for the procedure

END UPLOAD_DRAFT_CLAIM_VALIDATION;
 INFO 22-Aug-12 17:17:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:17:03 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 17:17:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





ALTER TABLE warranty
DROP CONSTRAINT WARRANTY_CUSTOMER_FK

 INFO 22-Aug-12 17:17:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:17:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE warranty ADD(CONSTRAINT "WNTY_CUSTOMER_FK" FOREIGN KEY ("CUSTOMER") REFERENCES PARTY("ID"))

 INFO 22-Aug-12 17:17:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:17:04 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 17:17:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





ALTER TABLE PART_RETURN_DEFINITION ADD STATUS VARCHAR2(20)

 INFO 22-Aug-12 17:17:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:17:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

UPDATE PART_RETURN_DEFINITION SET STATUS = 'ACTIVE' WHERE STATUS IS NULL AND D_ACTIVE = 1

 INFO 22-Aug-12 17:17:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:17:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

COMMIT

 INFO 22-Aug-12 17:17:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:17:04 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 17:17:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





ALTER TABLE CLAIM_AUDIT ADD (
"WORK_ORDER_NUMBER"           VARCHAR2(255 CHAR),
"FAILURE_DATE" DATE,
"REPAIR_DATE" DATE,
"INSTALLATION_DATE" DATE,
"PURCHASE_DATE" DATE,
"STATE"                          VARCHAR2(255 CHAR),
"SERVICE_INFORMATION"            NUMBER(19,0),
"PROBABLE_CAUSE"            VARCHAR2(4000 CHAR),
"WORK_PERFORMED"            VARCHAR2(4000 CHAR),
"OTHER_COMMENTS"            VARCHAR2(4000 CHAR),
"CONDITION_FOUND"           VARCHAR2(4000 CHAR),
"INTERNAL_COMMENT"          VARCHAR2(4000 BYTE),
"EXTERNAL_COMMENT"          VARCHAR2(4000 BYTE),
"SERVICE_MANAGER_ACCEPTED"       NUMBER(1,0),
"ACCEPTANCE_REASON"              NUMBER(19,0),    
"ACCEPTANCE_REASON_FOR_CP"       NUMBER(19,0),
"REJECTION_REASON"               NUMBER(19,0),
"ACCOUNTABILITY_CODE"            NUMBER(19,0),
"TRAVEL_HRS_CONFIG"              NUMBER(1,0),
"TRAVEL_TRIP_CONFIG"             NUMBER(1,0),
"TRAVEL_DIS_CONFIG"              NUMBER(1,0),
"OEM_CONFIG"                     NUMBER(1,0),
"NON_OEM_CONFIG"                 NUMBER(1,0),
"MISC_PARTS_CONFIG"              NUMBER(1,0),
"MEALS_CONFIG"                   NUMBER(1,0),
"PARKING_CONFIG"                 NUMBER(1,0),
"ITEM_DUTY_CONFIG"               NUMBER(1,0),
"LABOR_CONFIG"                   NUMBER(1,0),
"CP_REVIEWED"                    NUMBER(1,0),
"PER_DIEM_CONFIG"                NUMBER(1,0),
"RENTAL_CHARGES_CONFIG"          NUMBER(1,0),
"ADDITIONAL_TRAVEL_HOURS_CONFIG" NUMBER(1,0),
"LOCAL_PURCHASE_CONFIG"          NUMBER(1,0),
"TOLLS_CONFIG"                   NUMBER(1,0),
"OTHER_FREIGHT_DUTY_CONFIG"      NUMBER(1,0),
 "OTHERS_CONFIG"                 NUMBER(1,0),
 "INVOICE_NUMBER"                VARCHAR2(50 BYTE),
 "SELLING_ENTITY"                NUMBER(19,0),
 "OWNER_INFORMATION"             NUMBER,
 "CLAIM_PROCESSED_AS"            VARCHAR2(255 BYTE),
 "ASSIGN_TO_USER"                NUMBER(19,0),

CONSTRAINT "CLAIMAUD_SERVICEINFO_FK" FOREIGN KEY ("SERVICE_INFORMATION") REFERENCES "SERVICE_INFORMATION" ("ID"),
CONSTRAINT "CLAIMAUD_ACCEPTANCEREASON_FK" FOREIGN KEY ("ACCEPTANCE_REASON") REFERENCES "LIST_OF_VALUES" ("ID") ,
CONSTRAINT "CLAIMAUD_ACCREASONFORCP_FK" FOREIGN KEY ("ACCEPTANCE_REASON_FOR_CP") REFERENCES "LIST_OF_VALUES" ("ID") ,
CONSTRAINT "CLAIMAUD_REJECTIONREASON_FK" FOREIGN KEY ("REJECTION_REASON") REFERENCES "LIST_OF_VALUES" ("ID") ,
CONSTRAINT "CLAIMAUD_ACCOUNTCODE_FK" FOREIGN KEY ("ACCOUNTABILITY_CODE") REFERENCES "LIST_OF_VALUES" ("ID") ,
CONSTRAINT "CLAIMAUD_SELL_ENTITY_FK" FOREIGN KEY ("SELLING_ENTITY") REFERENCES "LIST_OF_VALUES" ("ID") ,
CONSTRAINT "CLAIMAUD_OWNER_INFO_FK" FOREIGN KEY ("OWNER_INFORMATION") REFERENCES "ADDRESS" ("ID") ,
CONSTRAINT "CLAIMAUD_ASSIGNTOUSER_FK" FOREIGN KEY ("ASSIGN_TO_USER") REFERENCES "ORG_USER" ("ID") )

 INFO 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE TABLE CLAIM_AUDIT_RULE_FAILURES
  (
    "CLAIM_AUDIT"         NUMBER(19,0) NOT NULL ENABLE,
    "RULE_FAILURES" NUMBER(19,0) NOT NULL ENABLE,
    CONSTRAINT "CLAIM_AUD_RULE_FAIL_PK" PRIMARY KEY ("CLAIM_AUDIT", "RULE_FAILURES") ,
    CONSTRAINT "CLMAUDRULEFAIL_RULEFAIL_FK" FOREIGN KEY ("RULE_FAILURES") REFERENCES "RULE_FAILURE" ("ID") ,
    CONSTRAINT "CLAIMAUDRULEFAIL_CLAIMAUD_FK" FOREIGN KEY ("CLAIM_AUDIT") REFERENCES "CLAIM_AUDIT" ("ID") 
  )

 INFO 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE TABLE "CLAIM_AUDIT_ATTACHMENTS"
  (
    "CLAIM_AUDIT"       NUMBER(19,0) NOT NULL ENABLE,
    "ATTACHMENTS" NUMBER(19,0) NOT NULL ENABLE,
    CONSTRAINT "CLAIMAUDATTACH_CLAIMAUD_FK" FOREIGN KEY ("CLAIM_AUDIT") REFERENCES "CLAIM_AUDIT" ("ID") ,
    CONSTRAINT "CLMAUDATTACH_ATTACHMENTS_FK" FOREIGN KEY ("ATTACHMENTS") REFERENCES "DOCUMENT" ("ID")
  )

 INFO 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE TABLE "CLAIM_AUDIT_USER_PRO_COMMENTS"
  (
    "CLAIM_AUDIT"                 NUMBER(19,0) NOT NULL ENABLE,
    "USER_PROCESS_COMMENTS" NUMBER(19,0) NOT NULL ENABLE,
    CONSTRAINT "CLMAUD_USRPROCMTS_PK" PRIMARY KEY ("CLAIM_AUDIT", "USER_PROCESS_COMMENTS"),
    CONSTRAINT "CLMAUD_USRPROCMTS_CLM_FK" FOREIGN KEY ("CLAIM_AUDIT") REFERENCES "CLAIM_AUDIT" ("ID") ENABLE,
    CONSTRAINT "CLMAUD_USRPROCMTS_USRPCMTS_FK" FOREIGN KEY ("USER_PROCESS_COMMENTS") REFERENCES "USER_COMMENT" ("ID") ENABLE
  )

 INFO 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE CLAIM ADD(
"ACTIVE_CLAIM_AUDIT"            NUMBER(19,0),
CONSTRAINT "ACTCLMAUD_CLMAUD_FK" FOREIGN KEY ("ACTIVE_CLAIM_AUDIT") REFERENCES "CLAIM_AUDIT" ("ID") ENABLE)

 INFO 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE TABLE "CLAIM_AUDIT_ALARM_CODES"
  (
    "CLAIM_AUDIT"       NUMBER(19,0) NOT NULL ENABLE,
    "ALARM_CODES" NUMBER(19,0) NOT NULL ENABLE,
    CONSTRAINT "ALARMAUD_CODES_CLAIM_FK" FOREIGN KEY ("CLAIM_AUDIT") REFERENCES "CLAIM_AUDIT" ("ID") ENABLE NOVALIDATE,
    CONSTRAINT "ALARMAUD_CODES_ALARM_CODES_FK" FOREIGN KEY ("ALARM_CODES") REFERENCES "ALARM_CODE" ("ID") ENABLE NOVALIDATE
  )

 INFO 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from default_folder_view

 INFO 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from inbox_view

 INFO 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

alter table CLAIM_AUDIT drop constraint SYS_C0011742

ERROR 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-02443: Cannot drop constraint  - nonexistent constraint

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-02443: Cannot drop constraint  - nonexistent constraint

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-02443: Cannot drop constraint  - nonexistent constraint

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:289)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:582)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1986)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:1144)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2152)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:2035)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2876)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:945)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\Doosan_Patches\DoosanHeavy-Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-Aug-12 17:17:05 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-Aug-12 17:23:09 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 17:23:09 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 17:23:09 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





declare 
cursor c1 is select * from claim where active_claim_audit is null;
v_claim_audit_id   NUMBER := 0;
begin
for each_rec in c1 loop
  begin
v_claim_audit_id := CLAIM_AUDIT_SEQ.nextval;
  insert into claim_audit values(v_claim_audit_id,null,0,null,
  null,0,0,null, null,null,sysdate, 'Added by Procedure',
  sysdate,null, sysdate, each_rec.decision, 0,
  each_rec.payment,null,each_rec.work_order_number,each_rec.failure_date,each_rec.repair_date,each_rec.installation_date, each_rec.purchase_date,
  each_rec.state,each_rec.service_information,each_rec.probable_cause,each_rec.work_performed,
  each_rec.other_comments,each_rec.condition_found,each_rec.internal_comment,each_rec.external_comment,each_rec.service_manager_accepted,
  each_rec.acceptance_reason,each_rec.acceptance_reason_for_cp,each_rec.rejection_reason,each_rec.accountability_code,each_rec.travel_hrs_config,
  each_rec.travel_trip_config,each_rec.travel_dis_config,each_rec.oem_config,each_rec.non_oem_config,each_rec.misc_parts_config,each_rec.meals_config,
  each_rec.parking_config,each_rec.item_duty_config,each_rec.labor_config,each_rec.cp_reviewed,each_rec.per_DIEM_config,each_rec.rental_charges_config,
  each_rec.additional_travel_hours_config,each_rec.local_purchase_config,each_rec.tolls_config,each_rec.other_freight_duty_config,each_rec.others_config,
  each_rec.invoice_number,each_rec.selling_entity,each_rec.owner_information,each_rec.claim_processed_as,each_rec.assign_to_user);

update claim set active_claim_audit=v_claim_audit_id where id=each_rec.id;
exception when others then
  dbms_output.put_line(each_rec.claim_number);
end;
end loop;
commit;
end;
 INFO 22-Aug-12 17:23:09 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:23:09 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 17:23:09 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





CREATE TABLE CAMP_NOTIFICATION_ATTACHMENTS
  (
   CAMPAIGN_NOTIFICATION    NUMBER(19,0) NOT NULL ENABLE,
   ATTACHMENTS NUMBER(19,0) NOT NULL ENABLE
  )

 INFO 22-Aug-12 17:23:09 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:23:09 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE CAMP_NOTIFICATION_ATTACHMENTS ADD CONSTRAINT CAMPATTACHMENTS_CAMPNOTE_FK FOREIGN KEY
  (
   CAMPAIGN_NOTIFICATION
  )
  REFERENCES CAMPAIGN_NOTIFICATION
  (
   ID
  )
  ENABLE

 INFO 22-Aug-12 17:23:09 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:23:09 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE CAMP_NOTIFICATION_ATTACHMENTS ADD CONSTRAINT CAMPNOTE_ATTACHMNTS_FK FOREIGN KEY
  (
    ATTACHMENTS
  )
  REFERENCES DOCUMENT
  (
   ID
  )
  ENABLE

 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE INDEX CAMPMOTEATTACHMENTS_CAMPG_IX ON CAMP_NOTIFICATION_ATTACHMENTS
  (
   CAMPAIGN_NOTIFICATION
  )

 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





CREATE TABLE FIELD_MOD_UPDATE_AUDIT
  (
    ID                    NUMBER(19, 0) NOT NULL ,
    COMMENTS              VARCHAR2(4000 CHAR),
    ACTION_TAKEN          VARCHAR2(50 CHAR) ,
    FOR_FIELD_MOD          NUMBER(19, 0) NOT NULL ,
    LIST_INDEX            NUMBER(3, 0) ,
    D_CREATED_ON          DATE ,
    D_UPDATED_ON          DATE ,
    D_CREATED_TIME        DATE ,
    D_UPDATED_TIME        DATE ,
    D_INTERNAL_COMMENTS VARCHAR2(255 CHAR) ,
    VERSION             NUMBER(10, 0) NOT NULL ,
    D_LAST_UPDATED_BY   NUMBER(19, 0) ,
    D_ACTIVE            NUMBER(1, 0),
	INACTIVE_REASON     VARCHAR2(4000 CHAR)
  )

 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

ALTER TABLE FIELD_MOD_UPDATE_AUDIT ADD CONSTRAINT FK_FOR_FIELD_MOD FOREIGN KEY
  (
    FOR_FIELD_MOD
  )
  REFERENCES CAMPAIGN_NOTIFICATION
  (
    ID
  )
  ENABLE

 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

CREATE SEQUENCE Field_MOD_AUDIT_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 20 START WITH 100000000000000 CACHE 20 NOORDER NOCYCLE

 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 





ALTER TABLE campaign_notification ADD (COMMENTS VARCHAR2(4000 CHAR),STATUS VARCHAR2(32 CHAR),CAMPAIGN_STATUS VARCHAR2(255 CHAR))

 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

INSERT INTO inventory_item_condition (ITEM_CONDITION, version, d_created_on,d_internal_comments,d_updated_on,
 d_created_time, d_updated_time,d_active) 
 VALUES('CONSIGNMENT',1,SYSDATE,'Doosan TWMS',SYSDATE,SYSDATE,SYSDATE,1)

 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

commit

 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

create or replace
TRIGGER UPDATE_INV_HRSINSERVICE
AFTER INSERT OR UPDATE
ON CLAIM
REFERENCING NEW AS newRow
FOR EACH ROW
DECLARE
  v_item_hrs INVENTORY_ITEM.HOURS_ON_MACHINE%TYPE;
  V_CLAIMED_ITEM_HRS CLAIMED_ITEM.HOURS_IN_SERVICE%TYPE;
  V_ACTIVE_CLM_ADT_STATE varchar2(100);
CURSOR itemIds IS
            SELECT ITEM_REF_INV_ITEM  FROM CLAIMED_ITEM WHERE CLAIM= :newRow.id and item_ref_szed=1;

begin
select state into V_ACTIVE_CLM_ADT_STATE from CLAIM_AUDIT where id = :newRow.active_claim_audit;
 IF(V_ACTIVE_CLM_ADT_STATE='ACCEPTED') THEN
BEGIN
	FOR REC IN itemIds LOOP
	SELECT HOURS_ON_MACHINE INTO v_item_hrs FROM INVENTORY_ITEM WHERE id=REC. ITEM_REF_INV_ITEM;
	SELECT  HOURS_IN_SERVICE  INTO v_claimed_item_hrs FROM CLAIMED_ITEM WHERE CLAIM=:newRow.id AND ITEM_REF_INV_ITEM=REC. ITEM_REF_INV_ITEM;
	IF(	v_claimed_item_hrs>v_item_hrs) THEN

		UPDATE INVENTORY_ITEM
		SET  HOURS_ON_MACHINE= v_claimed_item_hrs
		WHERE id=REC. ITEM_REF_INV_ITEM;

		UPDATE INVENTORY_TRANSACTION A
		SET HOURS_ON_MACHINE=v_claimed_item_hrs
		WHERE TRANSACTION_ORDER = (SELECT MAX(TRANSACTION_ORDER) FROM INVENTORY_TRANSACTION WHERE
		TRANSACTED_ITEM = REC.ITEM_REF_INV_ITEM)
		and a.TRANSACTED_ITEM = REC.ITEM_REF_INV_ITEM;
	end if ;
	end LOOP;
END;
END IF;
END;
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 




delete from config_param_options_mapping where param_id in(select id from config_param where display_name ='Customer Types Displayed in ETR') 
and option_id in (select  id from config_param_option where value = 'Dealer Rental')

 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

delete from config_value where config_param in(select id from config_param where display_name ='Customer Types Displayed in ETR') and config_param_option in(select  id from config_param_option where value = 'Dealer Rental')

 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***TWMS_OWNER***..... 

commit

 INFO 22-Aug-12 17:23:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
ERROR 29-Nov-12 19:04:26 tavant.platform.exceptions.LoggedTavantRuntimeException: java.lang.ClassNotFoundException: oracle.jdbc.driver.OracleDriver
tavant.platform.exceptions.LoggedTavantRuntimeException: java.lang.ClassNotFoundException: oracle.jdbc.driver.OracleDriver
	at tavant.platform.tools.dbPatches.core.DynamicJDBCDriverSource.getConnection(DynamicJDBCDriverSource.java:124)
	at tavant.platform.tools.dbPatches.VersionManager.initConnectionForReadingAlreadyAppliedPatches(VersionManager.java:215)
	at tavant.platform.tools.dbPatches.VersionManager.getAppliedPatches(VersionManager.java:79)
	at tavant.platform.tools.dbPatches.VersionManager.getPatchNamesToBeApplied(VersionManager.java:92)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:129)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.lang.ClassNotFoundException: oracle.jdbc.driver.OracleDriver
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	at tavant.platform.tools.dbPatches.core.DynamicJDBCDriverSource.getConnection(DynamicJDBCDriverSource.java:119)
	... 6 more
ERROR 29-Nov-12 19:11:32 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: Io exception: Connection refused(DESCRIPTION=(TMP=)(VSNNUM=186647296)(ERR=12505)(ERROR_STACK=(ERROR=(CODE=12505)(EMFI=4))))
tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: Io exception: Connection refused(DESCRIPTION=(TMP=)(VSNNUM=186647296)(ERR=12505)(ERROR_STACK=(ERROR=(CODE=12505)(EMFI=4))))
	at tavant.platform.tools.dbPatches.VersionManager.initConnectionForReadingAlreadyAppliedPatches(VersionManager.java:219)
	at tavant.platform.tools.dbPatches.VersionManager.getAppliedPatches(VersionManager.java:79)
	at tavant.platform.tools.dbPatches.VersionManager.getPatchNamesToBeApplied(VersionManager.java:92)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:129)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: Io exception: Connection refused(DESCRIPTION=(TMP=)(VSNNUM=186647296)(ERR=12505)(ERROR_STACK=(ERROR=(CODE=12505)(EMFI=4))))
	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:231)
	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:345)
	at oracle.jdbc.driver.OracleConnection.<init>(OracleConnection.java:428)
	at oracle.jdbc.driver.OracleDriver.getConnectionInstance(OracleDriver.java:515)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:345)
	at tavant.platform.tools.dbPatches.core.DynamicJDBCDriverSource.getConnection(DynamicJDBCDriverSource.java:131)
	at tavant.platform.tools.dbPatches.VersionManager.initConnectionForReadingAlreadyAppliedPatches(VersionManager.java:215)
	... 5 more
ERROR 29-Nov-12 19:12:09 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: Io exception: Connection refused(DESCRIPTION=(TMP=)(VSNNUM=186647296)(ERR=12505)(ERROR_STACK=(ERROR=(CODE=12505)(EMFI=4))))
tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: Io exception: Connection refused(DESCRIPTION=(TMP=)(VSNNUM=186647296)(ERR=12505)(ERROR_STACK=(ERROR=(CODE=12505)(EMFI=4))))
	at tavant.platform.tools.dbPatches.VersionManager.initConnectionForReadingAlreadyAppliedPatches(VersionManager.java:219)
	at tavant.platform.tools.dbPatches.VersionManager.getAppliedPatches(VersionManager.java:79)
	at tavant.platform.tools.dbPatches.VersionManager.getPatchNamesToBeApplied(VersionManager.java:92)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:129)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: Io exception: Connection refused(DESCRIPTION=(TMP=)(VSNNUM=186647296)(ERR=12505)(ERROR_STACK=(ERROR=(CODE=12505)(EMFI=4))))
	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:231)
	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:345)
	at oracle.jdbc.driver.OracleConnection.<init>(OracleConnection.java:428)
	at oracle.jdbc.driver.OracleDriver.getConnectionInstance(OracleDriver.java:515)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:345)
	at tavant.platform.tools.dbPatches.core.DynamicJDBCDriverSource.getConnection(DynamicJDBCDriverSource.java:131)
	at tavant.platform.tools.dbPatches.VersionManager.initConnectionForReadingAlreadyAppliedPatches(VersionManager.java:215)
	... 5 more
 INFO 29-Nov-12 19:21:58 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 29-Nov-12 19:21:58 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_DEV***..... 





ALTER TABLE rec_claim_audit_attachments RENAME COLUMN RECOVERY_CLAIM_AUDIT TO REC_CLAIM_AUDIT

ERROR 29-Nov-12 19:21:58 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00957: duplicate column name

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00957: duplicate column name

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00957: duplicate column name

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 29-Nov-12 19:21:58 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV\dbpatches\NHMG-Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV\dbpatches\NHMG-Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 29-Nov-12 19:21:58 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 29-Nov-12 19:25:11 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 29-Nov-12 19:25:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_DEV***..... 





ALTER TABLE inventory_item RENAME COLUMN disclaimer_for TO is_disclaimer

 INFO 29-Nov-12 19:25:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 29-Nov-12 19:25:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***DOOSAN_DEV***..... 

commit

 INFO 29-Nov-12 19:25:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
ERROR 22-May-14 13:07:00 tavant.platform.exceptions.LoggedTavantRuntimeException: Invalid input path specified for db patches
tavant.platform.exceptions.LoggedTavantRuntimeException: Invalid input path specified for db patches
	at tavant.platform.tools.dbPatches.core.DbPatchLoaderFactory.createDbPatchLoader(DbPatchLoaderFactory.java:76)
	at tavant.platform.tools.dbPatches.VersionManager.<init>(VersionManager.java:48)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:66)
ERROR 22-May-14 13:14:07 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01017: invalid username/password; logon denied

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01017: invalid username/password; logon denied

	at tavant.platform.tools.dbPatches.VersionManager.initConnectionForReadingAlreadyAppliedPatches(VersionManager.java:219)
	at tavant.platform.tools.dbPatches.VersionManager.getAppliedPatches(VersionManager.java:79)
	at tavant.platform.tools.dbPatches.VersionManager.getPatchNamesToBeApplied(VersionManager.java:92)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:129)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-01017: invalid username/password; logon denied

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.O3log.receive2nd(O3log.java:517)
	at oracle.jdbc.ttc7.TTC7Protocol.logon(TTC7Protocol.java:276)
	at oracle.jdbc.driver.OracleConnection.<init>(OracleConnection.java:374)
	at oracle.jdbc.driver.OracleDriver.getConnectionInstance(OracleDriver.java:515)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:345)
	at tavant.platform.tools.dbPatches.core.DynamicJDBCDriverSource.getConnection(DynamicJDBCDriverSource.java:131)
	at tavant.platform.tools.dbPatches.VersionManager.initConnectionForReadingAlreadyAppliedPatches(VersionManager.java:215)
	... 5 more
 INFO 22-May-14 13:15:07 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 13:15:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 



alter table claim add (BRAND_PART_ITEM NUMBER(19,0))

 INFO 22-May-14 13:15:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table claim add CONSTRAINT CLAIM_BRAPART_FK FOREIGN KEY (BRAND_PART_ITEM) REFERENCES BRAND_ITEM (ID) ENABLE

 INFO 22-May-14 13:15:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:10 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 13:15:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





INSERT
INTO config_param
  (
    id,
    description,
    display_name,
    logical_group,
    logical_group_order,
    name,
    param_display_type,
    param_order,
    sections,
    sections_order,
    type,
    d_active,
    d_created_on,
    d_created_time,
    d_internal_comments,
    d_last_updated_by,
    d_updated_on,
    d_updated_time
  )
  VALUES
  (
    config_param_seq.nextval,
    'Show warning if part prices differ while processing claim',
    'Show warning if part prices differ while processing claim',
    'CLAIMS',
    1,
    'flagForWarningIfPartPriceDifferent',
    'radio',
    1,
    'CLAIM_PROCESS',
    1,
    'boolean',
    1,
    sysdate,
    systimestamp,
    'Nacco Configuration',
    1,
    sysdate,
    systimestamp
  )

 INFO 22-May-14 13:15:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT
INTO config_param_options_mapping
  (
    id,
    param_id,
    option_id
  )
  VALUES
  (
    cfg_param_optns_mapping_seq.nextval,
    (SELECT id
    FROM config_param cp
    WHERE cp.name='flagForWarningIfPartPriceDifferent'
    ),
    (SELECT id from config_param_option cpo where cpo.value='true')
  )

 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT
INTO config_param_options_mapping
  (
    id,
    param_id,
    option_id
  )
  VALUES
  (
    cfg_param_optns_mapping_seq.nextval,
    (SELECT id
    FROM config_param cp
    WHERE cp.name='flagForWarningIfPartPriceDifferent'
    ),
    (SELECT id from config_param_option cpo where cpo.value='false')
  )

 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT
INTO CONFIG_VALUE
  (
    ID,
	ACTIVE,
	CONFIG_PARAM,
	CONFIG_PARAM_OPTION,
	D_ACTIVE,
	D_LAST_UPDATED_BY,
	BUSINESS_UNIT_INFO
  )
  VALUES
  (
	CONFIG_VALUE_SEQ.nextval,
	1,
	(SELECT ID FROM CONFIG_PARAM WHERE NAME='flagForWarningIfPartPriceDifferent'),
	(SELECT ID from CONFIG_PARAM_OPTION WHERE VALUE='true'),
	1,
	NULL,
	'EMEA'
  )

 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT
INTO CONFIG_VALUE
  (
    ID,
	ACTIVE,
	CONFIG_PARAM,
	CONFIG_PARAM_OPTION,
	D_ACTIVE,
	D_LAST_UPDATED_BY,
	BUSINESS_UNIT_INFO
  )
  VALUES
  (
	CONFIG_VALUE_SEQ.nextval,
	1,
	(SELECT ID FROM CONFIG_PARAM WHERE NAME='flagForWarningIfPartPriceDifferent'),
	(SELECT ID from CONFIG_PARAM_OPTION WHERE VALUE='false'),
	1,
	NULL,
	'AMER'
  )

 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

COMMIT

 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




alter table STG_SUPPLIER_DECISION add SUPPLIER_CONTRACT_CODE VARCHAR2(255)

 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table STG_SUPPLIER_DECISION add PART_RETURN_REQUEST VARCHAR2(255)

 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table STG_SUPPLIER_DECISION add RETURN_LOCATION_CODE VARCHAR2(255)

 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table STG_SUPPLIER_DECISION add RMA_NUMBER VARCHAR2(255)

 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table STG_SUPPLIER_DECISION add CLAIM_AMOUNT_BEING_ACCEPTED NUMBER(19,2)

 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table STG_SUPPLIER_DECISION add CREDIT_MEMO_NUMBER VARCHAR2(255)

 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table STG_SUPPLIER_DECISION add CREDIT_MEMO_DATE  VARCHAR2(255)

 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table stg_supplier_decision rename column decision_comments to supplier_comments

 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




insert into upload_error (id,code,upload_field) values(upload_error_seq.nextval,'RC013','SUPPLIER CONTRACT CODE')

 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into upload_error (id,code,upload_field) values(upload_error_seq.nextval,'RC014','PART RETURN REQUEST')

 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into upload_error (id,code,upload_field) values(upload_error_seq.nextval,'RC015','RETURN LOCATION CODE')

 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into upload_error (id,code,upload_field) values(upload_error_seq.nextval,'RC016','CLAIM AMOUNT BEING ACCEPTED')

 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into upload_error (id,code,upload_field) values(upload_error_seq.nextval,'RC017','SUPPLIER CONTRACT CODE')

 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into upload_error (id,code,upload_field) values(upload_error_seq.nextval,'RC018','RETURN LOCATION CODE')

 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into I18NUPLOAD_ERROR_TEXT (ID,LOCALE,DESCRIPTION,UPLOAD_ERROR) values(I18N_UPLOAD_ERROR_SEQ.nextval,'en_US','Supplier Contract Code is mandatory',(select id from upload_error where code='RC013'))

 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into I18NUPLOAD_ERROR_TEXT (ID,LOCALE,DESCRIPTION,UPLOAD_ERROR) values(I18N_UPLOAD_ERROR_SEQ.nextval,'en_US','Supplier Contract Code does not match with Recovery claim contract code',(select id from upload_error where code='RC017'))

 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into I18NUPLOAD_ERROR_TEXT (ID,LOCALE,DESCRIPTION,UPLOAD_ERROR) values(I18N_UPLOAD_ERROR_SEQ.nextval,'en_US','Part Return Request is mandatory for Part Return Requested decision.Please set Part Return Request field to Yes',(SELECT id FROM upload_error WHERE code='RC014'))

 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into I18NUPLOAD_ERROR_TEXT (ID,LOCALE,DESCRIPTION,UPLOAD_ERROR) values(I18N_UPLOAD_ERROR_SEQ.nextval,'en_US','Return Location Code is mandatory if Part Return Request is Yes',(select id from upload_error where upload_field='RETURN LOCATION CODE'))

ERROR 22-May-14 13:15:12 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01427: single-row subquery returns more than one row

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01427: single-row subquery returns more than one row

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-01427: single-row subquery returns more than one row

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-May-14 13:15:12 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-May-14 13:15:12 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-May-14 14:32:26 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:32:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




insert into upload_error (id,code,upload_field) values(upload_error_seq.nextval,'RC013','SUPPLIER CONTRACT CODE')

 INFO 22-May-14 14:32:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:32:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into upload_error (id,code,upload_field) values(upload_error_seq.nextval,'RC014','PART RETURN REQUEST')

 INFO 22-May-14 14:32:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:32:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 















insert into I18NUPLOAD_ERROR_TEXT (ID,LOCALE,DESCRIPTION,UPLOAD_ERROR) values(I18N_UPLOAD_ERROR_SEQ.nextval,'en_US','Return Location Code is mandatory if Part Return Request is Yes',(select id from upload_error where upload_field='RETURN LOCATION CODE' and code='RC015'))

 INFO 22-May-14 14:32:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:32:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into I18NUPLOAD_ERROR_TEXT (ID,LOCALE,DESCRIPTION,UPLOAD_ERROR) values(I18N_UPLOAD_ERROR_SEQ.nextval,'en_US','Return Location Code is mandatory if Part Return Request is Yes',(select id from upload_error where upload_field='RETURN LOCATION CODE' and code='RC018'))

 INFO 22-May-14 14:32:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:32:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into I18NUPLOAD_ERROR_TEXT (ID,LOCALE,DESCRIPTION,UPLOAD_ERROR) values(I18N_UPLOAD_ERROR_SEQ.nextval,'en_US','Claim Amount Being Accepted cannot be Zero',(select id from upload_error where upload_field='CLAIM AMOUNT BEING ACCEPTED'))

 INFO 22-May-14 14:32:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:32:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into I18NUPLOAD_ERROR_TEXT (ID,LOCALE,DESCRIPTION,UPLOAD_ERROR) values(I18N_UPLOAD_ERROR_SEQ.nextval,'en_US','Invalid Return Location Code',(select id from upload_error where code='RC018'))

 INFO 22-May-14 14:32:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:32:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into upload_mgt_upload_errors(upload_mgt,upload_errors) values(9,(select id from upload_error where upload_field='SUPPLIER CONTRACT CODE' AND CODE='RC013'))

ERROR 22-May-14 14:32:27 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01427: single-row subquery returns more than one row

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01427: single-row subquery returns more than one row

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-01427: single-row subquery returns more than one row

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-May-14 14:32:27 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-May-14 14:32:27 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




































insert into upload_mgt_upload_errors(upload_mgt,upload_errors) values(9,(select id from upload_error where upload_field='PART RETURN REQUEST' AND ROWNUM=1))

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into upload_mgt_upload_errors(upload_mgt,upload_errors) values(9,(select id from upload_error where upload_field='RETURN LOCATION CODE' AND code='RC015'))

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into upload_mgt_upload_errors(upload_mgt,upload_errors) values(9,(select id from upload_error where upload_field='RETURN LOCATION CODE' AND code='RC018'))

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into upload_mgt_upload_errors(upload_mgt,upload_errors) values(9,(select id from upload_error where upload_field='CLAIM AMOUNT BEING ACCEPTED'))

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into upload_mgt_upload_errors(upload_mgt,upload_errors) values(9,(select id from upload_error where code='RC018'))

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

update upload_mgt set columns_to_capture=12 where description='Supplier Decision Upload'

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

update upload_error set upload_field ='SUPPLIER COMMENTS' where upload_field='DECISION COMMENTS'

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

UPDATE i18nupload_error_text SET description ='Supplier Comments are mandatory for the Disputed Decision' WHERE upload_error IN (SELECT id FROM upload_error WHERE upload_field='SUPPLIER COMMENTS')

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

update i18nupload_error_text set description ='Invalid decision. Please choose either of [Accepted / Disputed / Part Return Requested ] ' where upload_error in (select id from upload_error where code='RC006')

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

update upload_mgt set consume_rows_from=6 where description='Supplier Decision Upload'

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




update event_state set display_name='Claim Denied For Lack Of Part Shipment' where display_name='Claim Denied For Lack Of Parts'

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

update event_state set name='CLAIM_DENIED_FOR_LACK_Of_PART_SHIPMENT' where name='CLAIM_DENIED_FOR_LACK_OF_PART_RETURNS'

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




update event_state set display_name='Claim Denied Due To Lack Of Part Shipment' where display_name='Claim Denied For Lack Of Parts'

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

update event_state set name='CLAIM_DENIED_DUE_TO_LACK_Of_PART_SHIPMENT' where name='CLAIM_DENIED_FOR_LACK_OF_PART_RETURNS'

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 14:37:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




INSERT 
INTO config_param 
	(
		ID,
		DESCRIPTION,
		DISPLAY_NAME,NAME,
		TYPE,D_CREATED_ON,
		D_INTERNAL_COMMENTS,
		D_UPDATED_ON,
		D_LAST_UPDATED_BY,
		D_CREATED_TIME,
		D_UPDATED_TIME,
		D_ACTIVE,
		PARAM_DISPLAY_TYPE,
		LOGICAL_GROUP,
		LOGICAL_GROUP_ORDER,
		SECTIONS,
		SECTIONS_ORDER,
		PARAM_ORDER
	) 
VALUES (
		CONFIG_PARAM_SEQ.nextval,
		'Display Component Date Code on field on Parts Installed/Removed section',
		'Display Component Date Code on field on Parts Installed/Removed section',
		'enableComponentDateCode',
		'boolean',
		'',
		'',
		'',
		56,
		'',
		'',
		1,
		'radio',
		'CLAIMS',
		1,
		'CLAIM_INPUT_PARAMETERS',
		1,
		1
)

 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO config_value 
	(
		ID,
		ACTIVE,
		VALUE,
		CONFIG_PARAM,
		D_CREATED_ON,
		D_INTERNAL_COMMENTS,
		D_UPDATED_ON,
		D_LAST_UPDATED_BY,
		D_CREATED_TIME,D_UPDATED_TIME,
		D_ACTIVE,
		BUSINESS_UNIT_INFO,
		CONFIG_PARAM_OPTION
	) 
VALUES 
	(
		CONFIG_VALUE_SEQ.nextval,
		1,
		null,
		(SELECT id FROM config_param cp WHERE cp.name='enableComponentDateCode'),
		'',
		null,
		'',
		56,
		'',
		'',
		1,
		'EMEA',
		(select id from config_param_option where value='true')
	)

 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO config_value 
	(
		ID,
		ACTIVE,
		VALUE,
		CONFIG_PARAM,
		D_CREATED_ON,
		D_INTERNAL_COMMENTS,
		D_UPDATED_ON,
		D_LAST_UPDATED_BY,
		D_CREATED_TIME,D_UPDATED_TIME,
		D_ACTIVE,
		BUSINESS_UNIT_INFO,
		CONFIG_PARAM_OPTION
	) 
VALUES 
	(
		CONFIG_VALUE_SEQ.nextval,
		1,
		null,
		(SELECT id FROM config_param cp WHERE cp.name='enableComponentDateCode'),
		'',
		null,
		'',
		56,
		'',
		'',
		1,
		'AMER',
		(select id from config_param_option where value='false')
	)

 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO config_param_options_mapping 
	(
		ID,
		PARAM_ID,
		OPTION_ID) 
		VALUES 
		(CFG_PARAM_OPTNS_MAPPING_SEQ.nextval,
		(SELECT id FROM config_param cp WHERE cp.name='enableComponentDateCode'),
		(select id from config_param_option where value='true')
	)

 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO config_param_options_mapping 
(
		ID,
		PARAM_ID,
		OPTION_ID) 
		VALUES 
		(CFG_PARAM_OPTNS_MAPPING_SEQ.nextval,
		(SELECT id FROM config_param cp WHERE cp.name='enableComponentDateCode'),
		(select id from config_param_option where value='false')
)

 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

COMMIT

 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




update config_param set display_name='Display Component Serial Number field on Parts Installed/Removed section' where name ='showPartSerialNumber'

 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:37:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





insert into list_of_values
(
type,
code,
description,
state,
version,
d_created_on,
d_updated_on,
d_last_updated_by,
id,
business_unit_info,
d_created_time,
d_updated_time,
d_active
)
values
(
'UNITDOCUMENTTYPE',
'ITDR',
'ITDR',
'active',
0,
sysdate,
sysdate,
56,
List_Of_Values_SEQ.nextval,
'EMEA',
systimestamp,
systimestamp,
1
)

 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into i18nlov_text
(id,
locale,
description,
list_of_i18n_values
)
values (
I18N_Lov_Text_SEQ.nextval,
'en_US',
'ITDR',
(select id from list_of_values where code = 'ITDR')
)

 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into list_of_values
(
type,
code,
description,
state,
version,
d_created_on,
d_updated_on,
d_last_updated_by,
id,
business_unit_info,
d_created_time,
d_updated_time,
d_active
)
values
(
'UNITDOCUMENTTYPE',
'Others_EMEA',
'Others',
'active',
0,
sysdate,
sysdate,
56,
List_Of_Values_SEQ.nextval,
'EMEA',
systimestamp,
systimestamp,
1
)

 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into i18nlov_text
(id,
locale,
description,
list_of_i18n_values
)
values (
I18N_Lov_Text_SEQ.nextval,
'en_US',
'Others',
(select id from list_of_values where code = 'Others_EMEA')
)

 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into list_of_values
(
type,
code,
description,
state,
version,
d_created_on,
d_updated_on,
d_last_updated_by,
id,
business_unit_info,
d_created_time,
d_updated_time,
d_active
)
values
(
'UNITDOCUMENTTYPE',
'PDI',
'PDI',
'active',
0,
sysdate,
sysdate,
56,
List_Of_Values_SEQ.nextval,
'AMER',
systimestamp,
systimestamp,
1
)

 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into i18nlov_text
(id,
locale,
description,
list_of_i18n_values
)
values (
I18N_Lov_Text_SEQ.nextval,
'en_US',
'PDI',
(select id from list_of_values where code = 'PDI')
)

 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into list_of_values
(
type,
code,
description,
state,
version,
d_created_on,
d_updated_on,
d_last_updated_by,
id,
business_unit_info,
d_created_time,
d_updated_time,
d_active
)
values
(
'UNITDOCUMENTTYPE',
'Authorization',
'Authorization',
'active',
0,
sysdate,
sysdate,
56,
List_Of_Values_SEQ.nextval,
'AMER',
systimestamp,
systimestamp,
1
)

 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into i18nlov_text
(id,
locale,
description,
list_of_i18n_values
)
values (
I18N_Lov_Text_SEQ.nextval,
'en_US',
'Authorization',
(select id from list_of_values where code = 'Authorization')
)

 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into list_of_values
(
type,
code,
description,
state,
version,
d_created_on,
d_updated_on,
d_last_updated_by,
id,
business_unit_info,
d_created_time,
d_updated_time,
d_active
)
values
(
'UNITDOCUMENTTYPE',
'Others_AMER',
'Others',
'active',
0,
sysdate,
sysdate,
56,
List_Of_Values_SEQ.nextval,
'AMER',
systimestamp,
systimestamp,
1
)

 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into i18nlov_text
(id,
locale,
description,
list_of_i18n_values
)
values (
I18N_Lov_Text_SEQ.nextval,
'en_US',
'Others',
(select id from list_of_values where code = 'Others_AMER')
)

 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:37:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





create table county_code_mapping 
(id number(19),
state VARCHAR2(255),
county_code varchar2(255),
county_name varchar2(255),
D_CREATED_ON DATE,
D_INTERNAL_COMMENTS VARCHAR2(255),
country varchar2(255),  
D_UPDATED_ON DATE, 
D_LAST_UPDATED_BY NUMBER(19), 
D_CREATED_TIME  TIMESTAMP , 
D_UPDATED_TIME  TIMESTAMP , 
D_ACTIVE  NUMBER(1) DEFAULT 1)

 INFO 22-May-14 14:37:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table county_code_mapping add constraint county_code_mapping_pk primary key (id)

 INFO 22-May-14 14:37:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table county_code_mapping add unique (county_name)

 INFO 22-May-14 14:37:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:54 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:37:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 



CREATE TABLE TEST_EMAILS(
ID NUMBER(19,0) NOT NULL ENABLE,
EMAIL VARCHAR2(255 CHAR),
CONSTRAINT TEST_EMAILID_PK PRIMARY KEY (ID) ENABLE
)
 INFO 22-May-14 14:37:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:55 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:37:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





alter table Line_Item  add
     (
   percentage_Configured NUMBER(19,6),
   percentage_ConfiguredSMandate NUMBER(19,6)
	)

 INFO 22-May-14 14:37:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:55 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:37:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

create or replace 
PROCEDURE   SUPPLIER_DECISION_VALIDATION AS

CURSOR all_rec IS
    SELECT * FROM stg_supplier_decision
    WHERE NVL(error_status,'N') = 'N'
        AND upload_status IS NULL
    ORDER BY id;

v_error_code VARCHAR2(4000) := NULL;
v_loop_count NUMBER := 0;
v_error VARCHAR2(4000) := NULL;
v_file_upload_mgt_id NUMBER := 0;
v_success_count NUMBER := 0;
v_error_count NUMBER := 0;
v_recovery_claim_id NUMBER := 0;
v_rec_claim_state VARCHAR2(255);
v_contract VARCHAR2(255);
v_reason_id NUMBER;
v_return_loc NUMBER;
v_valid VARCHAR2(10);
v_user_locale  VARCHAR2(10);
v_countDuplicate NUMBER;
v_maxNoOfDisputes NUMBER := 0;
v_noOfTimesClaimsDisputed NUMBER;
V_BUSINESS_UNIT VARCHAR(255) := NULL;

BEGIN

    BEGIN 
       SELECT file_upload_mgt_id  INTO v_file_upload_mgt_id 
       FROM stg_supplier_decision WHERE ROWNUM = 1;

       SELECT  o.locale, f.BUSINESS_UNIT_INFO 
		INTO  v_user_locale, V_BUSINESS_UNIT
       FROM file_upload_mgt f,org_user o 
       WHERE f.id=v_file_upload_mgt_id 
       AND o.id=f.uploaded_by ;

        SELECT VAL.VALUE into v_maxNoOfDisputes 
		FROM CONFIG_PARAM PARAM,CONFIG_VALUE VAL
		WHERE VAL.CONFIG_PARAM = PARAM.ID 
		AND PARAM.NAME  = 'maximumDisputeAllowed' 
		AND VAL.BUSINESS_UNIT_INFO = V_BUSINESS_UNIT
		AND VAL.ACTIVE = 1;

  FOR each_rec IN all_rec LOOP


      v_error_code:=NULL;
      v_recovery_claim_id := NULL;
      v_rec_claim_state := NULL;
      v_contract := NULL;
      v_reason_id := NULL;
      v_return_loc := NULL;
      v_valid :='N';
      v_countDuplicate :=0;
      v_noOfTimesClaimsDisputed :=0;

      IF each_rec.recovery_claim_number IS NULL THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC001');
      END IF;  
      IF each_rec.decision IS NULL THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC002');
      END IF;
      IF each_rec.decision_reason IS NULL AND ((trim(lower(each_rec.decision))= 'accept') OR (trim(lower(each_rec.decision))= 'reject')) THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC003');
      END IF;
      IF each_rec.supplier_comments IS NULL THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC004');
      END IF;
       IF each_rec.supplier_contract_code IS NULL THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC013');
      END IF;
      IF(trim(lower(each_rec.decision))= 'part return request') AND (each_rec.part_return_request is NULL OR (trim(lower(each_rec.part_return_request))!='yes')) THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC014');
      END IF;
       IF each_rec.part_return_request IS NOT NULL AND (trim(lower(each_rec.part_return_request))='yes') AND each_rec.return_location_code is NULL THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC015');
      END IF;

      BEGIN 
          SELECT claim.id,claim.recovery_claim_state  into v_recovery_claim_id,v_rec_claim_state
          FROM  recovery_claim claim 
          WHERE claim.recovery_claim_number=each_rec.recovery_claim_number;

          BEGIN
              IF (v_rec_claim_state = 'IN_RECOVERY') 
                THEN v_valid :='Y';
              END IF;
          END;
           IF (v_valid = 'N') THEN
                    v_error_code := common_utils.addErrorMessage(v_error_code, 'RC008');
         END IF;
			SELECT rc.contract into v_contract 
			FROM recovery_claim rc,contract cntrct
			WHERE rc.recovery_claim_number=each_rec.recovery_claim_number AND rc.contract = cntrct.id;

			IF (v_contract != each_rec.supplier_contract_code) THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'RC017');
			END IF;

       IF each_rec.return_location_code IS NOT NULL THEN 
          BEGIN
          SELECT count(1) into v_return_loc
          FROM supplier_locations loc,location l 
          WHERE loc.supplier in (SELECT c.supplier from contract c where c.id=each_rec.supplier_contract_code) and l.id=loc.locations
          and l.code=each_rec.return_location_code;

           IF v_return_loc=0 then           
                 v_error_code := common_utils.addErrorMessage(v_error_code, 'RC018');
           END IF;      
          END;
          END IF;

         SELECT count(*) INTO v_countDuplicate 
         FROM stg_supplier_decision 
         WHERE recovery_claim_number = each_rec.recovery_claim_number;

         IF (v_countDuplicate >1 ) THEN
            v_error_code := common_utils.addErrorMessage(v_error_code, 'RC011');
         END IF;  

        EXCEPTION WHEN NO_DATA_FOUND THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'RC005');
      END ;


     IF(trim(lower(each_rec.decision))= 'accept')
        THEN 
            BEGIN 
                  SELECT text.id INTO v_reason_id from  i18nlov_text text , list_of_values lov 
                  WHERE lov.type = 'RECOVERYCLAIMACCEPTANCEREASON' 
				  AND trim(lower(lov.state)) = 'active'
                  AND lov.id=text.list_of_i18n_values 
                  AND trim(lower(text.locale)) =trim(lower(v_user_locale))
                  AND trim(lower(text.description)) = trim(lower(each_rec.decision_reason))
				  AND LOV.BUSINESS_UNIT_INFO = V_BUSINESS_UNIT;
               EXCEPTION WHEN NO_DATA_FOUND THEN
                 v_error_code := common_utils.addErrorMessage(v_error_code, 'RC007');
           END;
		   BEGIN
           IF each_rec.claim_amount_being_accepted IS NOT NULL AND each_rec.claim_amount_being_accepted=0 THEN
           v_error_code := common_utils.addErrorMessage(v_error_code, 'RC016');
           END IF;
           END;
      ELSIF(trim(lower(each_rec.decision))= 'reject')
      THEN 
         BEGIN 
                  SELECT count (*) INTO v_noOfTimesClaimsDisputed 
                  FROM REC_CLAIM_AUDIT audit1,RECOVERY_CLAIM claim 
                  WHERE audit1.FOR_RECOVERY_CLAIM = claim.ID
                  AND lower(audit1.RECOVERY_CLAIM_STATE) = 'rejected' 
                  AND claim.ID =  v_recovery_claim_id;


              IF(v_noOfTimesClaimsDisputed >=v_maxNoOfDisputes )
                THEN
                  v_error_code := common_utils.addErrorMessage(v_error_code, 'RC012');
              ELSE 
                   BEGIN 
                         SELECT text.id INTO v_reason_id from  i18nlov_text text , list_of_values lov 
                          WHERE lov.type = 'RECOVERYCLAIMREJECTIONREASON' 
						  AND trim(lower(lov.state)) = 'active' 
                          AND lov.id=text.list_of_i18n_values 
                          AND trim(lower(text.locale)) =trim(lower(v_user_locale))
                          AND trim(lower(text.description)) =trim(lower(each_rec.decision_reason))
						  AND LOV.BUSINESS_UNIT_INFO = V_BUSINESS_UNIT;
                           EXCEPTION WHEN NO_DATA_FOUND THEN
                           v_error_code := common_utils.addErrorMessage(v_error_code, 'RC009');
                    END;
              END IF;
          END;
      ELSIF(trim(lower(each_rec.decision))!= 'part return request')
      THEN
        BEGIN 
           v_error_code := common_utils.addErrorMessage(v_error_code, 'RC006');
        END;
      END IF;

     IF v_error_code IS NULL THEN
       BEGIN
            UPDATE stg_supplier_decision SET
                 error_status='Y'
              WHERE id = each_rec.id;
              v_success_count:=v_success_count+1;

       END;
          ELSE
          BEGIN
               UPDATE stg_supplier_decision
               SET error_code=v_error_code, 
                  error_status = 'N' 
                  WHERE id = each_rec.id;
                 v_error_count:=v_error_count+1;

          END;
      END IF;

      v_loop_count := v_loop_count + 1;
  END LOOP;

  BEGIN 
       UPDATE file_upload_mgt SET 
            success_records= v_success_count, 
            error_records= v_error_count,
            total_records = v_loop_count
        WHERE id = v_file_upload_mgt_id;
  END;

   EXCEPTION WHEN OTHERS THEN 
   v_error_code:='INVALID DATA';
    END;
COMMIT;
END;
 INFO 22-May-14 14:37:58 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:58 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:37:58 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

update mktg_groups_lookup set claim_type='CAMPAIGN' where claim_type='FPI'

 INFO 22-May-14 14:37:58 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:58 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT 
INTO config_param 
(
		ID,
		DESCRIPTION,
		DISPLAY_NAME,NAME,
		TYPE,D_CREATED_ON,
		D_INTERNAL_COMMENTS,
		D_UPDATED_ON,
		D_LAST_UPDATED_BY,
		D_CREATED_TIME,
		D_UPDATED_TIME,
		D_ACTIVE,
		PARAM_DISPLAY_TYPE,
		LOGICAL_GROUP,
		LOGICAL_GROUP_ORDER,
		SECTIONS,
		SECTIONS_ORDER,
		PARAM_ORDER
) 
VALUES 
(
		CONFIG_PARAM_SEQ.nextval,
		'Can Supplier upload Decision through Template',
		'Can Supplier upload Decision through Template',
		'canSupplierUploadDecisionThroughTemplate',
		'boolean',
		'',
		'',
		'',
		56,
		'',
		'',
		1,
		'radio',
		'SUPPLIER_RECOVERY',
		1,
		null,
		1,
		1
)

 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO config_value 
(
		ID,
		ACTIVE,
		VALUE,
		CONFIG_PARAM,
		D_CREATED_ON,
		D_INTERNAL_COMMENTS,
		D_UPDATED_ON,
		D_LAST_UPDATED_BY,
		D_CREATED_TIME,D_UPDATED_TIME,
		D_ACTIVE,
		BUSINESS_UNIT_INFO,
		CONFIG_PARAM_OPTION
) 
VALUES 
(
		CONFIG_VALUE_SEQ.nextval,
		1,
		null,
		(SELECT id FROM config_param cp WHERE cp.description='Can Supplier upload Decision through Template'),
		'',
		null,
		'',
		null,
		'',
		'',
		1,
		'EMEA',
		12
)

 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO config_value 
(
		ID,
		ACTIVE,
		VALUE,
		CONFIG_PARAM,
		D_CREATED_ON,
		D_INTERNAL_COMMENTS,
		D_UPDATED_ON,
		D_LAST_UPDATED_BY,
		D_CREATED_TIME,D_UPDATED_TIME,
		D_ACTIVE,
		BUSINESS_UNIT_INFO,
		CONFIG_PARAM_OPTION
) 
VALUES 
(
		CONFIG_VALUE_SEQ.nextval,
		1,
		null,
		(SELECT id FROM config_param cp WHERE cp.description='Can Supplier upload Decision through Template'),
		'',
		null,
		'',
		null,
		'',
		'',
		1,
		'AMER',
		12
)

 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO config_param_options_mapping 
(
		ID,
		PARAM_ID,
		OPTION_ID) 
		VALUES 
		(CFG_PARAM_OPTNS_MAPPING_SEQ.nextval,
		(SELECT id FROM config_param cp WHERE cp.description='Can Supplier upload Decision through Template'),
		11
)

 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO config_param_options_mapping 
(
		ID,
		PARAM_ID,
		OPTION_ID) 
		VALUES 
		(CFG_PARAM_OPTNS_MAPPING_SEQ.nextval,
		(SELECT id FROM config_param cp WHERE cp.description='Can Supplier upload Decision through Template'),
		12
)

 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

COMMIT

 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table STG_WARRANTY_REGISTRATIONS add TRANSACTION_TYPE VARCHAR2(255)

 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table STG_WARRANTY_REGISTRATIONS add COMPETITOR_MAKE VARCHAR2(255)

 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table STG_WARRANTY_REGISTRATIONS add MARKET_TYPE VARCHAR2(255)

 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table STG_WARRANTY_REGISTRATIONS add COMPETITION_TYPE VARCHAR2(255)

 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table STG_WARRANTY_REGISTRATIONS add NUMBER_OF_YEARS VARCHAR2(255)

 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table STG_WARRANTY_REGISTRATIONS add NUMBER_OF_MONTHS VARCHAR2(255)

 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table STG_WARRANTY_REGISTRATIONS add FIRST_TIME_OWNER VARCHAR2(255)

 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:37:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

create or replace
PROCEDURE UPLOAD_WARRANTY_REG_VALIDATION
AS
  CURSOR ALL_REC
  IS
    SELECT * FROM STG_WARRANTY_REGISTRATIONS WHERE ERROR_STATUS IS NULL;
  CURSOR ALL_ELIGIBLE_POLICY_PLANS(P_PRODUCT VARCHAR2, P_MODEL VARCHAR2, P_BU VARCHAR2, P_DEL_DATE DATE, P_HRS_ON_SERVICE NUMBER, P_CONDITION VARCHAR2, P_CERT_STATUS VARCHAR2, P_INSTALL_DEALER NUMBER)
  IS
    SELECT PD.*
    FROM POLICY_DEFINITION PD,
      POLICY_FOR_ITEMCONDITIONS PFI,
      (
      (SELECT PDG.POLICY_DEFN
      FROM POLICY_FOR_DEALER_GROUPS PDG,
        DEALERS_IN_GROUP DIG
      WHERE PDG.FOR_DEALER_GROUPS = DIG.DEALER_GROUP
      AND DIG.DEALER              = P_INSTALL_DEALER
      )
  UNION
    (SELECT PSP.POLICY_DEFN
    FROM POLICY_FOR_SERVICEPROVIDERS PSP
    WHERE PSP.FOR_SERVICE_PROVIDER = P_INSTALL_DEALER
    ) ) DLR_FILTER
    WHERE PD.ID IN
      (SELECT POLICY_DEFN
      FROM POLICY_FOR_PRODUCTS
      WHERE FOR_PRODUCT IN (P_PRODUCT, P_MODEL)
      )
    AND PD.ACTIVE_FROM                                           <= P_DEL_DATE
    AND PD.ACTIVE_TILL                                           >= P_DEL_DATE
    AND P_HRS_ON_SERVICE                                         <= PD.SERVICE_HRS_COVERED
    AND PD.BUSINESS_UNIT_INFO                                     = P_BU
    AND UPPER(PD.WARRANTY_TYPE)                                   = 'STANDARD'
    AND (DECODE(PD.CERTIFICATION_STATUS, 'NOTCERTIFIED', 'N', 'Y')= P_CERT_STATUS
    OR PD.CERTIFICATION_STATUS                                    = 'ANY')
    AND PD.ID                                                     = PFI.POLICY_DEFN
    AND PFI.FOR_ITEMCONDITION                                     = P_CONDITION
    AND PD.AVAILABILITY_OWNERSHIP_STATE                           = 1 --HARDCODED BECAUSE IT IS 1 FOR DATA MIGRATION
    AND PD.ID                                                     = DLR_FILTER.POLICY_DEFN(+)
    AND PD.D_ACTIVE                                               = 1
    AND NOT EXISTS
      (SELECT 1
      FROM POLICY_FEES
      WHERE POLICY        = PD.id
      AND is_transferable = 0
      AND amount          > 0
      );
    V_ERROR_CODE             VARCHAR2(4000):=NULL;
    V_ALLOW_OTHER_DLRS_STOCK VARCHAR2(10);
    V_UNIT_OWNER_TYPE        VARCHAR(50);
    V_CAP_INST_DLR_DATE      VARCHAR2(10);
    V_ADD_INFO_APPLICABLE    VARCHAR2(10);
    V_COMP_PART_ARRAY DBMS_UTILITY.UNCL_ARRAY;
    V_COMP_INSTALL_ARRAY DBMS_UTILITY.UNCL_ARRAY;
    V_COMP_SERIAL_ARRAY DBMS_UTILITY.UNCL_ARRAY;
    V_POL_ARRAY DBMS_UTILITY.UNCL_ARRAY;
    V_COMP_PART_COUNT    NUMBER := 0;
    V_COMP_INSTALL_COUNT NUMBER := 0;
    V_COMP_SERIAL_COUNT  NUMBER := 0;
    V_POL_COUNT          NUMBER;
    V_COMMIT_COUNT       NUMBER;
    V_VAR                NUMBER;
    V_FILING_PARTY       NUMBER;
    V_SHIP_DATE DATE;
    V_HOURS_ON_SERV      NUMBER(19) := 0;
    V_FILE_UPLOAD_MGT_ID NUMBER     := 0;
    V_SUCCESS_COUNT      NUMBER     := 0;
    V_ERROR_COUNT        NUMBER     := 0;
    V_COUNT              NUMBER     := 0;
    V_SERIAL_ID          NUMBER(19) := 0;
    V_CURR_OWNER_ID      NUMBER(19) := 0;
    V_COMPONENT_ID       NUMBER(19) := 0;
    V_PENDING_WR         NUMBER     := 0;
    V_BUILD_DATE DATE               := NULL;
    V_PRODUCT           NUMBER(19)            := 0;
    V_MODEL             NUMBER(19)            := 0;
    V_INSTALL_DEALER_ID NUMBER(19)            := NULL;
    V_CERT_STATUS       VARCHAR2(1)           := NULL;
    V_CONDITION         VARCHAR2(255)         :=NULL;
    V_CONTRACT_CODE     VARCHAR2(255)         :=NULL;
    V_MAINTENANCE_CONTRACT  VARCHAR2(255)     :=NULL;
    V_INDUSTRY_CODE     VARCHAR2(255)         :=NULL;
	V_BU				VARCHAR2(255) 		  :=NULL;
  BEGIN
	SELECT FUM.BUSINESS_UNIT_INFO INTO V_BU
	FROM FILE_UPLOAD_MGT FUM WHERE ID=(SELECT DISTINCT FILE_UPLOAD_MGT_ID 
		FROM STG_WARRANTY_REGISTRATIONS WHERE ERROR_STATUS IS NULL);
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR047', ';WR047'),
      ERROR_STATUS            = 'N'
    WHERE BUSINESS_UNIT_INFO IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR048', ';WR048'),
      ERROR_STATUS                                = 'N'
    WHERE INSTR(NVL(TAV.ERROR_CODE,'X'), 'WR047') = 0
    AND NOT EXISTS
      ( SELECT 1 FROM BUSINESS_UNIT WHERE NAME = TAV.BUSINESS_UNIT_INFO
      )
    AND TAV.BUSINESS_UNIT_INFO IS NOT NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE       = 'WR001',
      ERROR_STATUS       = 'N'
    WHERE DEALER_NUMBER IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR002', ';WR002'),
      ERROR_STATUS = 'N'
    WHERE NOT EXISTS
      (SELECT 1
      FROM SERVICE_PROVIDER SP,
        BU_ORG_MAPPING BOM
      WHERE SP.ID                    = BOM.ORG
      AND BOM.BU                     = TAV.BUSINESS_UNIT_INFO
      AND SP.SERVICE_PROVIDER_NUMBER = TAV.DEALER_NUMBER
      )
    AND TAV.DEALER_NUMBER IS NOT NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR003', ';WR003'),
      ERROR_STATUS       = 'N'
    WHERE CUSTOMER_TYPE IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR004', ';WR004'),
      ERROR_STATUS                      = 'N'
    WHERE upper(TAV.CUSTOMER_TYPE) NOT IN
      (SELECT upper(CFO.VALUE)
      FROM CONFIG_PARAM_OPTION CFO,
        CONFIG_VALUE CV,
        CONFIG_PARAM CP
      WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
      AND CV.CONFIG_PARAM       = CP.ID
      AND CP.NAME               = 'customersFilingDR'
      AND CV.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
      )
    AND TAV.CUSTOMER_TYPE IS NOT NULL;
    COMMIT;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR005', ';WR005'),
      ERROR_STATUS         = 'N'
    WHERE CUSTOMER_NUMBER IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR006', ';WR006'),
      ERROR_STATUS = 'N'
    WHERE NOT EXISTS
      (SELECT C.CUSTOMER_ID
      FROM CUSTOMER C
      WHERE C.CUSTOMER_ID = TAV.CUSTOMER_NUMBER
      )
    AND TAV.CUSTOMER_NUMBER IS NOT NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR007', ';WR007'),
      ERROR_STATUS = 'N'
    WHERE NOT EXISTS
      (SELECT 1
      FROM ADDRESS_BOOK AB,
        SERVICE_PROVIDER SP
      WHERE SP.SERVICE_PROVIDER_NUMBER = TAV.DEALER_NUMBER
      AND SP.ID                        = AB.BELONGS_TO
      AND upper(AB.TYPE)               = upper(TAV.CUSTOMER_TYPE)
      )
    AND TAV.DEALER_NUMBER IS NOT NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR008', ';WR008'),
      ERROR_STATUS                            = 'N'
    WHERE INSTR(NVL(ERROR_CODE,'X'), 'WR007') = 0
    AND INSTR(NVL(ERROR_CODE,'X'), 'WR004')   = 0
    AND NOT EXISTS
      (SELECT 1
      FROM CUSTOMER C,
        CUSTOMER_ADDRESSES CA,
        SERVICE_PROVIDER SP,
        ADDRESS_BOOK AB,
        ADDRESS_BOOK_ADDRESS_MAPPING ABAM
      WHERE ABAM.ADDRESS_BOOK_ID     = AB.ID
      AND AB.TYPE                    = UPPER(TAV.CUSTOMER_TYPE)
      AND AB.BELONGS_TO              = SP.ID
      AND CA.CUSTOMER                = C.ID
      AND ABAM.ADDRESS_ID           IN (CA.ADDRESSES)
      AND C.CUSTOMER_ID              = TAV.CUSTOMER_NUMBER
      AND SP.SERVICE_PROVIDER_NUMBER = TAV.DEALER_NUMBER
      );
    COMMIT;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
    || DECODE(ERROR_CODE, NULL, 'WR010', ';WR010'),
      ERROR_STATUS     = 'N'
    WHERE ITEM_NUMBER IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR011', ';WR011'),
      ERROR_STATUS = 'N'
    WHERE NOT EXISTS
      (SELECT I.ID
      FROM ITEM I
      WHERE I.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
      AND I.ITEM_TYPE            = 'MACHINE'
      AND I.OWNED_BY             = 1
      AND I.ITEM_NUMBER          = TAV.ITEM_NUMBER
      AND I.D_ACTIVE             = 1
      )
    AND ITEM_NUMBER IS NOT NULL;
    COMMIT;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR012', ';WR012'),
      ERROR_STATUS       = 'N'
    WHERE SERIAL_NUMBER IS NULL;
    SELECT DISTINCT OU.BELONGS_TO_ORGANIZATION
    INTO V_FILING_PARTY
    FROM FILE_UPLOAD_MGT FUM,
      ORG_USER OU,
      STG_WARRANTY_REGISTRATIONS TAV
    WHERE TAV.FILE_UPLOAD_MGT_ID = FUM.ID
    AND FUM.UPLOADED_BY          = OU.ID;
    COMMIT;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR014', ';WR014'),
      ERROR_STATUS       = 'N'
    WHERE DELIVERY_DATE IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR015', ';WR015'),
      ERROR_STATUS          = 'N'
    WHERE HOURS_ON_TRUCK IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR050', ';WR050'),
      ERROR_STATUS             = 'N'
    WHERE TAV.OPERATOR_NUMBER IS NOT NULL
    AND TAV.OPERATOR_TYPE     IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR051', ';WR051'),
      ERROR_STATUS             = 'N'
    WHERE TAV.OPERATOR_NUMBER IS NULL
    AND TAV.OPERATOR_TYPE     IS NOT NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR016', ';WR016'),
      ERROR_STATUS                    = 'N'
    WHERE TAV.OPERATOR_TYPE          IS NOT NULL
    AND upper(TAV.OPERATOR_TYPE) NOT IN
      (SELECT upper(CFO.VALUE)
      FROM CONFIG_PARAM_OPTION CFO,
        CONFIG_VALUE CV,
        CONFIG_PARAM CP
      WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
      AND CV.CONFIG_PARAM       = CP.ID
      AND CP.NAME               = 'customersFilingDR'
      AND CV.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
      );
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR049', ';WR049'),
      ERROR_STATUS                            = 'N'
    WHERE INSTR(NVL(ERROR_CODE,'X'), 'WR016') = 0
    AND TAV.OPERATOR_NUMBER                  IS NOT NULL
    AND TAV.OPERATOR_TYPE                    IS NOT NULL
    AND NOT EXISTS
      (SELECT 1
      FROM CUSTOMER C,
        CUSTOMER_ADDRESSES CA,
        SERVICE_PROVIDER SP,
        ADDRESS_BOOK AB,
        ADDRESS_BOOK_ADDRESS_MAPPING ABAM
      WHERE ABAM.ADDRESS_BOOK_ID     = AB.ID
      AND upper(AB.TYPE)             = UPPER(TAV.OPERATOR_TYPE)
      AND AB.BELONGS_TO              = SP.ID
      AND CA.CUSTOMER                = C.ID
      AND ABAM.ADDRESS_ID           IN (CA.ADDRESSES)
      AND C.CUSTOMER_ID              = TAV.OPERATOR_NUMBER
      AND SP.SERVICE_PROVIDER_NUMBER = TAV.DEALER_NUMBER
      );
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR053', ';WR053'),
      ERROR_STATUS = 'N'
    WHERE TAV.OEM IS NOT NULL
    AND NOT EXISTS
      (SELECT 1
      FROM LIST_OF_VALUES
      WHERE TYPE             = 'OEM'
      AND DESCRIPTION        = TAV.OEM
      AND BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
      );
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR020', ';WR020'),
      ERROR_STATUS                     = 'N'
    WHERE TAV.COMPONENT_SERIAL_NUMBER IS NOT NULL
    AND TAV.COMPONENT_PART_NUMBER     IS NULL;
	UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR059', ';WR059'),
      ERROR_STATUS           = 'N'
    WHERE TAV.SERIAL_NUMBER IS NOT NULL
    AND TAV.ITEM_NUMBER IS NOT NULL
    AND EXISTS
      (SELECT 1
      FROM INVENTORY_ITEM II,
        ITEM I
      WHERE II.SERIAL_NUMBER    = TAV.SERIAL_NUMBER
      AND II.SERIALIZED_PART    = 0
      AND II.D_ACTIVE           = 1
      AND II.OF_TYPE            = I.ID
      AND I.ITEM_NUMBER = TAV.ITEM_NUMBER
      AND II.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
      AND I.BUSINESS_UNIT_INFO  = TAV.BUSINESS_UNIT_INFO
      AND II.CONDITION_TYPE     = 'SCRAP'
	  AND I.ITEM_TYPE            = 'MACHINE'
      AND I.OWNED_BY             = 1
      AND I.D_ACTIVE             = 1
      );
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR060', ';WR0060'),
      ERROR_STATUS           = 'N'
    WHERE TAV.SERIAL_NUMBER IS NOT NULL
    AND TAV.ITEM_NUMBER IS NOT NULL
    AND EXISTS
      (SELECT 1
      FROM INVENTORY_ITEM II,
        ITEM I
      WHERE II.SERIAL_NUMBER    = TAV.SERIAL_NUMBER
      AND II.SERIALIZED_PART    = 0
      AND II.D_ACTIVE           = 1
      AND II.OF_TYPE            = I.ID
      AND I.ITEM_NUMBER = TAV.ITEM_NUMBER
      AND II.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
      AND I.BUSINESS_UNIT_INFO  = TAV.BUSINESS_UNIT_INFO
      AND II.TYPE               = 'RETAIL'
	  AND I.ITEM_TYPE            = 'MACHINE'
      AND I.OWNED_BY             = 1
      AND I.D_ACTIVE             = 1
      );
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR061', ';WR061'),
      ERROR_STATUS          = 'N'
    WHERE CONTRACT_CODE IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR062', ';WR062'),
      ERROR_STATUS                      = 'N'
    WHERE upper(TAV.CONTRACT_CODE) NOT IN
      (SELECT upper(CC.CONTRACT_CODE)
      FROM CONTRACT_CODE CC       
      WHERE
      CC.CONTRACT_CODE = TAV.CONTRACT_CODE
      AND CC.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
      )
    AND TAV.CONTRACT_CODE IS NOT NULL;
    COMMIT;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR063', ';WR063'),
      ERROR_STATUS          = 'N'
    WHERE MAINTENANCE_CONTRACT IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR064', ';WR064'),
      ERROR_STATUS                      = 'N'
    WHERE upper(TAV.MAINTENANCE_CONTRACT) NOT IN
      (SELECT upper(MC.MAINTENANCE_CONTRACT)
      FROM MAINTENANCE_CONTRACT MC       
      WHERE
      MC.MAINTENANCE_CONTRACT = TAV.MAINTENANCE_CONTRACT
      AND MC.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
      )
    AND TAV.MAINTENANCE_CONTRACT IS NOT NULL;
    COMMIT;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR065', ';WR065'),
      ERROR_STATUS          = 'N'
    WHERE INDUSTRY_CODE IS NULL;
    UPDATE STG_WARRANTY_REGISTRATIONS TAV
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR066', ';WR066'),
      ERROR_STATUS                      = 'N'
    WHERE upper(TAV.INDUSTRY_CODE) NOT IN
      (SELECT upper(IC.INDUSTRY_CODE)
      FROM INDUSTRY_CODE IC       
      WHERE
      IC.INDUSTRY_CODE = TAV.INDUSTRY_CODE
      AND IC.BUSINESS_UNIT_INFO = TAV.BUSINESS_UNIT_INFO
      )
    AND TAV.INDUSTRY_CODE IS NOT NULL;
    COMMIT;
    UPDATE STG_WARRANTY_REGISTRATIONS
    SET ERROR_CODE = ERROR_CODE
      || DECODE(ERROR_CODE, NULL, 'WR021', ';WR021'),
      ERROR_STATUS                   = 'N'
    WHERE COMPONENT_PART_NUMBER     IS NOT NULL
    AND COMPONENT_INSTALLATION_DATE IS NULL;
    COMMIT;
    DECLARE
    TYPE POL_TYPE
  IS
    TABLE OF VARCHAR2(4000) INDEX BY VARCHAR2(4000);
    V_POL_CODES POL_TYPE;
  BEGIN
    FOR EACH_POL IN
    (SELECT CODE
    FROM POLICY_DEFINITION
    WHERE BUSINESS_UNIT_INFO = V_BU
    )
    LOOP
      V_POL_CODES(EACH_POL.CODE) := EACH_POL.CODE;
    END LOOP;
    FOR EACH_REC IN ALL_REC
    LOOP
      BEGIN
        V_ERROR_CODE      := NULL;
        V_INSTALL_DEALER_ID := NULL;
        V_COMMIT_COUNT    := V_COMMIT_COUNT + 1;
        V_VAR             := 0;
        V_UNIT_OWNER_TYPE := 'DEALER';
        BEGIN
          SELECT UPPER(CFO.VALUE)
          INTO V_ALLOW_OTHER_DLRS_STOCK
          FROM CONFIG_PARAM_OPTION CFO,
            CONFIG_VALUE CV,
            CONFIG_PARAM CP
          WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
          AND CV.CONFIG_PARAM       = CP.ID
          AND CP.NAME               = 'allowWntyRegOnOthersStock'
          AND CV.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_ALLOW_OTHER_DLRS_STOCK := 'FALSE';
        END;
        BEGIN
          SELECT UPPER(CFO.VALUE)
          INTO V_CAP_INST_DLR_DATE
          FROM CONFIG_PARAM_OPTION CFO,
            CONFIG_VALUE CV,
            CONFIG_PARAM CP
          WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
          AND CV.CONFIG_PARAM       = CP.ID
          AND CP.NAME               = 'enableDealerAndInstallationDate'
          AND CV.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_CAP_INST_DLR_DATE := 'FALSE';
        END;
        BEGIN
          SELECT UPPER(CFO.VALUE)
          INTO V_ADD_INFO_APPLICABLE
          FROM CONFIG_PARAM_OPTION CFO,
            CONFIG_VALUE CV,
            CONFIG_PARAM CP
          WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
          AND CV.CONFIG_PARAM       = CP.ID
          AND CP.NAME               = 'additionalInformationDetailsApplicable'
          AND CV.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_ADD_INFO_APPLICABLE := 'FALSE';
        END;
        BEGIN
          SELECT II.id,
            II.PENDING_WARRANTY,
            II.SHIPMENT_DATE,
            II.BUILT_ON,
            II.CURRENT_OWNER,
            II.HOURS_ON_MACHINE,
            II.CONDITION_TYPE,
			I.PRODUCT,
			I.MODEL
          INTO V_SERIAL_ID,
            V_PENDING_WR,
            V_SHIP_DATE,
            V_BUILD_DATE,
            V_CURR_OWNER_ID,
            V_HOURS_ON_SERV,
            V_CONDITION,
			V_PRODUCT,
			V_MODEL
          FROM INVENTORY_ITEM II,
            ITEM I
          WHERE II.OF_TYPE          = I.ID
          AND II.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO
          AND I.BUSINESS_UNIT_INFO  = EACH_REC.BUSINESS_UNIT_INFO
          AND II.SERIAL_NUMBER      = EACH_REC.SERIAL_NUMBER
          AND I.ITEM_NUMBER = EACH_REC.ITEM_NUMBER
          AND II.SERIALIZED_PART    = 0
          AND II.D_ACTIVE           = 1
          AND II.TYPE               = 'STOCK'
		  AND I.ITEM_TYPE            = 'MACHINE'
		  AND I.OWNED_BY             = 1
		  AND I.D_ACTIVE             = 1;
          SELECT upper(SP.SERVICE_PROVIDER_TYPE)
          INTO V_UNIT_OWNER_TYPE
          FROM SERVICE_PROVIDER SP
          WHERE SP.id = V_CURR_OWNER_ID;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_UNIT_OWNER_TYPE := 'DEALER';
          V_ERROR_CODE      := common_utils.addErrorMessage(V_ERROR_CODE, 'WR013');
        END;
        IF NOT(V_ALLOW_OTHER_DLRS_STOCK = 'TRUE' OR V_FILING_PARTY = 1 OR V_UNIT_OWNER_TYPE = 'OEM') AND V_FILING_PARTY > 1 AND V_FILING_PARTY <> V_CURR_OWNER_ID THEN
          V_ERROR_CODE                 := common_utils.addErrorMessage(V_ERROR_CODE, 'WR013');
        END IF;
        IF V_PENDING_WR = 1 THEN
          V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR009');
         END IF;
        IF V_ADD_INFO_APPLICABLE        = 'TRUE' THEN
          IF EACH_REC.TRANSACTION_TYPE IS NULL THEN
            V_ERROR_CODE               := common_utils.addErrorMessage(V_ERROR_CODE, 'WR022');
          ELSE
            BEGIN
              SELECT 1
              INTO V_VAR
              FROM TRANSACTION_TYPE TT
              WHERE UPPER(TT.TYPE) = UPPER(EACH_REC.TRANSACTION_TYPE)
              AND TT.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR023');            
            END;
          END IF;
          IF EACH_REC.MARKET_TYPE IS NULL THEN
            V_ERROR_CODE          := common_utils.addErrorMessage(V_ERROR_CODE, 'WR024');
          ELSE
            BEGIN
              SELECT 1
              INTO V_VAR
              FROM MARKET_TYPE MT
              WHERE UPPER(MT.TITLE) = UPPER(EACH_REC.MARKET_TYPE)
              AND MT.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR025');
            END;
          END IF;
          IF EACH_REC.FIRST_TIME_OWNER             IS NULL THEN
            V_ERROR_CODE                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR026');
          ELSIF upper(EACH_REC.FIRST_TIME_OWNER)   <> 'YES' AND upper(EACH_REC.FIRST_TIME_OWNER) <> 'NO' THEN
            V_ERROR_CODE                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR027');
          ELSIF upper(EACH_REC.FIRST_TIME_OWNER)    = 'NO' THEN
            V_ERROR_CODE                           := COMMON_UTILS.ADDERRORMESSAGE(V_ERROR_CODE, 'WR028');
          END IF;
          IF (upper(EACH_REC.FIRST_TIME_OWNER) = 'NO') THEN
            BEGIN
              SELECT 1
              INTO V_VAR
              FROM COMPETITION_TYPE CT
              WHERE UPPER(CT.TYPE) = UPPER(EACH_REC.COMPETITION_TYPE);
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR030');
            END;
            BEGIN
              SELECT 1
              INTO V_VAR
              FROM COMPETITOR_MAKE CM
              WHERE UPPER(CM.MAKE) = UPPER(EACH_REC.COMPETITOR_MAKE);
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR031');
            END;
            BEGIN
              SELECT 1
              INTO V_VAR
              FROM COMPETITOR_MODEL CM
              WHERE UPPER(CM.MODEL) = UPPER(EACH_REC.MODEL_NUMBER);
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR032');
            END;
          END IF; 
        END IF;
        IF EACH_REC.DELIVERY_DATE                         IS NOT NULL AND NOT (COMMON_UTILS.ISVALIDDATE(EACH_REC.DELIVERY_DATE)) THEN
          V_ERROR_CODE                                    := common_utils.addErrorMessage(V_ERROR_CODE, 'WR034');
        ELSIF TO_DATE(EACH_REC.DELIVERY_DATE, 'YYYYMMDD') >= SYSDATE THEN
          V_ERROR_CODE                                    := common_utils.addErrorMessage(V_ERROR_CODE, 'WR035');
        ELSIF TO_DATE(EACH_REC.DELIVERY_DATE, 'YYYYMMDD')  < V_BUILD_DATE THEN
          V_ERROR_CODE                                    := common_utils.addErrorMessage(V_ERROR_CODE, 'WR056');
        ELSIF TO_DATE(EACH_REC.DELIVERY_DATE, 'YYYYMMDD')  < V_SHIP_DATE THEN
          V_ERROR_CODE                                    := common_utils.addErrorMessage(V_ERROR_CODE, 'WR036');
        END IF;
        IF UPPER(V_CAP_INST_DLR_DATE)           = 'TRUE' THEN
          IF EACH_REC.INSTALLING_DEALER_NUMBER IS NULL THEN
            V_ERROR_CODE                       := common_utils.addErrorMessage(V_ERROR_CODE, 'WR017');
          ELSE
            BEGIN
              SELECT SP.id
              INTO V_INSTALL_DEALER_ID
              FROM SERVICE_PROVIDER SP,
                BU_ORG_MAPPING BOM
              WHERE SP.ID                            = BOM.ORG
              AND BOM.BU                             = EACH_REC.BUSINESS_UNIT_INFO
              AND SP.SERVICE_PROVIDER_NUMBER         = EACH_REC.INSTALLING_DEALER_NUMBER
              AND EACH_REC.INSTALLING_DEALER_NUMBER IS NOT NULL;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR018');
            END;
          END IF;
          IF EACH_REC.DATE_OF_INSTALLATION IS NULL THEN
            V_ERROR_CODE                   := common_utils.addErrorMessage(V_ERROR_CODE, 'WR019');
          ELSIF NOT (COMMON_UTILS.ISVALIDDATE(EACH_REC.DATE_OF_INSTALLATION)) THEN
            V_ERROR_CODE                                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR037');
          ELSIF TO_DATE(EACH_REC.DATE_OF_INSTALLATION, 'YYYYMMDD') >= SYSDATE THEN
            V_ERROR_CODE                                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR039');
          ELSIF TO_DATE(EACH_REC.DATE_OF_INSTALLATION, 'YYYYMMDD')  < V_BUILD_DATE THEN
            V_ERROR_CODE                                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR058');
          ELSIF TO_DATE(EACH_REC.DATE_OF_INSTALLATION, 'YYYYMMDD')  < V_SHIP_DATE THEN
            V_ERROR_CODE                                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR057');
          ELSIF EACH_REC.DELIVERY_DATE                             IS NOT NULL AND COMMON_UTILS.ISVALIDDATE(EACH_REC.DELIVERY_DATE) AND TO_DATE(EACH_REC.DATE_OF_INSTALLATION, 'YYYYMMDD') > TO_DATE(EACH_REC.DELIVERY_DATE, 'YYYYMMDD') THEN
            V_ERROR_CODE                                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR038');
          END IF;
        END IF;
        IF EACH_REC.HOURS_ON_TRUCK IS NOT NULL AND NOT(COMMON_UTILS.ISNUMBER(EACH_REC.HOURS_ON_TRUCK)) THEN
          V_ERROR_CODE               := common_utils.addErrorMessage(V_ERROR_CODE, 'WR033');
        END IF;
        IF EACH_REC.COMPONENT_PART_NUMBER IS NOT NULL THEN
          COMMON_UTILS.ParseAnySeperatorList(EACH_REC.COMPONENT_PART_NUMBER,'#$#',V_COMP_PART_ARRAY ,V_COMP_PART_COUNT);
          IF EACH_REC.COMPONENT_SERIAL_NUMBER IS NOT NULL THEN
            COMMON_UTILS.ParseAnySeperatorList(EACH_REC.COMPONENT_SERIAL_NUMBER,'#$#',V_COMP_SERIAL_ARRAY ,V_COMP_SERIAL_COUNT);
            IF EACH_REC.COMPONENT_INSTALLATION_DATE IS NOT NULL THEN
              COMMON_UTILS.ParseAnySeperatorList(EACH_REC.COMPONENT_INSTALLATION_DATE,'#$#',V_COMP_INSTALL_ARRAY ,V_COMP_INSTALL_COUNT);
              IF V_COMP_PART_COUNT <> V_COMP_SERIAL_COUNT THEN
                V_ERROR_CODE       := common_utils.addErrorMessage(V_ERROR_CODE, 'WR040');
              END IF;
              IF V_COMP_PART_COUNT <> V_COMP_INSTALL_COUNT THEN
                V_ERROR_CODE       := common_utils.addErrorMessage(V_ERROR_CODE, 'WR041');
              END IF;
              FOR I IN 1..V_COMP_PART_COUNT
              LOOP
                BEGIN
                  SELECT 1
                  INTO V_VAR
                  FROM ITEM
                  WHERE ITEM_TYPE        = 'PART'
                  AND ITEM_NUMBER        = V_COMP_PART_ARRAY(I)
                  AND OWNED_BY           = 1
                  AND BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR042');
                  EXIT
                WHEN INSTR(NVL(V_ERROR_CODE,'X'), 'WR042') > 0;
                END;
              END LOOP;
              IF INSTR(NVL(V_ERROR_CODE,'X'), 'WR040') = 0 AND INSTR(NVL(V_ERROR_CODE,'X'), 'WR041') = 0 AND INSTR(NVL(V_ERROR_CODE,'X'), 'WR042') = 0 THEN
                FOR N                                 IN 1..V_COMP_PART_COUNT
                LOOP
                  BEGIN
                    SELECT II.id
                    INTO V_COMPONENT_ID
                    FROM ITEM I,
                      INVENTORY_ITEM II
                    WHERE I.ITEM_TYPE        = 'PART'
                    AND I.ITEM_NUMBER        = V_COMP_PART_ARRAY(N)
                    AND I.OWNED_BY           = 1
                    AND I.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO
                    AND II.OF_TYPE           = I.ID
                    AND II.SERIAL_NUMBER     = V_COMP_SERIAL_ARRAY(N)
                    AND II.SERIALIZED_PART   = 1
                    AND II.D_ACTIVE          = 1;
                    SELECT common_utils.addErrorMessage(V_ERROR_CODE, 'WR054')
                    INTO V_ERROR_CODE
                    FROM inventory_item_composition iic,
                      inventory_item ii
                    WHERE iic.PART_OF = ii.id
                    AND iic.PART      = V_COMPONENT_ID
                    AND iic.D_ACTIVE  = 1
                    AND ii.id        <> V_SERIAL_ID
                    AND II.D_ACTIVE   = 1;
                    EXIT
                  WHEN INSTR(NVL(V_ERROR_CODE,'X'), 'WR054') > 0;
                  EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                    V_COMPONENT_ID := 0;
                  END;
                END LOOP;
              END IF;
              FOR I IN 1..V_COMP_INSTALL_COUNT
              LOOP
                IF NOT COMMON_UTILS.ISVALIDDATE(V_COMP_INSTALL_ARRAY(I)) OR TO_DATE(V_COMP_INSTALL_ARRAY(I), 'YYYYMMDD') < V_BUILD_DATE THEN
                  V_ERROR_CODE                                                                                          := common_utils.addErrorMessage(V_ERROR_CODE, 'WR043');
                  EXIT
                WHEN INSTR(NVL(V_ERROR_CODE,'X'), 'WR043') > 0;
                END IF;
              END LOOP;
            END IF;
          END IF;
        END IF;
        IF EACH_REC.NUMBER_OF_MONTHS IS NOT NULL AND NOT (COMMON_UTILS.ISNUMBER(EACH_REC.NUMBER_OF_MONTHS)) THEN
          V_ERROR_CODE               := common_utils.addErrorMessage(V_ERROR_CODE, 'WR044');
        END IF;
        IF EACH_REC.NUMBER_OF_YEARS IS NOT NULL AND NOT (COMMON_UTILS.ISNUMBER(EACH_REC.NUMBER_OF_YEARS)) THEN
          V_ERROR_CODE              := common_utils.addErrorMessage(V_ERROR_CODE, 'WR045');
        END IF;
        SELECT PRODUCT,
          MODEL
        INTO V_PRODUCT,
          V_MODEL
        FROM ITEM
        WHERE ITEM_NUMBER = EACH_REC.ITEM_NUMBER
        AND OWNED_BY      =
          (SELECT ID FROM PARTY WHERE NAME = 'OEM'
          )
        AND BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
    IF (V_INSTALL_DEALER_ID IS NOT NULL ) 
		THEN 
        SELECT  DECODE(SP.CERTIFIED, 0, 'N', 1, 'Y')
        INTO    V_CERT_STATUS
        FROM SERVICE_PROVIDER SP,
          BU_ORG_MAPPING BOM
        WHERE SP.SERVICE_PROVIDER_NUMBER = EACH_REC.INSTALLING_DEALER_NUMBER
        AND SP.ID                        = BOM.ORG
        AND BOM.BU                       = EACH_REC.BUSINESS_UNIT_INFO;		
		END IF;
DBMS_OUTPUT.PUT_LINE(V_PRODUCT || V_MODEL || EACH_REC.BUSINESS_UNIT_INFO || TO_DATE(EACH_REC.DELIVERY_DATE, 'YYYYMMDD')|| TO_NUMBER(V_HOURS_ON_SERV) || V_CONDITION || V_CERT_STATUS|| V_INSTALL_DEALER_ID);
        BEGIN
        OPEN ALL_ELIGIBLE_POLICY_PLANS(V_PRODUCT, V_MODEL, EACH_REC.BUSINESS_UNIT_INFO, TO_DATE(EACH_REC.DELIVERY_DATE, 'YYYYMMDD'), TO_NUMBER(V_HOURS_ON_SERV), V_CONDITION, V_CERT_STATUS, V_INSTALL_DEALER_ID);

        IF ALL_ELIGIBLE_POLICY_PLANS%NOTFOUND THEN
          V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR055');
        END IF;
        CLOSE ALL_ELIGIBLE_POLICY_PLANS;
        EXCEPTION WHEN OTHERS THEN
        V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR055');
        END;

        IF EACH_REC.ADDITIONAL_APPLICABLE_POLICIES IS NOT NULL THEN
          BEGIN
            COMMON_UTILS.ParseAnySeperatorList(EACH_REC.ADDITIONAL_APPLICABLE_POLICIES,'#$#',V_POL_ARRAY ,V_POL_COUNT);
            FOR I IN 1..V_POL_COUNT
            LOOP
              IF NOT V_POL_CODES.EXISTS(V_POL_ARRAY(I)) THEN
                V_ERROR_CODE := common_utils.addErrorMessage(V_ERROR_CODE, 'WR046');
                EXIT
              WHEN INSTR(NVL(V_ERROR_CODE,'X'), 'WR046') > 0;
              END IF;
            END LOOP;
          END;
        END IF;
        IF EACH_REC.REQUEST_FOR_EXTENSION          IS NOT NULL THEN
          IF upper(EACH_REC.REQUEST_FOR_EXTENSION) <> 'YES' AND upper(EACH_REC.REQUEST_FOR_EXTENSION) <> 'NO' THEN
            V_ERROR_CODE                           := common_utils.addErrorMessage(V_ERROR_CODE, 'WR052');
          END IF;
        END IF;
        IF V_ERROR_CODE IS NULL AND EACH_REC.ERROR_CODE IS NULL THEN
          UPDATE STG_WARRANTY_REGISTRATIONS
          SET ERROR_STATUS = 'Y',
            ERROR_CODE     = NULL
          WHERE ID         = EACH_REC.ID;
        ELSE
          UPDATE STG_WARRANTY_REGISTRATIONS
          SET ERROR_STATUS = 'N',
            ERROR_CODE     = ERROR_CODE
            || DECODE (ERROR_CODE,NULL, V_ERROR_CODE,','
            || V_ERROR_CODE)
          WHERE ID = EACH_REC.ID;
        END IF;
        COMMIT;
      END;
    END LOOP;
    COMMIT;
  END;
  BEGIN
    SELECT file_upload_mgt_id
    INTO v_file_upload_mgt_id
    FROM STG_WARRANTY_REGISTRATIONS
    WHERE ROWNUM = 1;
    BEGIN
      SELECT COUNT(*)
      INTO v_success_count
      FROM STG_WARRANTY_REGISTRATIONS
      WHERE file_upload_mgt_id = v_file_upload_mgt_id
      AND ERROR_STATUS         = 'Y';
    EXCEPTION
    WHEN OTHERS THEN
      v_success_count := 0;
    END;
    BEGIN
      SELECT COUNT(*)
      INTO v_error_count
      FROM STG_WARRANTY_REGISTRATIONS
      WHERE file_upload_mgt_id = v_file_upload_mgt_id
      AND ERROR_STATUS         = 'N';
    EXCEPTION
    WHEN OTHERS THEN
      v_error_count := 0;
    END;
    SELECT COUNT(*)
    INTO v_count
    FROM STG_WARRANTY_REGISTRATIONS
    WHERE file_upload_mgt_id = v_file_upload_mgt_id;
    UPDATE file_upload_mgt
    SET success_records= v_success_count,
      error_records    = v_error_count,
      total_records    = v_count
    WHERE id           = v_file_upload_mgt_id;
  EXCEPTION
  WHEN OTHERS THEN
    v_error_code := SUBSTR(SQLERRM, 1, 4000);
    UPDATE file_upload_mgt
    SET error_message = v_error_code
    WHERE id          = v_file_upload_mgt_id;
  END;
  COMMIT;
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
END UPLOAD_WARRANTY_REG_VALIDATION;
 INFO 22-May-14 14:38:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:38:01 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:38:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

create or replace
PROCEDURE UPLOAD_WARRANTY_REG_UPLOAD
AS
 CURSOR ALL_REC
  IS
    SELECT *
    FROM STG_WARRANTY_REGISTRATIONS
    WHERE ERROR_STATUS          = 'Y'
    AND NVL(UPLOAD_STATUS, 'N') = 'N';
  CURSOR ALL_ELIGIBLE_POLICY_PLANS(P_PRODUCT VARCHAR2, P_MODEL VARCHAR2, P_BU VARCHAR2, P_DEL_DATE DATE, P_HRS_ON_SERVICE NUMBER, P_CONDITION VARCHAR2, P_CERT_STATUS VARCHAR2, P_INSTALL_DEALER NUMBER)
  IS
   SELECT PD.*
    FROM POLICY_DEFINITION PD,
      POLICY_FOR_ITEMCONDITIONS PFI
    WHERE PD.ID IN
      (SELECT POLICY_DEFN
      FROM POLICY_FOR_PRODUCTS
      WHERE FOR_PRODUCT IN (P_PRODUCT, P_MODEL)
      )
    AND PD.ACTIVE_FROM                                           <= P_DEL_DATE
    AND PD.ACTIVE_TILL                                           >= P_DEL_DATE
    AND P_HRS_ON_SERVICE                                         <= PD.SERVICE_HRS_COVERED
    AND PD.BUSINESS_UNIT_INFO                                     = P_BU
    AND UPPER(PD.WARRANTY_TYPE)                                   = 'STANDARD'
    AND (DECODE(PD.CERTIFICATION_STATUS, 'NOTCERTIFIED', 'N', 'Y')= P_CERT_STATUS
    OR PD.CERTIFICATION_STATUS                                    = 'ANY')
    AND PD.ID                                                     = PFI.POLICY_DEFN
    AND PFI.FOR_ITEMCONDITION                                     = P_CONDITION


    And  (
            P_INSTALL_DEALER in (
                select
                    applicable7_.for_service_provider 
                from
                    policy_for_serviceproviders applicable7_ 
                where
                    PD.id=applicable7_.policy_defn
            ) 
            or exists (
                select
                    dealergrou8_.id 
                from
                    dealer_group dealergrou8_ cross 
                join
                    dealer_group dealergrou9_ 
                inner join
                    dealers_in_group includedde10_ 
                        on dealergrou9_.id=includedde10_.dealer_group 
                inner join
                    service_provider servicepro11_ 
                        on includedde10_.dealer=servicepro11_.id 
                inner join
                    organization servicepro11_1_ 
                        on servicepro11_.id=servicepro11_1_.id 
                inner join
                    party servicepro11_2_ 
                        on servicepro11_.id=servicepro11_2_.id 
                where
                    dealergrou8_.business_unit_info in (
                       P_BU
                    ) 
                    and dealergrou8_.d_active = 1 
                    and dealergrou9_.business_unit_info in (
                        P_BU
                    ) 
                    and dealergrou9_.d_active = 1 
                    and P_INSTALL_DEALER=servicepro11_.id 
                    and dealergrou8_.tree_id=dealergrou9_.tree_id 
                    and dealergrou8_.lft<=dealergrou9_.lft 
                    and dealergrou9_.rgt<=dealergrou8_.rgt 
                    and (
                        dealergrou8_.id in (
                            select
                                applicable12_.for_dealer_groups 
                            from
                                policy_for_dealer_groups applicable12_ 
                            where
                                PD.id=applicable12_.policy_defn
                        )
                    )
                ) 
                or  not (exists (select
                    servicepro14_.id 
                from
                    policy_for_serviceproviders applicable13_,
                    service_provider servicepro14_ 
                inner join
                    organization servicepro14_1_ 
                        on servicepro14_.id=servicepro14_1_.id 
                inner join
                    party servicepro14_2_ 
                        on servicepro14_.id=servicepro14_2_.id 
                where
                    PD.id=applicable13_.policy_defn 
                    and applicable13_.for_service_provider=servicepro14_.id)) 
                and  not (exists (select
                    dealergrou16_.id 
                from
                    policy_for_dealer_groups applicable15_,
                    dealer_group dealergrou16_ 
                where
                    PD.id=applicable15_.policy_defn 
                    and applicable15_.for_dealer_groups=dealergrou16_.id))
            ) 
    AND PD.D_ACTIVE = 1
    AND NOT EXISTS
      (SELECT 1
      FROM POLICY_FEES
      WHERE POLICY        = PD.id
      AND is_transferable = 0
      AND amount          > 0
      );
    CURSOR ALL_EXTENDED_POLICIES(P_BUSINESS_UNIT_INFO VARCHAR2, P_SERIAL_ID NUMBER)
    IS
      SELECT POLICY
      FROM EXTENDED_WARRANTY_NOTIFICATION we
      WHERE NOTIFICATION_TYPE  <> 'Completed'
      AND WE.FOR_UNIT           = P_SERIAL_ID
      AND WE.BUSINESS_UNIT_INFO = P_BUSINESS_UNIT_INFO;
    V_UPLOAD_ERROR        VARCHAR2(4000);
    V_ADMIN_APPRV_IND     VARCHAR2(10);
    V_SAVE_AS_DRAFT     VARCHAR2(10);
    V_PERFORM_D2D         VARCHAR2(10);
    V_ALLOW_OTR_DLRS_STK  VARCHAR2(10);
    V_KICK_OFF_CVRGS      BOOLEAN;
    V_TYPE_OF             NUMBER(19);
    V_PRODUCT             VARCHAR2(255);
    V_MODEL               VARCHAR2(255);
    V_OEM_ID              NUMBER(19);
    V_PARTY_OEM_ID        NUMBER(19);
    V_WARRANTY_ID         NUMBER(19);
    V_MARK_INFO_ID        NUMBER(19);
    V_SALESMAN_ID         NUMBER(19);
    V_MARKET_ID           NUMBER(19);
    V_COMPETITION_TYPE_ID NUMBER(19);
    V_TRANSACTION_TYPE_ID NUMBER(19);
    V_COMPETITOR_MODEL_ID NUMBER(19);
    V_COMPETITOR_MAKE_ID  NUMBER(19);
    V_MAX_COUNT           NUMBER(19);
    V_INV_TYPE            VARCHAR2(255);
    V_TRANS_TYPE          VARCHAR2(255);
    V_SELLER_ID           NUMBER(19);
    V_BUYER_ID            NUMBER(19);
    V_BUILD_DATE DATE;
    V_MFG_ID            NUMBER(19);
    V_INV_ID            NUMBER(19);
    V_INSTALL_DEALER_ID NUMBER(19);
    V_CUST_ADD_ID       VARCHAR2(255);
    V_ADDRESS_TRANS_ID  NUMBER(19);
    V_MULTIDRETRNUMBER  NUMBER(19);
    V_OPERATOR_ID       NUMBER(19);
    V_WARRANTY_AUDIT_ID NUMBER(19);
    V_OF_TYPE_ID        NUMBER(19);
    V_SERIAL_ID         NUMBER(19);
    V_INV_ITEM_COMP_ID  NUMBER(19);
    V_HOURS_ON_SERV     NUMBER(19);
    V_BUILT_ON DATE;
    V_INSTALL_DATE DATE;
    V_SHIP_DATE DATE;
    V_CONDITION       VARCHAR2(255);
    V_TYPE            VARCHAR2(255);
    V_OWNERSHIP_STATE VARCHAR2(255);
    V_CERT_STATUS     VARCHAR2(1);
    V_SHIP_COVERAGE_TILL_DATE DATE;
    V_COVERAGE_TILL_DATE DATE;
    V_MONTHS_FRM_DELIVERY NUMBER(19);
    V_MONTHS_FRM_SHIPMENT NUMBER(19);
    V_POLICY_DEFN_ID      NUMBER(19);
    V_POLICY_ID           NUMBER(19);
    V_POLICY_AUDIT_ID     NUMBER(19);
    V_ADDTNL_INFO_IND     VARCHAR2(10);
    V_CAP_INST_DLR_DATE   VARCHAR2(10);
    V_POL_COUNT           NUMBER(19);
    V_SERIAL_NUM_COUNT    NUMBER(19);
    V_PART_NUM_COUNT      NUMBER(19);
    V_INSTALL_DATE_COUNT  NUMBER(19);
    V_END_CUST_ID         NUMBER(19);
    V_ASSIGNED_TO         NUMBER(19);
    V_WARRANTY_STATUS     VARCHAR2(255);
    V_ASSIGN_COUNT        NUMBER(19);
    V_TRANS_ID            NUMBER(19);
    V_DEALER_ID           NUMBER(19);
    V_LAST_UPDATED_BY     NUMBER(19);
    V_TRANSACTION_ORDER   NUMBER;
    V_CURR_OWNER_TYPE     VARCHAR(50);
    V_INVOICE_DATE DATE;
    V_INVOICE_NUM              VARCHAR2(255);
    V_WARANTY_TASK_INSTANCE_ID NUMBER(19);
    V_COVERAGE_END_DATE DATE;
    V_COMP_INSTALL_DATE_ARRAY DBMS_UTILITY.UNCL_ARRAY;
    V_COMP_SERIAL_NUMBER_ARRAY DBMS_UTILITY.UNCL_ARRAY;
    V_COMP_PART_NUMBER_ARRAY DBMS_UTILITY.UNCL_ARRAY;
    V_POL_ARRAY DBMS_UTILITY.UNCL_ARRAY;
    V_CUR_RECORD ALL_ELIGIBLE_POLICY_PLANS%ROWTYPE;
    V_IS_RED_CVG        VARCHAR(20);
    V_IS_REQ_EXTN       VARCHAR(20);
    V_WNTY_EXTN_REQ_ID  NUMBER(19);
    V_MAX_LIST_INDEX    NUMBER;
    V_OPR_ADDR_TRANS_ID NUMBER(19);
    V_OPR_ADDR_ID       NUMBER(19);
    V_CONTRACT_CODE_ID  NUMBER(19); 
    V_MAINTENANCE_CONTRACT_ID  NUMBER(19); 
    V_INDUSTRY_CODE_ID  NUMBER(19); 
    V_DEALER_REPRESENTATIVE VARCHAR2(255);
  BEGIN
    SELECT ID INTO V_PARTY_OEM_ID FROM PARTY WHERE NAME = 'OEM';
    FOR EACH_REC IN ALL_REC
    LOOP
      BEGIN
        V_UPLOAD_ERROR             := NULL;
        V_TYPE_OF                  := 0;
        V_PRODUCT                  := NULL;
        V_MODEL                    := NULL;
        V_WARRANTY_ID              := 0;
        V_MARK_INFO_ID             := NULL;
        V_SALESMAN_ID              := 0;
        V_MARKET_ID                := NULL;
        V_COMPETITION_TYPE_ID      := NULL;
        V_TRANSACTION_TYPE_ID      := NULL;
        V_COMPETITOR_MODEL_ID      := NULL;
        V_COMPETITOR_MAKE_ID       := NULL;
        V_TRANS_TYPE               := NULL;
        V_SELLER_ID                := 0;
        V_BUYER_ID                 := 0;
        V_INSTALL_DEALER_ID        := 0;
        V_CUST_ADD_ID              := NULL;
        V_ADDRESS_TRANS_ID         := 0;
        V_MULTIDRETRNUMBER         := 0;
        V_OPERATOR_ID              := NULL;
        V_WARRANTY_AUDIT_ID        := 0;
        V_OF_TYPE_ID               := 0;
        V_SERIAL_ID                := 0;
        V_INV_ITEM_COMP_ID         := 0;
        V_HOURS_ON_SERV            := 0;
        V_BUILT_ON                 :=NULL;
        V_INSTALL_DATE             :=NULL;
        V_SHIP_DATE                :=NULL;
        V_CONDITION                :=NULL;
        V_TYPE                     :=NULL;
        V_OWNERSHIP_STATE          :=NULL;
        V_CERT_STATUS              := NULL;
        V_SHIP_COVERAGE_TILL_DATE  := NULL;
        V_COVERAGE_TILL_DATE       := NULL;
        V_MONTHS_FRM_DELIVERY      := 0;
        V_MONTHS_FRM_SHIPMENT      := 0;
        V_POLICY_DEFN_ID           := 0;
        V_POLICY_ID                := 0;
        V_POLICY_AUDIT_ID          := 0;
        V_END_CUST_ID              := 0;
        V_ASSIGN_COUNT             := 0;
        V_TRANS_ID                 := NULL;
        V_DEALER_ID                := 0;
        V_SERIAL_NUM_COUNT         := 0;
        V_INVOICE_DATE             := NULL;
        V_INVOICE_NUM              := NULL;
        V_WARANTY_TASK_INSTANCE_ID := NULL;
        V_COVERAGE_END_DATE        := NULL;
        V_CURR_OWNER_TYPE          := NULL;
        V_ASSIGNED_TO              := NULL;
        V_IS_RED_CVG               := 'FALSE';
        V_IS_REQ_EXTN              := 'FALSE';
        V_MAX_LIST_INDEX           := 0;
        V_OPR_ADDR_ID              := NULL;
        V_OPR_ADDR_TRANS_ID        := NULL;
        V_CONTRACT_CODE_ID         := NULL;
        V_MAINTENANCE_CONTRACT_ID  := NULL; 
        V_INDUSTRY_CODE_ID         := NULL;
        SELECT UPLOADED_BY
        INTO V_LAST_UPDATED_BY
        FROM file_upload_mgt
        WHERE id = EACH_REC.FILE_UPLOAD_MGT_ID;
        BEGIN
          SELECT UPPER(CFO.VALUE)
          INTO V_ALLOW_OTR_DLRS_STK
          FROM CONFIG_PARAM_OPTION CFO,
            CONFIG_VALUE CV,
            CONFIG_PARAM CP
          WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
          AND CV.CONFIG_PARAM       = CP.ID
          AND CP.NAME               = 'allowWntyRegOnOthersStock'
          AND CV.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_ALLOW_OTR_DLRS_STK := 'FALSE';
        END;
        BEGIN
          SELECT UPPER(CFO.VALUE)
          INTO V_CAP_INST_DLR_DATE
          FROM CONFIG_PARAM_OPTION CFO,
            CONFIG_VALUE CV,
            CONFIG_PARAM CP
          WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
          AND CV.CONFIG_PARAM       = CP.ID
          AND CP.NAME               = 'enableDealerAndInstallationDate'
          AND CV.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_CAP_INST_DLR_DATE := 'FALSE';
        END;
        BEGIN
          SELECT UPPER(CFO.VALUE)
          INTO V_ADDTNL_INFO_IND
          FROM CONFIG_PARAM_OPTION CFO,
            CONFIG_VALUE CV,
            CONFIG_PARAM CP
          WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
          AND CV.CONFIG_PARAM       = CP.ID
          AND CP.NAME               = 'additionalInformationDetailsApplicable'
          AND CV.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_ADDTNL_INFO_IND := 'FALSE';
        END;
        BEGIN
          SELECT UPPER(CFO.VALUE)
          INTO V_ADMIN_APPRV_IND
          FROM CONFIG_PARAM_OPTION CFO,
            CONFIG_VALUE CV,
            CONFIG_PARAM CP
          WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
          AND CV.CONFIG_PARAM       = CP.ID
          AND CP.NAME               = 'manualApprovalFlowForDR'
          AND CV.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_ADMIN_APPRV_IND := 'FALSE';
        END;
         BEGIN
          SELECT UPPER(CFO.VALUE)
          INTO V_SAVE_AS_DRAFT
          FROM CONFIG_PARAM_OPTION CFO,
            CONFIG_VALUE CV,
            CONFIG_PARAM CP
          WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
          AND CV.CONFIG_PARAM       = CP.ID
          AND CP.NAME               = 'saveDRAsDraftOnUpload'
          AND CV.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_SAVE_AS_DRAFT := 'FALSE';
        END;
        BEGIN
          SELECT UPPER(CFO.VALUE)
          INTO V_PERFORM_D2D
          FROM CONFIG_PARAM_OPTION CFO,
            CONFIG_VALUE CV,
            CONFIG_PARAM CP
          WHERE CFO.ID              = CV.CONFIG_PARAM_OPTION
          AND CV.CONFIG_PARAM       = CP.ID
          AND CP.NAME               = 'performD2DOnWR'
          AND CV.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_PERFORM_D2D := 'FALSE';
        END;
        IF UPPER(V_SAVE_AS_DRAFT) = 'TRUE' THEN 
          V_WARRANTY_STATUS        := 'DRAFT';
          V_ADMIN_APPRV_IND := 'TRUE';
        ELSIF UPPER(V_ADMIN_APPRV_IND) = 'TRUE' THEN
          V_WARRANTY_STATUS        := 'SUBMITTED';
        ELSE
          V_WARRANTY_STATUS := 'ACCEPTED';
        END IF;
		BEGIN
        SELECT CUST.ID
        INTO V_END_CUST_ID
        FROM CUSTOMER CUST,
          CUSTOMER_ADDRESSES CUSTADDR,
          ADDRESS_BOOK ADDRBK,
          ADDRESS_BOOK_ADDRESS_MAPPING ADDRBKMPNG,
          SERVICE_PROVIDER SP
        WHERE CUST.ID                  = CUSTADDR.CUSTOMER
        AND CUSTADDR.ADDRESSES         = ADDRBKMPNG.ADDRESS_ID
        AND ADDRBKMPNG.ADDRESS_BOOK_ID = ADDRBK.ID
        AND ADDRBK.BELONGS_TO          = SP.ID
        AND UPPER(ADDRBK.TYPE)         = UPPER(EACH_REC.CUSTOMER_TYPE)
        AND CUST.CUSTOMER_ID           = EACH_REC.CUSTOMER_NUMBER
        AND SP.SERVICE_PROVIDER_NUMBER = EACH_REC.DEALER_NUMBER;
		EXCEPTION
        WHEN NO_DATA_FOUND THEN
            V_END_CUST_ID := 0;
        END;
		BEGIN
        SELECT ID
        INTO V_INSTALL_DEALER_ID
        FROM SERVICE_PROVIDER
        WHERE SERVICE_PROVIDER_NUMBER = EACH_REC.INSTALLING_DEALER_NUMBER;
		EXCEPTION
        WHEN NO_DATA_FOUND THEN
            V_INSTALL_DEALER_ID := 0;
        END;
        SELECT ID
        INTO V_DEALER_ID
        FROM SERVICE_PROVIDER
        WHERE SERVICE_PROVIDER_NUMBER = EACH_REC.DEALER_NUMBER;
        IF (EACH_REC.OPERATOR_NUMBER IS NOT NULL) THEN
          BEGIN
            SELECT CUST.ID
            INTO V_OPERATOR_ID
            FROM CUSTOMER CUST,
              CUSTOMER_ADDRESSES CUSTADDR,
              ADDRESS_BOOK ADDRBK,
              ADDRESS_BOOK_ADDRESS_MAPPING ADDRBKMPNG,
              SERVICE_PROVIDER SP
            WHERE CUST.ID                  = CUSTADDR.CUSTOMER
            AND CUSTADDR.ADDRESSES         = ADDRBKMPNG.ADDRESS_ID
            AND ADDRBKMPNG.ADDRESS_BOOK_ID = ADDRBK.ID
            AND ADDRBK.BELONGS_TO          = SP.ID
            AND UPPER(ADDRBK.TYPE)         = UPPER(EACH_REC.OPERATOR_TYPE)
            AND CUST.CUSTOMER_ID           = EACH_REC.OPERATOR_NUMBER
            AND SP.SERVICE_PROVIDER_NUMBER = EACH_REC.DEALER_NUMBER;
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
            V_OPERATOR_ID := NULL;
          END;
        END IF;
        IF V_END_CUST_ID > 0 THEN
          BEGIN
            IF (EACH_REC.COMPONENT_SERIAL_NUMBER IS NOT NULL AND EACH_REC.COMPONENT_PART_NUMBER IS NOT NULL AND EACH_REC.COMPONENT_INSTALLATION_DATE IS NOT NULL) THEN
              COMMON_UTILS.ParseAnySeperatorList(EACH_REC.COMPONENT_SERIAL_NUMBER,'#$#',V_COMP_SERIAL_NUMBER_ARRAY , V_SERIAL_NUM_COUNT);
              COMMON_UTILS.ParseAnySeperatorList(EACH_REC.COMPONENT_PART_NUMBER,'#$#',V_COMP_PART_NUMBER_ARRAY , V_PART_NUM_COUNT);
              COMMON_UTILS.ParseAnySeperatorList(EACH_REC.COMPONENT_INSTALLATION_DATE,'#$#',V_COMP_INSTALL_DATE_ARRAY , V_INSTALL_DATE_COUNT);
            END IF;
            SELECT II.ID,
              BUILT_ON,
              SHIPMENT_DATE,
              CONDITION_TYPE,
              TYPE,
              OWNERSHIP_STATE,
              INSTALLATION_DATE,
              II.CURRENT_OWNER,
			  I.PRODUCT,
			  I.MODEL,
			  I.ID
            INTO V_SERIAL_ID,
              V_BUILT_ON,
              V_SHIP_DATE,
              V_CONDITION,
              V_TYPE,
              V_OWNERSHIP_STATE,
              V_INSTALL_DATE,
              V_SELLER_ID,
			  V_PRODUCT,
			  V_MODEL,
			  V_TYPE_OF
            FROM INVENTORY_ITEM II,
              ITEM I
            WHERE II.SERIAL_NUMBER    = EACH_REC.SERIAL_NUMBER
            AND II.OF_TYPE            = I.ID
            AND II.BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO
            AND I.BUSINESS_UNIT_INFO  = EACH_REC.BUSINESS_UNIT_INFO
            AND II.SERIALIZED_PART    = 0
            AND II.D_ACTIVE           = 1
            AND II.TYPE               = 'STOCK'
			AND I.ITEM_TYPE            = 'MACHINE'
			AND I.OWNED_BY             = 1
			AND I.D_ACTIVE             = 1;
            V_HOURS_ON_SERV:=EACH_REC.HOURS_ON_TRUCK;
            SELECT upper(SP.COMPANY_TYPE)
            INTO V_CURR_OWNER_TYPE
            FROM SERVICE_PROVIDER SP
            WHERE SP.ID    = V_SELLER_ID;
            IF V_SERIAL_ID > 0 THEN
              FOR I       IN 1..V_SERIAL_NUM_COUNT
              LOOP
                BEGIN
                  SELECT ID
                  INTO V_OF_TYPE_ID
                  FROM ITEM
                  WHERE ITEM_NUMBER      = V_COMP_PART_NUMBER_ARRAY(I)
                  AND ITEM_TYPE          = 'PART'
                  AND OWNED_BY           = 1
                  AND BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO
                  AND ROWNUM             = 1;
                  SELECT ID
                  INTO V_INV_ID
                  FROM INVENTORY_ITEM
                  WHERE SERIAL_NUMBER    = V_COMP_SERIAL_NUMBER_ARRAY(I)
                  AND OF_TYPE            = V_OF_TYPE_ID
                  AND serialized_part    = 1
                  AND D_ACTIVE           = 1
                  AND BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  SELECT INVENTORY_ITEM_SEQ.NEXTVAL INTO V_INV_ID FROM DUAL;
                  INSERT
                  INTO INVENTORY_ITEM
                    (
                      ID,
                      BUILT_ON,
                      DELIVERY_DATE,
                      HOURS_ON_MACHINE,
                      SERIAL_NUMBER,
                      SHIPMENT_DATE,
                      VERSION,
                      CONDITION_TYPE,
                      TYPE,
                      OF_TYPE,
                      OWNERSHIP_STATE,
                      BUSINESS_UNIT_INFO,
                      PENDING_WARRANTY,
                      D_CREATED_ON,
                      D_INTERNAL_COMMENTS,
                      D_ACTIVE,
                      D_UPDATED_ON,
                      D_LAST_UPDATED_BY,
                      D_CREATED_TIME,
                      D_UPDATED_TIME,
                      SERIALIZED_PART,
                      INSTALLATION_DATE,
                      SOURCE
                    )
                    VALUES
                    (
                      V_INV_ID,
                      V_BUILT_ON,
                      TO_DATE(EACH_REC.DELIVERY_DATE, 'YYYYMMDD'),
                      V_HOURS_ON_SERV,
                      V_COMP_SERIAL_NUMBER_ARRAY(I),
                      V_SHIP_DATE,
                      1,
                      V_CONDITION,
                      V_TYPE,
                      V_OF_TYPE_ID,
                      V_OWNERSHIP_STATE,
                      EACH_REC.BUSINESS_UNIT_INFO,
                      0,
                      SYSDATE,
                      EACH_REC.BUSINESS_UNIT_INFO
                      || '-Upload',
                      1,
                      SYSDATE,
                      V_LAST_UPDATED_BY,
                      CURRENT_TIMESTAMP,
                      CURRENT_TIMESTAMP,
                      1,
                      TO_DATE(V_COMP_INSTALL_DATE_ARRAY(I),'YYYYMMDD'),
                      'UNITREGISTRATION'
                    );
                  SELECT SEQ_INVENTORYITEMCOMPOSITION.NEXTVAL INTO V_INV_ITEM_COMP_ID FROM DUAL;
                  INSERT
                  INTO INVENTORY_ITEM_COMPOSITION
                    (
                      ID,
                      VERSION,
                      PART,
                      PART_OF,
                      D_CREATED_ON,
                      D_INTERNAL_COMMENTS,
                      D_ACTIVE,
                      D_UPDATED_ON,
                      D_LAST_UPDATED_BY,
                      D_CREATED_TIME,
                      D_UPDATED_TIME
                    )
                    VALUES
                    (
                      V_INV_ITEM_COMP_ID,
                      1,
                      V_INV_ID,
                      V_SERIAL_ID,
                      SYSDATE,
                      EACH_REC.BUSINESS_UNIT_INFO
                      || '-Upload',
                      1,
                      SYSDATE,
                      V_LAST_UPDATED_BY,
                      CURRENT_TIMESTAMP,
                      CURRENT_TIMESTAMP
                    );
                END;
              END LOOP;
              IF UPPER
                (
                  V_ADDTNL_INFO_IND
                )
                = 'TRUE' THEN
                BEGIN
                  SELECT MARKETING_INFORMATION_SEQ.NEXTVAL INTO V_MARK_INFO_ID FROM DUAL;
                  SELECT ID
                  INTO V_CONTRACT_CODE_ID
                  FROM CONTRACT_CODE
                  WHERE CONTRACT_CODE=EACH_REC.CONTRACT_CODE
                  AND BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
                  SELECT ID
                  INTO V_MAINTENANCE_CONTRACT_ID
                  FROM MAINTENANCE_CONTRACT
                  WHERE MAINTENANCE_CONTRACT=EACH_REC.MAINTENANCE_CONTRACT
                  AND BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
                  SELECT ID
                  INTO V_INDUSTRY_CODE_ID
                  FROM INDUSTRY_CODE
                  WHERE INDUSTRY_CODE=EACH_REC.INDUSTRY_CODE
                  AND BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
                  INSERT
                  INTO MARKETING_INFORMATION
                    (
                      ID,
                      VERSION,
                      D_CREATED_ON,
                      D_INTERNAL_COMMENTS,
                      D_ACTIVE,
                      D_UPDATED_ON,
                      D_LAST_UPDATED_BY,
                      D_CREATED_TIME,
                      D_UPDATED_TIME,
                      CONTRACT_CODE,
                      MAINTENANCE_CONTRACT,
                      INDUSTRY_CODE,
                      DEALER_REPRESENTATIVE,
					  CUSTOMER_REPRESENTATIVE
                    )
                    VALUES
                    (
                      V_MARK_INFO_ID,
                      1,
                      SYSDATE,
                      EACH_REC.BUSINESS_UNIT_INFO
                      || '-Upload',
                      1,
                      SYSDATE,
                      V_LAST_UPDATED_BY,
                      CURRENT_TIMESTAMP,
                      CURRENT_TIMESTAMP,
                      V_CONTRACT_CODE_ID, 
                      V_MAINTENANCE_CONTRACT_ID,
                      V_INDUSTRY_CODE_ID,
                      EACH_REC.DEALER_REPRESENTATIVE,
					  EACH_REC.CUSTOMER_REPRESENTATIVE
                    );
                END;
              END IF;
              IF EACH_REC.OEM IS NOT NULL THEN
                SELECT ID
                INTO V_OEM_ID
                FROM LIST_OF_VALUES
                WHERE TYPE             = 'OEM'
                AND DESCRIPTION        = EACH_REC.OEM
                AND BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO;
              END IF;
              V_INV_TYPE := 'RETAIL';
              SELECT ID
              INTO V_TRANS_TYPE
              FROM INVENTORY_TRANSACTION_TYPE
              WHERE TRNX_TYPE_KEY = DECODE(V_INV_TYPE, 'STOCK', 'IB','RETAIL', 'DR');
              V_INVOICE_DATE     := NULL;
              V_INVOICE_NUM      := NULL;
              SELECT MAX(transaction_order)
              INTO V_TRANSACTION_ORDER
              FROM inventory_transaction it
              WHERE it.transacted_item = V_SERIAL_ID;

              IF upper(V_PERFORM_D2D) = 'TRUE' AND V_SELLER_ID <> V_DEALER_ID AND (upper(V_ALLOW_OTR_DLRS_STK) = 'TRUE' OR V_CURR_OWNER_TYPE = 'OEM') THEN
                V_TRANSACTION_ORDER  := V_TRANSACTION_ORDER + 1;
                INSERT
                INTO INVENTORY_TRANSACTION
                  (
                    ID,
                    INVOICE_DATE,
                    INVOICE_NUMBER,
                    TRANSACTION_DATE,
                    VERSION,
                    BUYER,
                    TRANSACTED_ITEM,
                    SELLER,
                    INV_TRANSACTION_TYPE,
                    OWNER_SHIP,
                    TRANSACTION_ORDER,
                    STATUS,
                    D_CREATED_ON,
                    D_INTERNAL_COMMENTS,
                    D_ACTIVE,
                    D_UPDATED_ON,
                    D_LAST_UPDATED_BY,
                    D_CREATED_TIME,
                    D_UPDATED_TIME
                  )
                  VALUES
                  (
                    INVENTORY_TRANSACTION_SEQ.NEXTVAL,
                    V_INVOICE_DATE,
                    V_INVOICE_NUM,
                    sysdate,
                    1,
                    V_DEALER_ID,
                    V_SERIAL_ID,
                    V_SELLER_ID,
                    10,
                    V_DEALER_ID,
                    V_TRANSACTION_ORDER,
                    'ACTIVE',
                    SYSDATE,
                    EACH_REC.BUSINESS_UNIT_INFO
                    || '-Upload',
                    1,
                    SYSDATE,
                    V_LAST_UPDATED_BY,
                    CURRENT_TIMESTAMP,
                    CURRENT_TIMESTAMP
                  );
              END IF;
              V_SELLER_ID := V_DEALER_ID;
              V_BUYER_ID  := V_END_CUST_ID;
              IF upper
                (
                  V_ADMIN_APPRV_IND
                )
                = 'FALSE' THEN
                SELECT INVENTORY_TRANSACTION_SEQ.NEXTVAL INTO V_TRANS_ID FROM DUAL;
                V_TRANSACTION_ORDER := V_TRANSACTION_ORDER + 1;
                INSERT
                INTO INVENTORY_TRANSACTION
                  (
                    ID,
                    INVOICE_DATE,
                    INVOICE_NUMBER,
                    TRANSACTION_DATE,
                    VERSION,
                    BUYER,
                    TRANSACTED_ITEM,
                    SELLER,
                    INV_TRANSACTION_TYPE,
                    OWNER_SHIP,
                    TRANSACTION_ORDER,
                    STATUS,
                    D_CREATED_ON,
                    D_INTERNAL_COMMENTS,
                    D_ACTIVE,
                    D_UPDATED_ON,
                    D_LAST_UPDATED_BY,
                    D_CREATED_TIME,
                    D_UPDATED_TIME
                  )
                  VALUES
                  (
                    V_TRANS_ID,
                    V_INVOICE_DATE,
                    V_INVOICE_NUM,
                    sysdate,
                    1,
                    V_BUYER_ID,
                    V_SERIAL_ID,
                    V_SELLER_ID,
                    V_TRANS_TYPE,
                    V_SELLER_ID,
                    V_TRANSACTION_ORDER,
                    'ACTIVE',
                    SYSDATE,
                    EACH_REC.BUSINESS_UNIT_INFO
                    || '-Upload',
                    1,
                    SYSDATE,
                    V_LAST_UPDATED_BY,
                    CURRENT_TIMESTAMP,
                    CURRENT_TIMESTAMP
                  );
              END IF;
              SELECT ADDRESS INTO V_CUST_ADD_ID FROM PARTY WHERE ID = V_BUYER_ID;
              SELECT ADDRESSFORTRANS_SEQ.NEXTVAL INTO V_ADDRESS_TRANS_ID FROM DUAL;
              INSERT
              INTO ADDRESS_FOR_TRANSFER
                (SELECT V_ADDRESS_TRANS_ID,
                    ADDRESS_LINE1,
                    CITY,
                    CONTACT_PERSON_NAME,
                    COUNTRY,
                    EMAIL,
                    PHONE,
                    SECONDARY_PHONE,
                    STATE,
                    'BILLING',
                    0,
                    ZIP_CODE,
                    SYSDATE,
                    EACH_REC.BUSINESS_UNIT_INFO  || '-Upload',
                    SYSDATE,
                    V_LAST_UPDATED_BY,
                    CURRENT_TIMESTAMP,
                    CURRENT_TIMESTAMP,
                    1,
                    ADDRESS_LINE2,
                    ADDRESS_LINE3,
					COUNTY,
					SUB_COUNTY,
					FAX,
          CUSTOMER_CONTACT_TITLE
                  FROM ADDRESS
                  WHERE ID = V_CUST_ADD_ID
                );
              IF V_OPERATOR_ID IS NOT NULL THEN
                SELECT ADDRESS INTO V_OPR_ADDR_ID FROM PARTY WHERE ID = V_OPERATOR_ID;
                SELECT ADDRESSFORTRANS_SEQ.NEXTVAL INTO V_OPR_ADDR_TRANS_ID FROM DUAL;
                INSERT
                INTO ADDRESS_FOR_TRANSFER
                  (SELECT V_OPR_ADDR_TRANS_ID,
                      ADDRESS_LINE1,
                      CITY,
                      CONTACT_PERSON_NAME,
                      COUNTRY,
                      EMAIL,
                      PHONE,
                      SECONDARY_PHONE,
                      STATE,
                      'SHIPPING',
                      0,
                      ZIP_CODE,
                      SYSDATE,
                      EACH_REC.BUSINESS_UNIT_INFO
                      || '-Upload',
                      SYSDATE,
                      V_LAST_UPDATED_BY,
                      CURRENT_TIMESTAMP,
                      CURRENT_TIMESTAMP,
                      1,
                      ADDRESS_LINE2,
                      ADDRESS_LINE3,
					  COUNTY,
					  SUB_COUNTY,
					  FAX,
            CUSTOMER_CONTACT_TITLE
                    FROM ADDRESS
                    WHERE ID = V_OPR_ADDR_ID
                  );
              END IF;
              SELECT WARRANTY_TASK_INSTANCE_SEQ.NEXTVAL
              INTO V_WARANTY_TASK_INSTANCE_ID
              FROM DUAL;
              SELECT WARRANTY_MULTIDRETR_NUMBER_SEQ.NEXTVAL
              INTO V_MULTIDRETRNUMBER
              FROM DUAL;
              BEGIN
                SELECT NVL(MAX(LIST_INDEX), -1) + 1
                INTO V_MAX_LIST_INDEX
                FROM warranty
                WHERE for_item = V_SERIAL_ID;
              EXCEPTION
              WHEN NO_DATA_FOUND THEN
                V_MAX_LIST_INDEX := 0;
              END;
              SELECT WARRANTY_SEQ.NEXTVAL INTO V_WARRANTY_ID FROM DUAL;
			  IF  V_INSTALL_DEALER_ID = 0 THEN
                  V_INSTALL_DEALER_ID := NULL;
              END IF;
              INSERT
              INTO WARRANTY
                (
                  ID,
                  DELIVERY_DATE,
                  DRAFT,
                  VERSION,
                  MARKETING_INFORMATION,
                  FOR_TRANSACTION,
                  CUSTOMER,
                  FOR_ITEM,
                  LIST_INDEX,
                  STATUS,
                  FOR_DEALER,
                  ADDRESS_FOR_TRANSFER,
                  TRANSACTION_TYPE,
                  MULTIDRETRNUMBER,
                  CUSTOMER_TYPE,
                  OPERATOR,
                  INSTALLING_DEALER,
                  OEM,
                  EQUIPMENT_VIN,
                  INSTALLATION_DATE,
                  D_CREATED_ON,
                  D_INTERNAL_COMMENTS,
                  D_ACTIVE,
                  D_UPDATED_ON,
                  D_LAST_UPDATED_BY,
                  D_CREATED_TIME,
                  D_UPDATED_TIME,
                  FLEET_NUMBER,
                  FILED_BY,
                  OPERATOR_ADDRESS_FOR_TRANSFER
                )
                VALUES
                (
                  V_WARRANTY_ID,
                  TO_DATE(EACH_REC.DELIVERY_DATE,'YYYYMMDD'),
                  0,
                  1,
                  V_MARK_INFO_ID,
                  V_TRANS_ID,
                  V_BUYER_ID,
                  V_SERIAL_ID,
                  V_MAX_LIST_INDEX,
                  V_WARRANTY_STATUS,
                  V_SELLER_ID,
                  V_ADDRESS_TRANS_ID,
                  V_TRANS_TYPE,
                  V_MULTIDRETRNUMBER,
                  EACH_REC.CUSTOMER_TYPE,
                  V_OPERATOR_ID,
                  V_INSTALL_DEALER_ID,
                  V_OEM_ID,
                  EACH_REC.EQUIPMENT_VIN_ID,
                  TO_DATE(EACH_REC.DATE_OF_INSTALLATION,'YYYYMMDD'),
                  SYSDATE,
                  EACH_REC.BUSINESS_UNIT_INFO
                  || '-Upload',
                  1,
                  SYSDATE,
                  V_LAST_UPDATED_BY,
                  CURRENT_TIMESTAMP,
                  CURRENT_TIMESTAMP,
                  EACH_REC.TRUCK_NUMBER,
                  V_LAST_UPDATED_BY,
                  V_OPR_ADDR_TRANS_ID
                );
              SELECT WARRANTY_AUDIT_SEQ.NEXTVAL INTO V_WARRANTY_AUDIT_ID FROM DUAL;
              INSERT
              INTO WARRANTY_AUDIT
                (
                  ID,
                  FOR_WARRANTY,
                  STATUS,
                  LIST_INDEX,
                  VERSION,
                  D_CREATED_ON,
                  D_INTERNAL_COMMENTS,
                  D_ACTIVE,
                  D_UPDATED_ON,
                  D_LAST_UPDATED_BY,
                  D_CREATED_TIME,
                  D_UPDATED_TIME
                )
                VALUES
                (
                  V_WARRANTY_AUDIT_ID,
                  V_WARRANTY_ID,
                  V_WARRANTY_STATUS,
                  0,
                  1,
                  SYSDATE,
                  EACH_REC.BUSINESS_UNIT_INFO
                  || '-Upload',
                  1,
                  SYSDATE,
                  V_LAST_UPDATED_BY,
                  CURRENT_TIMESTAMP,
                  CURRENT_TIMESTAMP
                );
              INSERT
              INTO WARRANTY_TASK_INSTANCE
                (
                  ID,
                  ACTIVE,
                  STATUS,
                  VERSION,
                  ASSIGNED_TO,
                  WARRANTY_AUDIT,
                  MULTIDRETRNUMBER,
                  BUSINESS_UNIT_INFO,
                  D_CREATED_ON,
                  D_INTERNAL_COMMENTS,
                  D_ACTIVE,
                  D_UPDATED_ON,
                  D_LAST_UPDATED_BY,
                  D_CREATED_TIME,
                  D_UPDATED_TIME
                )
                VALUES
                (
                  V_WARANTY_TASK_INSTANCE_ID,
                  1,
                  V_WARRANTY_STATUS,
                  1,
                  V_ASSIGNED_TO,
                  V_WARRANTY_AUDIT_ID,
                  V_MULTIDRETRNUMBER,
                  EACH_REC.BUSINESS_UNIT_INFO,
                  SYSDATE,
                  EACH_REC.BUSINESS_UNIT_INFO
                  || '-Upload',
                  1,
                  SYSDATE,
                  V_LAST_UPDATED_BY,
                  CURRENT_TIMESTAMP,
                  CURRENT_TIMESTAMP
                );
              INSERT
              INTO WARRANTY_TASK_INCLUDED_ITEMS
                (
                  WARRANTY_TASK,
                  INV_ITEM
                )
                VALUES
                (
                  V_WARANTY_TASK_INSTANCE_ID,
                  V_SERIAL_ID
                );
			  IF EACH_REC.INSTALLING_DEALER_NUMBER IS NOT NULL THEN 
              SELECT DECODE(SP.CERTIFIED, 0, 'N', 1, 'Y')
              INTO V_CERT_STATUS
              FROM SERVICE_PROVIDER SP,
                BU_ORG_MAPPING BOM
              WHERE SP.SERVICE_PROVIDER_NUMBER = EACH_REC.INSTALLING_DEALER_NUMBER
              AND SP.ID                        = BOM.ORG
              AND BOM.BU                       = EACH_REC.BUSINESS_UNIT_INFO;
			  END IF;
              OPEN ALL_ELIGIBLE_POLICY_PLANS(V_PRODUCT, V_MODEL, EACH_REC.BUSINESS_UNIT_INFO, TO_DATE(EACH_REC.DELIVERY_DATE,'YYYYMMDD'), TO_NUMBER(V_HOURS_ON_SERV), V_CONDITION, V_CERT_STATUS, V_INSTALL_DEALER_ID);
              FETCH ALL_ELIGIBLE_POLICY_PLANS INTO V_CUR_RECORD;
              CLOSE ALL_ELIGIBLE_POLICY_PLANS;
              FOR EACH_PLAN IN ALL_ELIGIBLE_POLICY_PLANS(V_PRODUCT, V_MODEL, EACH_REC.BUSINESS_UNIT_INFO, TO_DATE(EACH_REC.DELIVERY_DATE,'YYYYMMDD'), TO_NUMBER(V_HOURS_ON_SERV), V_CONDITION, V_CERT_STATUS, V_INSTALL_DEALER_ID)
              LOOP
                UPLOAD_WARRANTY_COVERAGE(EACH_PLAN.ID, V_WARRANTY_ID, V_SERIAL_ID, V_SHIP_DATE, TO_DATE(EACH_REC.DELIVERY_DATE,'YYYYMMDD'), EACH_REC.BUSINESS_UNIT_INFO, V_LAST_UPDATED_BY, NULL, 0, V_IS_RED_CVG);
                IF V_IS_RED_CVG  = 'TRUE' THEN
                  V_IS_REQ_EXTN := 'TRUE';
                END IF;
              END LOOP;
              IF EACH_REC.ADDITIONAL_APPLICABLE_POLICIES IS NOT NULL THEN
                BEGIN
                  COMMON_UTILS.ParseAnySeperatorList(EACH_REC.ADDITIONAL_APPLICABLE_POLICIES,'#$#',V_POL_ARRAY ,V_POL_COUNT);
                  FOR I IN 1..V_POL_COUNT
                  LOOP
                    SELECT ID
                    INTO V_POLICY_DEFN_ID
                    FROM POLICY_DEFINITION
                    WHERE UPPER(CODE)      = UPPER(V_POL_ARRAY(I))
                    AND BUSINESS_UNIT_INFO = EACH_REC.BUSINESS_UNIT_INFO
                    AND CURRENTLY_INACTIVE = 0
                    AND TO_DATE(EACH_REC.DELIVERY_DATE,'YYYYMMDD') BETWEEN ACTIVE_FROM AND ACTIVE_TILL;
                    UPLOAD_WARRANTY_COVERAGE(V_POLICY_DEFN_ID, V_WARRANTY_ID, V_SERIAL_ID, V_SHIP_DATE, TO_DATE(EACH_REC.DELIVERY_DATE,'YYYYMMDD'), EACH_REC.BUSINESS_UNIT_INFO, V_LAST_UPDATED_BY, NULL, 0, V_IS_RED_CVG);
                    IF V_IS_RED_CVG  = 'TRUE' THEN
                      V_IS_REQ_EXTN := 'TRUE';
                    END IF;
                  END LOOP;
                END;
              END IF;
              FOR EACH_EXTND_POLICY IN ALL_EXTENDED_POLICIES(EACH_REC.BUSINESS_UNIT_INFO, V_SERIAL_ID)
              LOOP
                UPLOAD_WARRANTY_COVERAGE(EACH_EXTND_POLICY.POLICY, V_WARRANTY_ID, V_SERIAL_ID, V_SHIP_DATE, TO_DATE(EACH_REC.DELIVERY_DATE,'YYYYMMDD'), EACH_REC.BUSINESS_UNIT_INFO, V_LAST_UPDATED_BY, NULL, 0, V_IS_RED_CVG);
                IF V_IS_RED_CVG  = 'TRUE' THEN
                  V_IS_REQ_EXTN := 'TRUE';
                END IF;
              END LOOP;
              IF upper ( V_ADMIN_APPRV_IND ) = 'FALSE' THEN
                IF V_IS_REQ_EXTN             = 'TRUE' THEN
                  BEGIN
                    SELECT REQUEST_WNTY_CVG_SEQ.NEXTVAL INTO V_WNTY_EXTN_REQ_ID FROM dual;
                    INSERT
                    INTO request_wnty_cvg
                      (
                        ID,
                        INVENTORY_ITEM,
                        STATUS,
                        D_ACTIVE,
                        BUSINESS_UNIT_INFO,
                        ORDER_NUMBER,
                        D_INTERNAL_COMMENTS,
                        REQUESTED_BY,
                        UPDATED_ON_DATE
                      )
                      VALUES
                      (
                        V_WNTY_EXTN_REQ_ID,
                        V_SERIAL_ID,
                        DECODE(NVL(UPPER(EACH_REC.REQUEST_FOR_EXTENSION), 'NO'), 'YES','SUBMITTED', 'NO', 'EXTENSION_NOT_REQUESTED'),
                        1,
                        EACH_REC.BUSINESS_UNIT_INFO,
                        NULL,
                        'Uploaded',
                        V_SELLER_ID,
                        sysdate
                      );
                    INSERT
                    INTO request_wnty_cvg_audit
                      (
                        ID,
                        REQUEST_WNTY_CVG,
                        COMMENTS,
                        STATUS,
                        ASSIGNED_TO,
                        ASSIGNED_BY,
                        D_CREATED_ON,
                        D_UPDATED_ON,
                        D_CREATED_TIME,
                        D_UPDATED_TIME,
                        D_INTERNAL_COMMENTS,
                        D_LAST_UPDATED_BY,
                        D_ACTIVE
                      )
                      VALUES
                      (
                        REQUEST_WNTY_CVG_AUDIT_SEQ.nextval,
                        V_WNTY_EXTN_REQ_ID,
                        'INITIAL',
                        'WAITING_FOR_YOUR_RESPONSE',
                        V_LAST_UPDATED_BY,
                        NULL,
                        sysdate,
                        sysdate,
                        CURRENT_TIMESTAMP,
                        CURRENT_TIMESTAMP,
                        'Uploaded',
                        V_LAST_UPDATED_BY,
                        1
                      );
                    INSERT
                    INTO request_wnty_cvg_audit
                      (
                        ID,
                        REQUEST_WNTY_CVG,
                        COMMENTS,
                        STATUS,
                        ASSIGNED_TO,
                        ASSIGNED_BY,
                        D_CREATED_ON,
                        D_UPDATED_ON,
                        D_CREATED_TIME,
                        D_UPDATED_TIME,
                        D_INTERNAL_COMMENTS,
                        D_LAST_UPDATED_BY,
                        D_ACTIVE
                      )
                      VALUES
                      (
                        REQUEST_WNTY_CVG_AUDIT_SEQ.nextval,
                        V_WNTY_EXTN_REQ_ID,
                        'Uploaded',
                        DECODE(NVL(UPPER(EACH_REC.REQUEST_FOR_EXTENSION), 'NO'), 'YES','SUBMITTED', 'NO', 'EXTENSION_NOT_REQUESTED'),
                        NULL,
                        V_LAST_UPDATED_BY,
                        sysdate,
                        sysdate,
                        CURRENT_TIMESTAMP,
                        CURRENT_TIMESTAMP,
                        'Uploaded',
                        V_LAST_UPDATED_BY,
                        1
                      );
                  END;
                END IF;
                UPDATE INVENTORY_ITEM
                SET DELIVERY_DATE   = TO_DATE(EACH_REC.DELIVERY_DATE,'YYYYMMDD'),
                  CURRENT_OWNER     = V_SELLER_ID,
                  TYPE              = 'RETAIL',
                  VIN_NUMBER        = EACH_REC.EQUIPMENT_VIN_ID,
                  OEM               = V_OEM_ID,
                  INSTALLATION_DATE = TO_DATE(EACH_REC.DATE_OF_INSTALLATION,'YYYYMMDD'),
                  FLEET_NUMBER      = EACH_REC.TRUCK_NUMBER,
                  PENDING_WARRANTY  = 0,
                  REGISTRATION_DATE = sysdate,
                  LATEST_BUYER      = V_BUYER_ID,
                  INSTALLING_DEALER = V_INSTALL_DEALER_ID,
                  OPERATOR          = V_OPERATOR_ID,
                  HOURS_ON_MACHINE  = V_HOURS_ON_SERV,
                  WNTY_START_DATE   = TO_DATE(EACH_REC.DELIVERY_DATE,'YYYYMMDD'),
                  WNTY_END_DATE     =
                  (SELECT MAX(PA.TILL_DATE)
                  FROM POLICY_AUDIT PA,
                    POLICY P
                  WHERE P.WARRANTY = V_WARRANTY_ID
                  AND P.ID         = PA.FOR_POLICY
                  ),
                  D_INTERNAL_COMMENTS = D_INTERNAL_COMMENTS
                  || '-Upload',
                  D_UPDATED_ON      = sysdate,
                  D_LAST_UPDATED_BY = V_LAST_UPDATED_BY ,
                  D_UPDATED_TIME    = sysdate,
                  version           = version + 1
                WHERE ID            = V_SERIAL_ID;
              ELSE
                UPDATE INVENTORY_ITEM
                SET PENDING_WARRANTY  = 1,
                DELIVERY_DATE   = TO_DATE(EACH_REC.DELIVERY_DATE,'YYYYMMDD'),
                LATEST_WARRANTY = V_WARRANTY_ID,
                WNTY_START_DATE   = TO_DATE(EACH_REC.DELIVERY_DATE,'YYYYMMDD'),
                WNTY_END_DATE     = TO_DATE(EACH_REC.DELIVERY_DATE,'YYYYMMDD'),
                HOURS_ON_MACHINE  = V_HOURS_ON_SERV,
                  D_INTERNAL_COMMENTS = D_INTERNAL_COMMENTS
                  || '-Upload',
                  D_UPDATED_ON      = sysdate,
                  D_LAST_UPDATED_BY = V_LAST_UPDATED_BY,
                  D_UPDATED_TIME    = sysdate,
                  version           = version + 1
                WHERE ID            = V_SERIAL_ID;
              END IF ;
              UPDATE STG_WARRANTY_REGISTRATIONS
              SET UPLOAD_STATUS = 'Y',
                UPLOAD_ERROR    = NULL,
                UPLOAD_DATE     = SYSDATE
              WHERE ID          = EACH_REC.ID;
              COMMIT;

            END IF;
          EXCEPTION
          WHEN OTHERS THEN
            ROLLBACK;
            V_UPLOAD_ERROR := SUBSTR(SQLERRM, 1, 3500);
            UPDATE STG_WARRANTY_REGISTRATIONS
            SET UPLOAD_STATUS = 'N',
              UPLOAD_ERROR    = V_UPLOAD_ERROR,
              UPLOAD_DATE     = SYSDATE
            WHERE ID          = EACH_REC.ID;
            COMMIT;
            END;
        END IF;
      END;
    END LOOP;
  END UPLOAD_WARRANTY_REG_UPLOAD;
 INFO 22-May-14 14:38:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:38:02 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:38:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





CREATE SEQUENCE EMEA_CLAIM_NUMBER_SEQ
  MINVALUE 0
  MAXVALUE 9999999999999999999999999999
  INCREMENT BY 1
  NOCYCLE
  NOORDER
  NOCACHE

 INFO 22-May-14 14:38:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:38:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

CREATE SEQUENCE AMER_CLAIM_NUMBER_SEQ
  MINVALUE 0
  MAXVALUE 9999999999999999999999999999
  INCREMENT BY 1
  NOCYCLE
  NOORDER
  NOCACHE

 INFO 22-May-14 14:38:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:38:02 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:38:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





update claim_number_pattern set sequence_name = 'AMER_CLAIM_NUMBER_SEQ' where business_unit_info = 'AMER'

 INFO 22-May-14 14:38:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:38:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 14:38:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:38:03 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:38:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





alter table warranty add pdi_Generated Number(1,0)

 INFO 22-May-14 14:38:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:38:03 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:38:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

ALTER TABLE TECHNICIAN
ADD
(
ORG_USER NUMBER
)

 INFO 22-May-14 14:38:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:38:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

ALTER TABLE TECHNICIAN
ADD CONSTRAINT ORG_USER_FK FOREIGN KEY (ORG_USER) REFERENCES ORG_USER (ID)

 INFO 22-May-14 14:38:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:38:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

CREATE SEQUENCE TECHNICIAN_SEQ
START WITH     1000
INCREMENT BY   20
NOCACHE
NOCYCLE

 INFO 22-May-14 14:38:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:38:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table technician drop constraint TECHNICIAN_ID_FK

 INFO 22-May-14 14:38:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:38:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 14:38:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:38:04 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:38:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 






create table bu_item_mapping (ITEM NUMBER(19,0) not null, BU VARCHAR2(255 CHAR) not null)

ERROR 22-May-14 14:38:04 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00955: name is already used by an existing object

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00955: name is already used by an existing object

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00955: name is already used by an existing object

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-May-14 14:38:04 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-May-14 14:38:04 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-May-14 14:42:12 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:42:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 












ERROR 22-May-14 14:42:12 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00900: invalid SQL statement

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00900: invalid SQL statement

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00900: invalid SQL statement

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-May-14 14:42:12 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-May-14 14:42:12 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-May-14 14:45:25 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:45:25 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:45:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 






Declare
cursor c1 is
	select id from item;
begin
	for c1_rec in c1
	  loop
		begin
			insert into bu_item_mapping values(c1_rec.id,'EMEA');
			insert into bu_item_mapping values(c1_rec.id,'AMER');
		END;
		COMMIT;
	END LOOP;
END;
 INFO 22-May-14 14:55:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:38 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:55:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 


insert into mst_admin_action(id,action,description) values((select max(id) + 1 from MST_ADMIN_ACTION),'view','View')

 INFO 22-May-14 14:55:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 14:55:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:38 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:55:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




update config_param set display_name = 'Is Miscellaneous Parts Section is visible?' where name = 'isMiscPartsSectionVisible'

 INFO 22-May-14 14:55:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

COMMIT

 INFO 22-May-14 14:55:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:38 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:55:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 


DELETE
FROM currency_conversion_factor
WHERE rowid IN
  (SELECT MAX(ccf.rowid)
  FROM currency_conversion_factor ccf,
    currency_exchange_rate cxr
  WHERE ccf.parent = cxr.id
  GROUP BY ccf.from_date,
    ccf.till_date,
    ccf.factor,
    cxr.from_currency,
    cxr.to_currency
  HAVING COUNT(1) > 1
  )

 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




alter  table
individual_Line_Item
add
(	  
dealer_netprice_updated NUMBER(1)   
)

 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

update individual_Line_Item set dealer_netprice_updated=0 where dealer_netprice_updated is null

 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





alter table contract add (SHIPPING_INSTRUCTION varchar2(2000))

 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





alter table individual_Line_Item
add
(
brand_item number(19),
service_procedure_definition number(19),
NON_OEM_PART_REPLACED number(19),
 FOREIGN KEY  (brand_item) REFERENCES brand_item(ID),
  FOREIGN KEY  (service_procedure_definition) REFERENCES service_procedure_definition(ID),
   FOREIGN KEY  (NON_OEM_PART_REPLACED) REFERENCES NON_OEM_PART_REPLACED(ID)
)

 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:55:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

CREATE OR REPLACE FORCE VIEW "VENDOR_RECOVERY_EXTRACT" ("BUSINESS_UNIT_INFO", "ID", "CLAIM_NUMBER", "CLAIM_TYPE", "RECOVERY_CLAIM_STATE", "REC_CLAIM_CREATED_DATE", "REC_CLAIM_UPDATED_DATE", "REC_CLAIM_UPDATED_BY", "REC_CLAIM_MODIFIED_DATE", "FAILURE_DATE", "REPAIR_DATE", "DEALER_NUMBER", "DEALER_NAME", "CAUSAL_PART_NUMBER", "REPLACED_PART_NUMBER", "SUPPLIER_NUMBER", "SUPPLIER_NAME", "SERIAL_NUMBER", "MODEL_DESC", "BUILD_DATE", "INVOICE_DATE", "DELIVERY_DATE", "JOB_CODE", "HOURS_IN_SERVICE", "FAULT_FOUND", "CAUSED_BY", "DEALER_COMMENTS", "PROCESSOR_COMMENTS", "MATERIAL_COST_TOTAL", "NON_TK_PARTS_TOTAL", "MATERIAL_PARTS_TOTAL", "TOTAL_LABOR_HOURS", "LABOR_COST_TOTAL", "MISC_COST_TOTAL", "TOTAL_ACTUAL_AMT", "TOTAL_CONTRACT_AMT","ACTUAL_VALUE_ACCEPTED_AMOUNT", "TOTAL_WARRANTY_AMT", "DEALER_CURRENCY","SUPPLIER_CURRENCY", "CREDIT_MEMO_DATE", "CREDIT_MEMO_NUMBER", "RECOVERY_COMMENTS", "CONTRACT_NAME", "REC_CLAIM_ACCEPTANCE_REASON", "REC_CLAIM_REJECTION_REASON")
AS
  SELECT r.BUSINESS_UNIT_INFO BUSINESS_UNIT_INFO,
    r.id AS id,
    c.claim_number,
    c.type claim_type,
    r.RECOVERY_CLAIM_STATE,
    r.d_created_on rec_claim_created_date,
    r.d_updated_on rec_claim_updated_date,
    (SELECT login FROM org_user WHERE id=r.d_last_updated_by
    ) rec_claim_updated_by,
    r.updated_date rec_claim_modified_date,
    claimAudit.failure_date,
    claimAudit.repair_date,
    (SELECT service_provider_number
    FROM service_provider
    WHERE id = c.for_dealer
    ) dealer_number,
    (SELECT name FROM party WHERE id = c.for_dealer
    ) dealer_name,
    (SELECT item_number FROM item WHERE id = s.CAUSAL_PART
    ) causal_part_number,
    GET_REPLACED_PARTS(s.service_detail) replaced_part_number,
    (SELECT supplier_number
    FROM supplier
    WHERE id =
      (SELECT supplier FROM contract WHERE id = r.CONTRACT
      )
    ) supplier_number,
    (SELECT name
    FROM party
    WHERE id =
      (SELECT supplier FROM contract WHERE id = r.CONTRACT
      )
    ) supplier_name,
    GET_SERIAL_NUMBER(c.id) AS serial_number,
    GET_MODEL_DESC(c.id)    AS model_desc,
    (SELECT MIN(BUILT_ON)
    FROM INVENTORY_ITEM
    WHERE ID IN
      (SELECT ITEM_REF_INV_ITEM FROM CLAIMED_ITEM WHERE CLAIM = c.id
      )
    ) AS build_date,
    (SELECT MIN(INVOICE_DATE)
    FROM INVENTORY_TRANSACTION
    WHERE TRANSACTED_ITEM IN
      (SELECT ITEM_REF_INV_ITEM FROM CLAIMED_ITEM WHERE CLAIM = c.id
      )
    AND INV_TRANSACTION_TYPE = 1
    ) AS invoice_date,
    (SELECT MIN(delivery_date)
    FROM INVENTORY_ITEM
    WHERE ID IN
      (SELECT ITEM_REF_INV_ITEM FROM CLAIMED_ITEM WHERE CLAIM = c.id
      )
    ) AS delivery_date,
    GET_JOB_CODE_DESC(c.id) job_code,
    (SELECT SUM(hours_in_service) FROM claimed_item WHERE claim = c.id
    ) hours_in_service,
    (SELECT name FROM failure_type_definition WHERE id = s.FAULT_FOUND
    ) fault_found,
    (SELECT name FROM failure_cause_definition WHERE id = s.CAUSED_BY
    ) caused_by,
    to_clob(NVL(c.condition_found,''))
    ||to_clob(' ## ')
    ||to_clob(NVL(claimAudit.work_performed,''))
    ||to_clob(' ## ')
    ||to_clob(NVL(claimAudit.other_comments,'')) dealer_comments,
    (SELECT internal_comments
    FROM claim_audit
    WHERE id=
      (SELECT MAX(id)
      FROM claim_audit
      WHERE for_claim   =c.id
      AND previous_state='ACCEPTED'
      )
    ) processor_comments,
    (SELECT li.recovered_cost_amt
    FROM cost_line_item li,
      rec_clm_cost_line_items rli,
      section s
    WHERE li.id           =rli.cost_line_items
    AND rli.recovery_claim=r.id
    AND li.section        =s.id
    AND s.name            ='Oem Parts'
    ) AS MATERIAL_COST_TOTAL,
    (SELECT li.recovered_cost_amt
    FROM cost_line_item li,
      rec_clm_cost_line_items rli,
      section s
    WHERE li.id           =rli.cost_line_items
    AND rli.recovery_claim=r.id
    AND li.section        =s.id
    AND s.name            ='Non Oem Parts'
    ) AS NON_TK_PARTS_TOTAL,
    (SELECT li.recovered_cost_amt
    FROM cost_line_item li,
      rec_clm_cost_line_items rli,
      section s
    WHERE li.id           =rli.cost_line_items
    AND rli.recovery_claim=r.id
    AND li.section        =s.id
    AND s.name            ='Miscellaneous Parts'
    )                           AS MATERIAL_PARTS_TOTAL,
    GET_TOTAL_LABOR_HOURS(c.id) AS total_labor_hours,
    (SELECT li.recovered_cost_amt
    FROM cost_line_item li,
      rec_clm_cost_line_items rli,
      section s
    WHERE li.id           =rli.cost_line_items
    AND rli.recovery_claim=r.id
    AND li.section        =s.id
    AND s.name            ='Labor'
    ) AS LABOR_COST_TOTAL,
    (SELECT SUM(li.recovered_cost_amt)
    FROM cost_line_item li,
      rec_clm_cost_line_items rli,
      section s
    WHERE li.id           =rli.cost_line_items
    AND rli.recovery_claim=r.id
    AND li.section        =s.id
    AND s.name NOT       IN ('Oem Parts','Non Oem Parts','Labor','Miscellaneous Parts')
    ) AS MISC_COST_TOTAL,
    (SELECT SUM(li.recovered_cost_amt)
    FROM cost_line_item li,
      rec_clm_cost_line_items rli,
      section s
    WHERE li.id           =rli.cost_line_items
    AND rli.recovery_claim=r.id
    AND li.section        =s.id
    AND s.name           != 'Claim Amount'
    ) AS TOTAL_ACTUAL_AMT,
    (SELECT SUM(li.contract_cost_amt)
    FROM cost_line_item li,
      rec_clm_cost_line_items rli,
      section s
    WHERE li.id           =rli.cost_line_items
    AND rli.recovery_claim=r.id
    AND li.section        =s.id
    AND s.name           != 'Claim Amount'
    ) AS TOTAL_CONTRACT_AMT,
	(SELECT rca.accepted_cost_amt
    FROM rec_claim_audit rca
    WHERE rca.for_recovery_claim=r.id
    AND rca.id =
    (SELECT id
      FROM rec_claim_audit
      WHERE for_recovery_claim=r.id
      AND list_index         IN
        (SELECT MAX(list_index)
        FROM rec_claim_audit
        WHERE for_recovery_claim=r.id
        AND recovery_claim_state='DEBITTED_AND_CLOSED'
        )
      )
    ) AS ACTUAL_VALUE_ACCEPTED_AMOUNT,
    (SELECT SUM(li.cost_amt)
    FROM cost_line_item li,
      rec_clm_cost_line_items rli,
      section s
    WHERE li.id           =rli.cost_line_items
    AND rli.recovery_claim=r.id
    AND li.section        =s.id
    AND s.name           != 'Claim Amount'
    ) AS TOTAL_WARRANTY_AMT,
	(SELECT preferred_currency
    FROM organization
    WHERE id = c.for_dealer
    ) AS DEALER_CURRENCY,
    (SELECT preferred_currency
    FROM organization
    WHERE id =
      (SELECT supplier FROM contract WHERE id = r.CONTRACT
      )
    ) AS supplier_currency,
    (SELECT m.credit_memo_date
    FROM recovery_payment p,
      credit_memo m
    WHERE p.for_recovery_claim=r.id
    AND p.active_credit_memo  =m.id
    ) credit_memo_date,
    (SELECT m.credit_memo_number
    FROM recovery_payment p,
      credit_memo m
    WHERE p.for_recovery_claim=r.id
    AND p.active_credit_memo  =m.id
    ) credit_memo_number,
    (SELECT comments
    FROM rec_claim_audit
    WHERE for_recovery_claim=r.id
    AND list_index          =
      (SELECT MAX(list_index) FROM rec_claim_audit WHERE for_recovery_claim=r.id
      )
    ) recovery_comments,
    (SELECT name FROM contract WHERE id=r.contract
    ) contract_name,
    (SELECT t.description
    FROM list_of_values lov,
      i18nlov_text t
    WHERE lov.id=r.rec_clm_accpt_reason
    AND lov.id  =t.list_of_i18n_values
    AND t.locale='en_US'
    AND UPPER(r.recovery_claim_state) LIKE '%CLOSED%'
    AND r.recovery_claim_state != 'CLOSED_UNRECOVERED'
    ) rec_claim_acceptance_reason,
    (SELECT t.description
    FROM list_of_values lov,
      i18nlov_text t
    WHERE lov.id=r.rec_clm_reject_reason
    AND lov.id  =t.list_of_i18n_values
    AND t.locale='en_US'
    AND UPPER(r.recovery_claim_state) LIKE '%CLOSED%'
    AND r.recovery_claim_state != 'CLOSED_UNRECOVERED'
    ) rec_claim_rejection_reason
  FROM claim c,
    claim_audit claimAudit,
    recovery_claim r,
    service_information s
  WHERE c.id                         = r.claim
  AND c.active_claim_audit           =claimAudit.id
  AND claimAudit.service_information = s.id

 INFO 22-May-14 14:55:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:42 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:55:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





create or replace FUNCTION  "GET_REPLACED_PARTS" (p_service NUMBER) RETURN VARCHAR2 IS

V_RETURN_STR	VARCHAR2(1000);

cursor all_parts (p_service_id number) is   
   select i.item_number
    from huss_parts_replaced_installed sopr,oem_part_replaced opr,item i
    where sopr.service_detail = p_service_id and sopr.id = opr.oem_replaced_parts
        and opr.item_ref_item = i.id ;

BEGIN
    V_RETURN_STR := null;

    for rec in all_parts (p_service) loop
        if v_return_str is null then
            v_return_str := rec.item_number ; 
        else 
            v_return_str := v_return_str || ', ' || rec.item_number;
        end if ;
    END LOOP; 

RETURN V_RETURN_STR;

END;
 INFO 22-May-14 14:55:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:42 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:55:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





DECLARE
    CURSOR accepted_amount is
   SELECT sum(cli.recovered_cost_amt) as SUM_ACCEPTED_AMT,rca.id,r.recovery_claim_number
    from rec_claim_audit rca , recovery_claim r, cost_line_item cli , rec_clm_cost_line_items rcc  
   where rca.for_recovery_claim=r.id and  rca.recovery_claim_state='DEBITTED_AND_CLOSED'
   and rca.accepted_cost_amt is null
   and rcc.recovery_claim=r.id and cli.id in (rcc.cost_line_items) and r.active_recovery_claim_audit=rca.id
   group by rca.id,r.recovery_claim_number;
BEGIN
     FOR i IN accepted_amount
  LOOP
      UPDATE rec_claim_audit  SET  accepted_cost_amt=i.SUM_ACCEPTED_AMT WHERE id=i.id;

  END LOOP;

END;
 INFO 22-May-14 14:55:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:43 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:55:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 






ALTER TABLE CREDIT_MEMO ADD ("CREDIT_AMOUNT_AMT" NUMBER(19,2))

 INFO 22-May-14 14:55:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

ALTER TABLE CREDIT_MEMO ADD ("CREDIT_AMOUNT_CURR" VARCHAR2(255 CHAR))

 INFO 22-May-14 14:55:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:43 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:55:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





update maintenance_contract set maintenance_contract='NA' where business_unit_info='AMER' AND maintenance_contract='Full Service Contract'

 INFO 22-May-14 14:55:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

update i18nmaintenance_contract_text set maintenance_contract='NA' where maintenance_contract='Full Service Contract'

 INFO 22-May-14 14:55:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

COMMIT

 INFO 22-May-14 14:55:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 14:55:43 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 14:55:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





alter table travel_detail
add
   (
   BASE_DISTANCE  NUMBER(19,2),
   BASE_HOURS NUMBER(19,2)
   )
 /
ERROR 22-May-14 14:55:43 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01735: invalid ALTER TABLE option

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01735: invalid ALTER TABLE option

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-01735: invalid ALTER TABLE option

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-May-14 14:55:43 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-May-14 14:55:43 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-May-14 15:15:37 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 15:15:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





alter table travel_detail
add
   (
   BASE_DISTANCE  NUMBER(19,2),
   BASE_HOURS NUMBER(19,2)
   )
 /
ERROR 22-May-14 15:15:37 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01735: invalid ALTER TABLE option

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01735: invalid ALTER TABLE option

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-01735: invalid ALTER TABLE option

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-May-14 15:15:37 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-May-14 15:15:37 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-May-14 15:18:01 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 15:18:01 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 15:18:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





alter table 
	 Line_Item_group
   add
     (     
      SC_TOTAL_CREDIT_CURR  VARCHAR2(255 CHAR),   
      SC_TOTAL_CREDIT_AMT  NUMBER(19,2),       
      MODIFIER_TOTAL_CREDIT_CURR  VARCHAR2(255 CHAR),   
      MODIFIER_TOTAL_CREDIT_AMT  NUMBER(19,2),
      NET_PRICE_TOTAL_CREDIT_CURR  VARCHAR2(255 CHAR),   
      NET_PRICE_TOTAL_CREDIT_AMT  NUMBER(19,2),
      modifier_accepted_amt  NUMBER(19,2),
      modifier_accepted_curr VARCHAR2(255 CHAR)
     )

 INFO 22-May-14 15:18:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:18:01 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 15:18:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




insert into upload_error (id,code,upload_field) values(upload_error_seq.nextval,'RC019','PART RETURN REQUEST')

 INFO 22-May-14 15:18:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:18:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into I18NUPLOAD_ERROR_TEXT (ID,LOCALE,DESCRIPTION,UPLOAD_ERROR) values(I18N_UPLOAD_ERROR_SEQ.nextval,'en_US','Part Return Request cannot be set to YES for the decision Reject',(select id from upload_error where code='RC019'))

 INFO 22-May-14 15:18:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:18:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

insert into upload_mgt_upload_errors(upload_mgt,upload_errors) values(9,(select id from upload_error where code='RC019'))

 INFO 22-May-14 15:18:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:18:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 15:18:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:18:01 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 15:18:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

create or replace 
PROCEDURE   SUPPLIER_DECISION_VALIDATION AS

CURSOR all_rec IS
    SELECT * FROM stg_supplier_decision
    WHERE NVL(error_status,'N') = 'N'
        AND upload_status IS NULL
    ORDER BY id;

v_error_code VARCHAR2(4000) := NULL;
v_loop_count NUMBER := 0;
v_error VARCHAR2(4000) := NULL;
v_file_upload_mgt_id NUMBER := 0;
v_success_count NUMBER := 0;
v_error_count NUMBER := 0;
v_recovery_claim_id NUMBER := 0;
v_rec_claim_state VARCHAR2(255);
v_contract VARCHAR2(255);
v_reason_id NUMBER;
v_return_loc NUMBER;
v_valid VARCHAR2(10);
v_user_locale  VARCHAR2(10);
v_countDuplicate NUMBER;
v_maxNoOfDisputes NUMBER := 0;
v_noOfTimesClaimsDisputed NUMBER;
V_BUSINESS_UNIT VARCHAR(255) := NULL;

BEGIN

    BEGIN 
       SELECT file_upload_mgt_id  INTO v_file_upload_mgt_id 
       FROM stg_supplier_decision WHERE ROWNUM = 1;

       SELECT  o.locale, f.BUSINESS_UNIT_INFO 
		INTO  v_user_locale, V_BUSINESS_UNIT
       FROM file_upload_mgt f,org_user o 
       WHERE f.id=v_file_upload_mgt_id 
       AND o.id=f.uploaded_by ;

        SELECT VAL.VALUE into v_maxNoOfDisputes 
		FROM CONFIG_PARAM PARAM,CONFIG_VALUE VAL
		WHERE VAL.CONFIG_PARAM = PARAM.ID 
		AND PARAM.NAME  = 'maximumDisputeAllowed' 
		AND VAL.BUSINESS_UNIT_INFO = V_BUSINESS_UNIT
		AND VAL.ACTIVE = 1;

  FOR each_rec IN all_rec LOOP


      v_error_code:=NULL;
      v_recovery_claim_id := NULL;
      v_rec_claim_state := NULL;
      v_contract := NULL;
      v_reason_id := NULL;
      v_return_loc := NULL;
      v_valid :='N';
      v_countDuplicate :=0;
      v_noOfTimesClaimsDisputed :=0;

      IF each_rec.recovery_claim_number IS NULL THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC001');
      END IF;  
      IF each_rec.decision IS NULL THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC002');
      END IF;
      IF each_rec.decision_reason IS NULL AND ((trim(lower(each_rec.decision))= 'accept') OR (trim(lower(each_rec.decision))= 'reject')) THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC003');
      END IF;
      IF each_rec.supplier_comments IS NULL THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC004');
      END IF;
       IF each_rec.supplier_contract_code IS NULL THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC013');
      END IF;
      IF(trim(lower(each_rec.decision))= 'part return request') AND (each_rec.part_return_request is NULL OR (trim(lower(each_rec.part_return_request))!='yes')) THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC014');
      END IF;
       IF each_rec.part_return_request IS NOT NULL AND (trim(lower(each_rec.part_return_request))='yes') AND each_rec.return_location_code is NULL THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC015');
      END IF;
	  IF each_rec.decision IS NOT NULL AND (trim(lower(each_rec.decision))= 'reject') AND (trim(lower(each_rec.part_return_request))='yes') THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC019');
      END IF;

      BEGIN 
          SELECT claim.id,claim.recovery_claim_state  into v_recovery_claim_id,v_rec_claim_state
          FROM  recovery_claim claim 
          WHERE claim.recovery_claim_number=each_rec.recovery_claim_number;

          BEGIN
              IF (v_rec_claim_state = 'IN_RECOVERY') 
                THEN v_valid :='Y';
              END IF;
          END;
           IF (v_valid = 'N') THEN
                    v_error_code := common_utils.addErrorMessage(v_error_code, 'RC008');
         END IF;
			SELECT rc.contract into v_contract 
			FROM recovery_claim rc,contract cntrct
			WHERE rc.recovery_claim_number=each_rec.recovery_claim_number AND rc.contract = cntrct.id;

			IF (v_contract != each_rec.supplier_contract_code) THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'RC017');
			END IF;

       IF each_rec.return_location_code IS NOT NULL THEN 
          BEGIN
          SELECT count(1) into v_return_loc
          FROM supplier_locations loc,location l 
          WHERE loc.supplier in (SELECT c.supplier from contract c where c.id=each_rec.supplier_contract_code) and l.id=loc.locations
          and l.code=each_rec.return_location_code;

           IF v_return_loc=0 then           
                 v_error_code := common_utils.addErrorMessage(v_error_code, 'RC018');
           END IF;      
          END;
          END IF;

         SELECT count(*) INTO v_countDuplicate 
         FROM stg_supplier_decision 
         WHERE recovery_claim_number = each_rec.recovery_claim_number;

         IF (v_countDuplicate >1 ) THEN
            v_error_code := common_utils.addErrorMessage(v_error_code, 'RC011');
         END IF;  

        EXCEPTION WHEN NO_DATA_FOUND THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'RC005');
      END ;


     IF(trim(lower(each_rec.decision))= 'accept')
        THEN 
            BEGIN 
                  SELECT text.id INTO v_reason_id from  i18nlov_text text , list_of_values lov 
                  WHERE lov.type = 'RECOVERYCLAIMACCEPTANCEREASON' 
				  AND trim(lower(lov.state)) = 'active'
                  AND lov.id=text.list_of_i18n_values 
                  AND trim(lower(text.locale)) =trim(lower(v_user_locale))
                  AND trim(lower(text.description)) = trim(lower(each_rec.decision_reason))
				  AND LOV.BUSINESS_UNIT_INFO = V_BUSINESS_UNIT;
               EXCEPTION WHEN NO_DATA_FOUND THEN
                 v_error_code := common_utils.addErrorMessage(v_error_code, 'RC007');
           END;
		   BEGIN
           IF each_rec.claim_amount_being_accepted IS NOT NULL AND each_rec.claim_amount_being_accepted=0 THEN
           v_error_code := common_utils.addErrorMessage(v_error_code, 'RC016');
           END IF;
           END;
      ELSIF(trim(lower(each_rec.decision))= 'reject')
      THEN 
         BEGIN 
                  SELECT count (*) INTO v_noOfTimesClaimsDisputed 
                  FROM REC_CLAIM_AUDIT audit1,RECOVERY_CLAIM claim 
                  WHERE audit1.FOR_RECOVERY_CLAIM = claim.ID
                  AND lower(audit1.RECOVERY_CLAIM_STATE) = 'rejected' 
                  AND claim.ID =  v_recovery_claim_id;


              IF(v_noOfTimesClaimsDisputed >=v_maxNoOfDisputes )
                THEN
                  v_error_code := common_utils.addErrorMessage(v_error_code, 'RC012');
              ELSE 
                   BEGIN 
                         SELECT text.id INTO v_reason_id from  i18nlov_text text , list_of_values lov 
                          WHERE lov.type = 'RECOVERYCLAIMREJECTIONREASON' 
						  AND trim(lower(lov.state)) = 'active' 
                          AND lov.id=text.list_of_i18n_values 
                          AND trim(lower(text.locale)) =trim(lower(v_user_locale))
                          AND trim(lower(text.description)) =trim(lower(each_rec.decision_reason))
						  AND LOV.BUSINESS_UNIT_INFO = V_BUSINESS_UNIT;
                           EXCEPTION WHEN NO_DATA_FOUND THEN
                           v_error_code := common_utils.addErrorMessage(v_error_code, 'RC009');
                    END;
              END IF;
          END;
      ELSIF(trim(lower(each_rec.decision))!= 'part return request')
      THEN
        BEGIN 
           v_error_code := common_utils.addErrorMessage(v_error_code, 'RC006');
        END;
      END IF;

     IF v_error_code IS NULL THEN
       BEGIN
            UPDATE stg_supplier_decision SET
                 error_status='Y'
              WHERE id = each_rec.id;
              v_success_count:=v_success_count+1;

       END;
          ELSE
          BEGIN
               UPDATE stg_supplier_decision
               SET error_code=v_error_code, 
                  error_status = 'N' 
                  WHERE id = each_rec.id;
                 v_error_count:=v_error_count+1;

          END;
      END IF;

      v_loop_count := v_loop_count + 1;
  END LOOP;

  BEGIN 
       UPDATE file_upload_mgt SET 
            success_records= v_success_count, 
            error_records= v_error_count,
            total_records = v_loop_count
        WHERE id = v_file_upload_mgt_id;
  END;

   EXCEPTION WHEN OTHERS THEN 
   v_error_code:='INVALID DATA';
    END;
COMMIT;
END;
 INFO 22-May-14 15:18:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:18:02 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 15:18:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

Insert into mst_admin_action (ID,ACTION,DESCRIPTION) values (1,'view','View')

ERROR 22-May-14 15:18:02 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00001: unique constraint (NMHG_QA_P2.MST_ADMIN_ACTION_PK) violated

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00001: unique constraint (NMHG_QA_P2.MST_ADMIN_ACTION_PK) violated

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00001: unique constraint (NMHG_QA_P2.MST_ADMIN_ACTION_PK) violated

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-May-14 15:18:02 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-May-14 15:18:02 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-May-14 15:21:44 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 15:21:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

Insert into mst_admin_action (ID,ACTION,DESCRIPTION) values (1,'view','View')

ERROR 22-May-14 15:21:44 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00001: unique constraint (NMHG_QA_P2.MST_ADMIN_ACTION_PK) violated

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00001: unique constraint (NMHG_QA_P2.MST_ADMIN_ACTION_PK) violated

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00001: unique constraint (NMHG_QA_P2.MST_ADMIN_ACTION_PK) violated

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-May-14 15:21:44 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-May-14 15:21:44 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-May-14 15:22:39 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 15:22:39 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 











INSERT INTO MST_ADMIN_FNC_AREA VALUES (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimTab', 'claim Tab')

 INFO 22-May-14 15:22:39 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:22:39 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES (MST_ADMIN_FNC_AREA_SEQ.nextval, 'manageBusinessConfigurations', 'Manage Business Configurations')

 INFO 22-May-14 15:22:39 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:22:39 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 15:22:39 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:22:39 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 15:22:39 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





CREATE INDEX INDIVIDUAL_LINE_ITEM_LIG_IDX ON individual_line_item (line_item_group)

 INFO 22-May-14 15:22:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:22:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

CREATE INDEX INVENTORY_ITEM_SHIPMENT_IDX ON INVENTORY_ITEM(SHIPMENT_DATE)

 INFO 22-May-14 15:23:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:23:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

CREATE INDEX ADDRESS_BOOK_IDX1 ON address_book (belongs_to)

 INFO 22-May-14 15:23:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:23:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

Create Index BU_ITEM_MAPPING_ITEM_IDX on BU_ITEM_MAPPING (Item)

ERROR 22-May-14 15:23:11 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01408: such column list already indexed

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01408: such column list already indexed

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-01408: such column list already indexed

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-May-14 15:23:11 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-May-14 15:23:11 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-May-14 15:27:25 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 15:27:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 













ERROR 22-May-14 15:27:25 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00900: invalid SQL statement

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00900: invalid SQL statement

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00900: invalid SQL statement

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-May-14 15:27:25 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-May-14 15:27:25 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-May-14 15:28:13 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 15:28:13 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 15:28:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




Insert into ADDITIONAL_LABOR_ELIGIBILITY (
ID,BUSINESS_UNIT_INFO,D_CREATED_ON,D_INTERNAL_COMMENTS,D_UPDATED_ON,D_LAST_UPDATED_BY,D_CREATED_TIME,D_UPDATED_TIME,D_ACTIVE) values 
(hibernate_sequence.nextval,'AMER',sysdate,null,sysdate,1,sysdate,sysdate,1)

 INFO 22-May-14 15:28:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:28:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 15:28:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:28:13 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 15:28:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




update msa set d_active=0 where st='QU'

 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





update domain_rule set d_active=0 where business_unit_info='AMER' AND predicate in (select id from domain_predicate where business_unit_info='AMER' and system_defined_condition_name in ('claimTravelDuplicacyCondition','jobCodeValidator','campaignCostCategoryValidator'))

 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

update domain_predicate set d_active=0 where business_unit_info='AMER' AND system_defined_condition_name in ('claimTravelDuplicacyCondition','jobCodeValidator','campaignCostCategoryValidator')

 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 







DECLARE
v_rec1 NUMBER;
v_rec2 NUMBER;
v_seq_val NUMBER;
CURSOR c1
IS
                SELECT DISTINCT cci.campaign_coverage FROM campaign_coverage_items cci, campaign_coverage cc
WHERE  cc.id=cci.CAMPAIGN_COVERAGE
AND cc.d_internal_Comments ='AMER- Data MIGRATION';
CURSOR c2(v_rec1 number) IS
                SELECT items FROM campaign_coverage_items WHERE campaign_coverage=v_rec1;
BEGIN
                FOR i1 IN c1
                LOOP
                                SELECT CAMPAIGN_SN_COVERAGE_SEQ.NEXTVAL INTO v_seq_val FROM dual;
                                SELECT DISTINCT(campaign_coverage) INTO v_rec1 FROM campaign_coverage_items WHERE campaign_coverage=i1.campaign_coverage;
                                INSERT INTO CAMPAIGN_SNO_COVERAGE VALUES(v_seq_val);
                                UPDATE campaign_coverage SET SERIAL_NUMBER_COVERAGE=v_seq_val WHERE id=i1.campaign_coverage;
                                FOR i2 IN c2(v_rec1)
                                                LOOP
                                                                INSERT INTO campaign_sno_coverage_items VALUES(v_seq_val,i2.items);
                                                END LOOP;
                END LOOP;
				commit;
END;
 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




delete from ROLE_PERMISSION_MAPPING where SUBJECT_AREA in (select id from MST_ADMIN_SUBJECT_AREA where name in ('BUConfigurations','ClaimSubmissionandProcessing','FieldModifications','Inventory','PartReturnManagement','Read-OnlyAccesstoSLMS','Registration/Transfer','Reports','WarrantyAdmin'))

 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

delete from SUBJECT_FUNC_AREA_MAPPING where SUBJECT_AREA in (select id from MST_ADMIN_SUBJECT_AREA where name in ('BUConfigurations','ClaimSubmissionandProcessing','FieldModifications','Inventory','PartReturnManagement','Read-OnlyAccesstoSLMS','Registration/Transfer','Reports','WarrantyAdmin'))

 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

delete from MST_ADMIN_FNC_AREA where name in ('additionalAttributes','bUConfigurationsSetup','claimTab','costCategoryConfiguration','createCustomer','createLabelsforinventory','createWarrantyClaimDealer','createWarrantyClaimProcessor',
'dataManagement','dealerGroups','defineClaimSearchQuery','defineInventorySearchQuery','definePartReturnSearchQuery','deliveryReport','eligility','emailNotification','extensionforApproval',
'fieldModificationsTab','fieldNotification','inventoryTab','listModels','listOfValues','maintainUOMMappings','manageAdditionalLabour','manageAlarmCode','manageBusinessCondition',
'manageBusinessConfigurations','manageBusinessRule','manageBusinessRuleGroups','manageClaimPayment','manageCustomReports','manageFailureStructure','manageFlatRates','manageFreight/Shippers',
'manageGroups','manageInclusiveJobCodes','manageLOASchemes','manageLaborSplit','manageUploads/Download','manageUserAvailability','manageWarehouses','manageWarrantyPolicies','miscellaneousParts',
'multiClaimMaintenance','partReturnConfiguration','partReturnTab','pendingFieldModificationUpdate','preDefinedClaimSearch','preDefinedFPISearch','preDefinedInventorySearch',
'preDefinedPartReturnsSearch','predefinedSearch(Items)','quickInventorySearch','reOpenClaim','readOnlyAccesstoSLMS','reducedCoverage','registerMajorComponent','reportTab',
'requests','retailsearch','stock/Retail','stocksearch','submitFieldModificationClaim','switchUser','viewLabels','viewSupplier','waiveLateFee','warrantyAdminTab')

ERROR 22-May-14 15:28:14 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-02292: integrity constraint (NMHG_QA_P2.ROLE_PERM_MAP_FNC_AREA_FK) violated - child record found

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-02292: integrity constraint (NMHG_QA_P2.ROLE_PERM_MAP_FNC_AREA_FK) violated - child record found

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-02292: integrity constraint (NMHG_QA_P2.ROLE_PERM_MAP_FNC_AREA_FK) violated - child record found

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-May-14 15:28:14 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-May-14 15:28:14 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-May-14 16:05:13 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:05:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




delete from ROLE_PERMISSION_MAPPING where SUBJECT_AREA in (select id from MST_ADMIN_SUBJECT_AREA where name in ('BUConfigurations','ClaimSubmissionandProcessing','FieldModifications','Inventory','PartReturnManagement','Read-OnlyAccesstoSLMS','Registration/Transfer','Reports','WarrantyAdmin'))

 INFO 22-May-14 16:05:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:05:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

delete from SUBJECT_FUNC_AREA_MAPPING where SUBJECT_AREA in (select id from MST_ADMIN_SUBJECT_AREA where name in ('BUConfigurations','ClaimSubmissionandProcessing','FieldModifications','Inventory','PartReturnManagement','Read-OnlyAccesstoSLMS','Registration/Transfer','Reports','WarrantyAdmin'))

 INFO 22-May-14 16:05:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:05:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

DELETE  FROM MST_ADMIN_FNC_AREA a
WHERE NOT  EXISTS (SELECT 1 FROM role_permission_mapping b WHERE b.FUNCTIONAL_AREA=a.id )
AND name in ('additionalAttributes','bUConfigurationsSetup','claimTab','costCategoryConfiguration','createCustomer','createLabelsforinventory','createWarrantyClaimDealer','createWarrantyClaimProcessor',
'dataManagement','dealerGroups','defineClaimSearchQuery','defineInventorySearchQuery','definePartReturnSearchQuery','deliveryReport','eligility','emailNotification','extensionforApproval',
'fieldModificationsTab','fieldNotification','inventoryTab','listModels','listOfValues','maintainUOMMappings','manageAdditionalLabour','manageAlarmCode','manageBusinessCondition',
'manageBusinessConfigurations','manageBusinessRule','manageBusinessRuleGroups','manageClaimPayment','manageCustomReports','manageFailureStructure','manageFlatRates','manageFreight/Shippers',
'manageGroups','manageInclusiveJobCodes','manageLOASchemes','manageLaborSplit','manageUploads/Download','manageUserAvailability','manageWarehouses','manageWarrantyPolicies','miscellaneousParts',
'multiClaimMaintenance','partReturnConfiguration','partReturnTab','pendingFieldModificationUpdate','preDefinedClaimSearch','preDefinedFPISearch','preDefinedInventorySearch',
'preDefinedPartReturnsSearch','predefinedSearch(Items)','quickInventorySearch','reOpenClaim','readOnlyAccesstoSLMS','reducedCoverage','registerMajorComponent','reportTab',
'requests','retailsearch','stock/Retail','stocksearch','submitFieldModificationClaim','switchUser','viewLabels','viewSupplier','waiveLateFee','warrantyAdminTab') 


ERROR 22-May-14 16:05:13 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-02292: integrity constraint (NMHG_QA_P2.SUBJ_FUNC_MAP_FUNC_ID) violated - child record found

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-02292: integrity constraint (NMHG_QA_P2.SUBJ_FUNC_MAP_FUNC_ID) violated - child record found

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-02292: integrity constraint (NMHG_QA_P2.SUBJ_FUNC_MAP_FUNC_ID) violated - child record found

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-May-14 16:05:13 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-May-14 16:05:13 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-May-14 16:19:16 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:19:17 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:19:17 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





INSERT INTO MST_ADMIN_SUBJECT_AREA values(MST_ADMIN_SUBJECT_AREA_seq.nextval, 'warrantyAdmin', 'Warranty Admin')

 INFO 22-May-14 16:19:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_SUBJECT_AREA values(MST_ADMIN_SUBJECT_AREA_seq.nextval, 'claims', 'Claims')

 INFO 22-May-14 16:19:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_SUBJECT_AREA values(MST_ADMIN_SUBJECT_AREA_seq.nextval, 'inventory', 'Inventory')

 INFO 22-May-14 16:19:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_SUBJECT_AREA values(MST_ADMIN_SUBJECT_AREA_seq.nextval, 'fPI', 'FPI')

 INFO 22-May-14 16:19:22 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:22 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_SUBJECT_AREA values(MST_ADMIN_SUBJECT_AREA_seq.nextval, 'partReturns', 'Part Returns')

 INFO 22-May-14 16:19:22 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:22 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_SUBJECT_AREA values(MST_ADMIN_SUBJECT_AREA_seq.nextval, 'partsRecovery', 'Parts Recovery')

 INFO 22-May-14 16:19:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_SUBJECT_AREA values(MST_ADMIN_SUBJECT_AREA_seq.nextval, 'processorRecovery', 'Processor Recovery')

 INFO 22-May-14 16:19:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_SUBJECT_AREA values(MST_ADMIN_SUBJECT_AREA_seq.nextval, 'contractAdmin', 'Contract Admin')

 INFO 22-May-14 16:19:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_SUBJECT_AREA values(MST_ADMIN_SUBJECT_AREA_seq.nextval, 'items', 'Items')

 INFO 22-May-14 16:19:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_SUBJECT_AREA values(MST_ADMIN_SUBJECT_AREA_seq.nextval, 'reports', 'Reports')

 INFO 22-May-14 16:19:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_SUBJECT_AREA values(MST_ADMIN_SUBJECT_AREA_seq.nextval, 'dealerInformation', 'Dealer Information')

 INFO 22-May-14 16:19:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_SUBJECT_AREA values(MST_ADMIN_SUBJECT_AREA_seq.nextval, 'dRApproval/Transfer', 'DR Approval/Transfer')

 INFO 22-May-14 16:19:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_SUBJECT_AREA values(MST_ADMIN_SUBJECT_AREA_seq.nextval, 'settings', 'Settings')

 INFO 22-May-14 16:19:28 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:28 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_SUBJECT_AREA values(MST_ADMIN_SUBJECT_AREA_seq.nextval, 'accounts', 'Accounts')

 INFO 22-May-14 16:19:28 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:28 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 


INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminWarrantyAdminTab', 'Warranty Admin Tab')

 INFO 22-May-14 16:19:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageBusinessConfigurations', 'Manage Business Configurations')

 INFO 22-May-14 16:19:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageWarrantyPolicies', 'Manage Warranty Policies')

 INFO 22-May-14 16:19:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminPolicyDefinition', 'Policy Definition')

 INFO 22-May-14 16:19:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageFlatRates', 'Manage Flat Rates')

 INFO 22-May-14 16:19:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminLaborRates', 'Labor Rates')

 INFO 22-May-14 16:19:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminTravelRates', 'Travel Rates')

 INFO 22-May-14 16:19:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminItemPriceModifiers', 'Item Price Modifiers')

 INFO 22-May-14 16:19:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManagePartsCost', 'Manage Parts Cost')

 INFO 22-May-14 16:19:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminPartReturnConfiguration', 'Part Return Configuration')

 INFO 22-May-14 16:19:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageStateMandates', 'Manage State Mandates')

 INFO 22-May-14 16:19:33 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:33 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageClaimPayment', 'Manage Claim Payment')

 INFO 22-May-14 16:19:33 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:33 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminCreateClaimPaymentModifier', 'Create Claim Payment Modifier')

 INFO 22-May-14 16:19:34 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:34 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminConfigureClaimPaymentDefinition', 'Configure Claim Payment Definition')

 INFO 22-May-14 16:19:34 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:34 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageFailureStructure', 'Manage Failure Structure')

 INFO 22-May-14 16:19:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminSeriesFailureHierarchy', 'Series Failure Hierarchy')

 INFO 22-May-14 16:19:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminListFaultLocations', 'List Fault Locations')

 INFO 22-May-14 16:19:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminListServiceProcedures', 'List Service Procedures')

 INFO 22-May-14 16:19:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminFaultFound/CausedByAssociation', 'FaultFound/CausedBy Association')

 INFO 22-May-14 16:19:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminMaintainFailureDetailofFailureURL', 'Maintain Failure Detail of Failure URL')

 INFO 22-May-14 16:19:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageGroups', 'Manage Groups')

 INFO 22-May-14 16:19:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminItemGroups', 'Item Groups')

 INFO 22-May-14 16:19:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminDealerGroups', 'Dealer Groups')

 INFO 22-May-14 16:19:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminUserGroups', 'User Groups')

 INFO 22-May-14 16:19:39 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:39 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageBusinessRuleGroups', 'Manage Business Rule Groups')

 INFO 22-May-14 16:19:39 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:39 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminClaimsProcessing', 'Claims Processing')

 INFO 22-May-14 16:19:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminClaimProcessorRouting', 'Claim Processor Routing')

 INFO 22-May-14 16:19:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminDSMRouting', 'DSM Routing')

 INFO 22-May-14 16:19:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminAdvisorRouting', 'Advisor Routing')

 INFO 22-May-14 16:19:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageBusinessRules', 'Manage Business Rules')

 INFO 22-May-14 16:19:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminEntryValidations', 'Entry Validations')

 INFO 22-May-14 16:19:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminProcessorAuthority', 'Processor Authority')

 INFO 22-May-14 16:19:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageBusinessConditions', 'Manage Business Conditions')

 INFO 22-May-14 16:19:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminWarrantyBusinessConditions', 'Warranty Business Conditions')

 INFO 22-May-14 16:19:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageUserAvailability', 'Manage User Availability')

 INFO 22-May-14 16:19:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminProcessor', 'Processor')

 INFO 22-May-14 16:19:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminDSM', 'DSM')

 INFO 22-May-14 16:19:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminDSMAdvisor', 'DSM Advisor')

 INFO 22-May-14 16:19:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminRecoveryProcessor', 'Recovery Processor')

 INFO 22-May-14 16:19:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminFieldProductImprovement', 'Field Product Improvement')

 INFO 22-May-14 16:19:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminRelatedFPIsManagement', 'Related FPIs Management')

 INFO 22-May-14 16:19:46 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:46 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageWarehouses', 'Manage Warehouses')

 INFO 22-May-14 16:19:46 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:46 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminListOfValues', 'List Of Values')

 INFO 22-May-14 16:19:46 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:46 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageDisplayedFaultCode', 'Manage Displayed Fault Code')

 INFO 22-May-14 16:19:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminAdditionalAttributes', 'Additional Attributes')

 INFO 22-May-14 16:19:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminCreate/UpdateAttributes', 'Create/Update Attributes')

 INFO 22-May-14 16:19:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminAssociate/DissociatePartAttributes', 'Associate/Dissociate Part Attributes')

 INFO 22-May-14 16:19:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'Associate/DissociateFlatRatesAttributes', 'Associate/Dissociate Flat Rates Attributes')

 INFO 22-May-14 16:19:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'Associate/DissociateClaimedInventoryAttributes', 'Associate/Dissociate Claimed Inventory Attributes')

 INFO 22-May-14 16:19:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminAssociate/DissociateClaimAttributes', 'Associate/Dissociate Claim Attributes')

 INFO 22-May-14 16:19:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageFreight/Shippers', 'Manage Freight/Shippers')

 INFO 22-May-14 16:19:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminViewSupplier', 'View Supplier')

 INFO 22-May-14 16:19:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminViewLabels', 'View Labels')

 INFO 22-May-14 16:19:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageLaborSplit', 'Manage Labor Split')

 INFO 22-May-14 16:19:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminCreateLabelsforinventory', 'Create Labels for inventory')

 INFO 22-May-14 16:19:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminCreateLabelsforModels', 'Create Labels for Models')

 INFO 22-May-14 16:19:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminMiscellaneousParts', 'Miscellaneous Parts')

 INFO 22-May-14 16:19:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageMiscellaneousParts', 'Manage Miscellaneous Parts')

 INFO 22-May-14 16:19:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminConfigureMiscellaneousParts', 'Configure Miscellaneous Parts')

 INFO 22-May-14 16:19:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminCostCategoryConfiguration', 'Cost Category Configuration')

 INFO 22-May-14 16:19:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageLOASchemes', 'Manage LOA Schemes')

 INFO 22-May-14 16:19:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'warrantyAdminManageAdditionalLaborEligibility', 'Manage Additional Labor Eligibility')

 INFO 22-May-14 16:19:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsClaimTab', 'Claim Tab')

 INFO 22-May-14 16:19:57 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:57 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsMultiClaimMaintenance', 'Multi Claim Maintenance')

 INFO 22-May-14 16:19:57 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:57 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsClaimAttributes', 'Claim Attributes')

 INFO 22-May-14 16:19:58 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:58 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsTransfer/Re-process', 'Transfer/Re-process')

 INFO 22-May-14 16:19:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:19:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsAdviceRequest', 'Advice Request')

 INFO 22-May-14 16:20:00 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:00 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsAppeals', 'Appeals')

 INFO 22-May-14 16:20:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsDraftClaim', 'Draft Claim')

 INFO 22-May-14 16:20:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsForwardedExternally', 'Forwarded Externally')

 INFO 22-May-14 16:20:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsForwardedInternally', 'Forwarded Internally')

 INFO 22-May-14 16:20:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsInProgress', 'In Progress')

 INFO 22-May-14 16:20:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsOnHoldForPartReturn', 'On Hold For Part Return')

 INFO 22-May-14 16:20:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsPartShippedNotReceived', 'Part Shipped Not Received')

 INFO 22-May-14 16:20:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsPendingAuthorization', 'Pending Authorization')

 INFO 22-May-14 16:20:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsNew', 'New')

 INFO 22-May-14 16:20:06 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:06 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsRejectedPartReturn', 'Rejected Part Return')

 INFO 22-May-14 16:20:06 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:06 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsReplies', 'Replies')

 INFO 22-May-14 16:20:06 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:06 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsServiceManagerReview', 'Service Manager Review')

 INFO 22-May-14 16:20:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsTransferred', 'Transferred')

 INFO 22-May-14 16:20:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsWaitingForLabor', 'WaitingForLabor')

 INFO 22-May-14 16:20:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsPendingRecoveryInitiation', 'Pending Recovery Initiation')

 INFO 22-May-14 16:20:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsDefineSearchQuery', 'Define Search Query')

 INFO 22-May-14 16:20:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'claimsPredefinedSearch', 'Predefined Search')

 INFO 22-May-14 16:20:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'inventoryInventoryTab', 'Inventory Tab')

 INFO 22-May-14 16:20:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'inventoryStock', 'Stock')

 INFO 22-May-14 16:20:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'inventoryRetailed', 'Retailed')

 INFO 22-May-14 16:20:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'inventoryDefineSearchQuery', 'Define Search Query')

 INFO 22-May-14 16:20:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'inventoryPredefinedStockSearch', 'Predefined Stock Search')

 INFO 22-May-14 16:20:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'inventoryPredefinedRetailSearch', 'Predefined Retail Search')

 INFO 22-May-14 16:20:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:08 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'fPIFPITab', 'FPI Tab')

 INFO 22-May-14 16:20:09 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:09 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'fPIPendingFPIUpdateRequests', 'Pending FPI Update Requests')

 INFO 22-May-14 16:20:09 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:09 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'fPIPredefinedSearch', 'Predefined Search')

 INFO 22-May-14 16:20:09 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:09 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partReturnsPartReturnsTab', 'Part Returns Tab')

 INFO 22-May-14 16:20:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partReturnsDuePartsReceipt', 'Due Parts Receipt')

 INFO 22-May-14 16:20:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partReturnsDuePartsInspection', 'Due Parts Inspection')

 INFO 22-May-14 16:20:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partReturnsAwaitingShipmentforDealer', 'Awaiting Shipment for Dealer')

 INFO 22-May-14 16:20:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partReturnsShipmentGeneratedForDealer', 'Shipment Generated For Dealer')

 INFO 22-May-14 16:20:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partReturnsDealerRequestedPartsShipped', 'Dealer Requested Parts Shipped')

 INFO 22-May-14 16:20:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partReturnsRequiredPartsfromDealer', 'Required Parts from Dealer')

 INFO 22-May-14 16:20:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partReturnsDealerRequestedPart', 'Dealer Requested Part')

 INFO 22-May-14 16:20:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partReturnsDefineSearchQuery', 'Define Search Query')

 INFO 22-May-14 16:20:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partReturnsPredefinedSearch', 'Predefined Search')

 INFO 22-May-14 16:20:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partsRecoveryPartsRecoveryTab', 'Parts Recovery Tab')

 INFO 22-May-14 16:20:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partsRecoveryAwaitingShipment', 'Awaiting Shipment')

 INFO 22-May-14 16:20:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partsRecoveryAwaitingShipmentToWarehouse', 'Awaiting Shipment To Warehouse')

 INFO 22-May-14 16:20:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partsRecoveryAwaitingShipmenttoSupplier', 'Awaiting Shipment to Supplier')

 INFO 22-May-14 16:20:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partsRecoverySupplierPartsShipped', 'Supplier Parts Shipped')

 INFO 22-May-14 16:20:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partsRecoveryShipmentGenerated', 'Shipment Generated')

 INFO 22-May-14 16:20:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'partsRecoveryPredefinedSearch', 'Predefined Search')

 INFO 22-May-14 16:20:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryProcessorRecoveryTab', 'Processor Recovery Tab')

 INFO 22-May-14 16:20:16 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:16 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryClaimsDueForRecovery', 'Claims Due For Recovery')

 INFO 22-May-14 16:20:17 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:17 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryNew', 'New')

 INFO 22-May-14 16:20:17 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:17 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryInProgress', 'In Progress')

 INFO 22-May-14 16:20:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryNotForRecoveryRequest', 'Not For Recovery Request')

 INFO 22-May-14 16:20:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryNotForRecoveryResponse', 'Not For Recovery Response')

 INFO 22-May-14 16:20:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryTransferred', 'Transferred')

 INFO 22-May-14 16:20:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryReopened', 'Reopened')

 INFO 22-May-14 16:20:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryClaimsUnderRecovery', 'Claims Under Recovery')

 INFO 22-May-14 16:20:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryDisputed', 'Disputed')

 INFO 22-May-14 16:20:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryAccepted', 'Accepted')

 INFO 22-May-14 16:20:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryAwaitingSupplierResponse', 'Awaiting Supplier Response')

 INFO 22-May-14 16:20:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryNotForRecovery', 'Not For Recovery')

 INFO 22-May-14 16:20:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryMultiClaimMaintenance', 'Multi Claim Maintenance')

 INFO 22-May-14 16:20:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryReadyForDebit', 'Ready For Debit')

 INFO 22-May-14 16:20:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryDefineSearchQuery', 'Define Search Query')

 INFO 22-May-14 16:20:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'processorRecoveryPreDefinedSearch', 'PreDefined Search')

 INFO 22-May-14 16:20:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'contractAdminContractAdminTab', 'Contract Admin Tab')

 INFO 22-May-14 16:20:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'contractAdminMaintainSupplierContracts', 'Maintain Supplier Contracts')

 INFO 22-May-14 16:20:20 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:20 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'contractAdminManageBusinessConditions', 'Manage Business Conditions')

 INFO 22-May-14 16:20:20 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:20 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'contractAdminManageBusinessRules', 'Manage Business Rules')

 INFO 22-May-14 16:20:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'contractAdminRecoveryClaimProcessorRouting', 'Recovery Claim Processor Routing')

 INFO 22-May-14 16:20:22 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:22 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'contractAdminManageSuppliers', 'Manage Suppliers')

 INFO 22-May-14 16:20:22 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:22 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'contractAdminViewPartSourceHistory', 'View Part Source History')

 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'contractAdminViewSupplier', 'View Supplier')

 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'contractAdminManageGroups', 'Manage Groups')

 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'contractAdminUserGroups', 'User Groups')

 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'itemsItemsTab', 'Items Tab')

 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'itemsDefinedSearchQuery', 'Defined Search Query')

 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'reportsReportsTab', 'Reports Tab')

 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'reportsVendorRecoveryReport', 'Vendor Recovery Report')

 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'reportsManageUploads/Downloads', 'Manage Uploads/Downloads')

 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'reportsUploadManagement', 'Upload Management')

 INFO 22-May-14 16:20:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'reportsDownloadManagement', 'Download Management')

 INFO 22-May-14 16:20:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'dealerInformationDealerSummary', 'Dealer Summary')

 INFO 22-May-14 16:20:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'dRApproval/TransferDRApproval/TransferTab', 'DR Approval/Transfer Tab')

 INFO 22-May-14 16:20:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'dRApproval/TransferDeliveryReport', 'Delivery Report')

 INFO 22-May-14 16:20:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'dRApproval/TransferDraft', 'Draft')

 INFO 22-May-14 16:20:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'dRApproval/TransferPendingforApproval', 'Pending for Approval')

 INFO 22-May-14 16:20:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'dRApproval/TransferForwardedToDealer', 'Forwarded To Dealer')

 INFO 22-May-14 16:20:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'dRApproval/TransferRejected', 'Rejected')

 INFO 22-May-14 16:20:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'dRApproval/TransferReplies', 'Replies')

 INFO 22-May-14 16:20:28 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:28 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'dRApproval/TransferResubmitted', 'Resubmitted')

 INFO 22-May-14 16:20:28 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:28 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'dRApproval/TransferUnitTransfer', 'Unit Transfer')

 INFO 22-May-14 16:20:28 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:28 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'dRApproval/TransferDeleted', 'Deleted')

 INFO 22-May-14 16:20:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'settingsSettingsTab', 'Settings Tab')

 INFO 22-May-14 16:20:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'settingsProfile', 'Profile')

 INFO 22-May-14 16:20:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'settingsUserManagement', 'User Management')

 INFO 22-May-14 16:20:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'settingsCreateUser', 'Create User')

 INFO 22-May-14 16:20:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'settingsUpdateUser', 'Update User')

 INFO 22-May-14 16:20:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'settingsSeriesReftoCertification', 'Series Ref to Certification')

 INFO 22-May-14 16:20:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'settingsCreateInternalUser', 'Create Internal User')

 INFO 22-May-14 16:20:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'settingsUpdateInternalUser', 'Update Internal User')

 INFO 22-May-14 16:20:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'settingsManageUserBusinessUnitMapping', 'Manage User Business Unit Mapping')

 INFO 22-May-14 16:20:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'settingsEmailSubscription', 'Email Subscription')

 INFO 22-May-14 16:20:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'settingsMapServiceProviderBusinessUnit', 'Map Service Provider Business Unit')

 INFO 22-May-14 16:20:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'settingsMapSupplierBusinessUnit', 'Map Supplier Business Unit')

 INFO 22-May-14 16:20:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'settingsManageRoles', 'Manage Roles')

 INFO 22-May-14 16:20:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'accountsAccountsTab', 'Accounts Tab')

 INFO 22-May-14 16:20:33 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:33 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'accountsRemoteInteractionsLogs', 'Remote Interactions Logs')

 INFO 22-May-14 16:20:33 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:33 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO MST_ADMIN_FNC_AREA VALUES  (MST_ADMIN_FNC_AREA_SEQ.nextval, 'accountsMonthEndScheduler', 'Month End Scheduler')

 INFO 22-May-14 16:20:33 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:33 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 


INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminWarrantyAdminTab'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:34 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:34 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageBusinessConfigurations'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:34 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:34 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageWarrantyPolicies'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:34 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:34 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminPolicyDefinition'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageFlatRates'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminLaborRates'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminTravelRates'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminItemPriceModifiers'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:35 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManagePartsCost'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminPartReturnConfiguration'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageStateMandates'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageClaimPayment'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminCreateClaimPaymentModifier'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminConfigureClaimPaymentDefinition'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageFailureStructure'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminSeriesFailureHierarchy'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminListFaultLocations'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminListServiceProcedures'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:39 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:39 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminFaultFound/CausedByAssociation'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminMaintainFailureDetailofFailureURL'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageGroups'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminItemGroups'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminDealerGroups'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminUserGroups'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageBusinessRuleGroups'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminClaimsProcessing'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminClaimProcessorRouting'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminDSMRouting'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminAdvisorRouting'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageBusinessRules'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminEntryValidations'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminProcessorAuthority'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageBusinessConditions'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminWarrantyBusinessConditions'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageUserAvailability'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminProcessor'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminDSM'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:46 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:46 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminDSMAdvisor'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminRecoveryProcessor'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminFieldProductImprovement'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminRelatedFPIsManagement'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageWarehouses'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminListOfValues'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageDisplayedFaultCode'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminAdditionalAttributes'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminCreate/UpdateAttributes'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminAssociate/DissociatePartAttributes'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='Associate/DissociateFlatRatesAttributes'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='Associate/DissociateClaimedInventoryAttributes'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminAssociate/DissociateClaimAttributes'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageFreight/Shippers'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminViewSupplier'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminViewLabels'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageLaborSplit'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminCreateLabelsforinventory'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminCreateLabelsforModels'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminMiscellaneousParts'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageMiscellaneousParts'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminConfigureMiscellaneousParts'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminCostCategoryConfiguration'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageLOASchemes'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageAdditionalLaborEligibility'),(select id from MST_ADMIN_SUBJECT_AREA where name='warrantyAdmin'))

 INFO 22-May-14 16:20:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsClaimTab'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsMultiClaimMaintenance'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsClaimAttributes'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsTransfer/Re-process'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsAdviceRequest'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsAppeals'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsDraftClaim'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsForwardedExternally'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsForwardedInternally'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsInProgress'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsOnHoldForPartReturn'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsPartShippedNotReceived'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsPendingAuthorization'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsNew'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsRejectedPartReturn'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsReplies'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsServiceManagerReview'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsTransferred'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsWaitingForLabor'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsPendingRecoveryInitiation'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsDefineSearchQuery'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='claimsPredefinedSearch'),(select id from MST_ADMIN_SUBJECT_AREA where name='claims'))

 INFO 22-May-14 16:20:57 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:20:57 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO SUBJECT_FUNC_AREA_MAPPING VALUES((select id from MST_ADMIN_FNC_AREA where name='inventoryInventoryTab'),(select id from MST_ADMIN_SUBJECT_AREA where name='inventory'))

ERROR 22-May-14 16:20:57 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01427: single-row subquery returns more than one row

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01427: single-row subquery returns more than one row

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-01427: single-row subquery returns more than one row

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-May-14 16:20:57 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-May-14 16:20:57 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-May-14 16:27:38 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:27:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

PURPOSE    : INSERT DATA - SUBJECT AREA, FUNCTIONAL AREA, SUBJECT FUNCTIONAL MAPPING
AUTHOR     : Chetan
CREATED ON : 30-APR-2014
SUBJECT AREA INSERT SCRIPTS




























FUNCTIONAL AREA INSERT SCRIPTS






















































































































































































































































































































































SUBJECT & FUNCTIONAL AREA MAP INSERT SCRIPTS






















































































































































































































































































































































ERROR 22-May-14 16:27:38 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00900: invalid SQL statement

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00900: invalid SQL statement

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00900: invalid SQL statement

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-May-14 16:27:38 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-May-14 16:27:38 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-May-14 16:28:26 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:28:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 
























































































































































































































































































































































































SUBJECT & FUNCTIONAL AREA MAP INSERT SCRIPTS






















































































































































































































































































































































ERROR 22-May-14 16:28:26 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00900: invalid SQL statement

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-00900: invalid SQL statement

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-00900: invalid SQL statement

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-May-14 16:28:26 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-May-14 16:28:26 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-May-14 16:28:49 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:28:50 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:28:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminWarrantyAdminTab'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminWarrantyAdminTab:update' from role where name in ('admin')

 INFO 22-May-14 16:28:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:28:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageBusinessConfigurations'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageBusinessConfigurations:update' from role where name in ('admin')

 INFO 22-May-14 16:28:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:28:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageWarrantyPolicies'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageWarrantyPolicies:update' from role where name in ('admin')

 INFO 22-May-14 16:28:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:28:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminPolicyDefinition'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminPolicyDefinition:update' from role where name in ('admin')

 INFO 22-May-14 16:28:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:28:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageFlatRates'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageFlatRates:update' from role where name in ('admin')

 INFO 22-May-14 16:28:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:28:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminLaborRates'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminLaborRates:update' from role where name in ('admin')

 INFO 22-May-14 16:28:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:28:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminTravelRates'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminTravelRates:update' from role where name in ('admin')

 INFO 22-May-14 16:28:57 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:28:57 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminItemPriceModifiers'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminItemPriceModifiers:update' from role where name in ('admin')

 INFO 22-May-14 16:28:58 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:28:58 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManagePartsCost'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManagePartsCost:update' from role where name in ('admin')

 INFO 22-May-14 16:28:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:28:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminPartReturnConfiguration'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminPartReturnConfiguration:update' from role where name in ('admin')

 INFO 22-May-14 16:29:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageStateMandates'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageStateMandates:update' from role where name in ('admin')

 INFO 22-May-14 16:29:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:01 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageClaimPayment'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageClaimPayment:update' from role where name in ('admin')

 INFO 22-May-14 16:29:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminCreateClaimPaymentModifier'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminCreateClaimPaymentModifier:update' from role where name in ('admin')

 INFO 22-May-14 16:29:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:02 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminConfigureClaimPaymentDefinition'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminConfigureClaimPaymentDefinition:update' from role where name in ('admin')

 INFO 22-May-14 16:29:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:03 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageFailureStructure'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageFailureStructure:update' from role where name in ('admin')

 INFO 22-May-14 16:29:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:04 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminSeriesFailureHierarchy'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminSeriesFailureHierarchy:update' from role where name in ('admin')

 INFO 22-May-14 16:29:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:05 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminListFaultLocations'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminListFaultLocations:update' from role where name in ('admin')

 INFO 22-May-14 16:29:06 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:06 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminListServiceProcedures'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminListServiceProcedures:update' from role where name in ('admin')

 INFO 22-May-14 16:29:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:07 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminFaultFound/CausedByAssociation'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminFaultFound/CausedByAssociation:update' from role where name in ('admin')

 INFO 22-May-14 16:29:09 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:09 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminMaintainFailureDetailofFailureURL'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminMaintainFailureDetailofFailureURL:update' from role where name in ('admin')

 INFO 22-May-14 16:29:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageGroups'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageGroups:update' from role where name in ('admin')

 INFO 22-May-14 16:29:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminItemGroups'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminItemGroups:update' from role where name in ('admin')

 INFO 22-May-14 16:29:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminDealerGroups'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminDealerGroups:update' from role where name in ('admin')

 INFO 22-May-14 16:29:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminUserGroups'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminUserGroups:update' from role where name in ('admin')

 INFO 22-May-14 16:29:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageBusinessRuleGroups'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageBusinessRuleGroups:update' from role where name in ('admin')

 INFO 22-May-14 16:29:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminClaimsProcessing'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminClaimsProcessing:update' from role where name in ('admin')

 INFO 22-May-14 16:29:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminClaimProcessorRouting'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminClaimProcessorRouting:update' from role where name in ('admin')

 INFO 22-May-14 16:29:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminDSMRouting'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminDSMRouting:update' from role where name in ('admin')

 INFO 22-May-14 16:29:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminAdvisorRouting'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminAdvisorRouting:update' from role where name in ('admin')

 INFO 22-May-14 16:29:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageBusinessRules'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageBusinessRules:update' from role where name in ('admin')

 INFO 22-May-14 16:29:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminEntryValidations'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminEntryValidations:update' from role where name in ('admin')

 INFO 22-May-14 16:29:16 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:16 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminProcessorAuthority'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminProcessorAuthority:update' from role where name in ('admin')

 INFO 22-May-14 16:29:16 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:16 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageBusinessConditions'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageBusinessConditions:update' from role where name in ('admin')

 INFO 22-May-14 16:29:17 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:17 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminWarrantyBusinessConditions'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminWarrantyBusinessConditions:update' from role where name in ('admin')

 INFO 22-May-14 16:29:17 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:17 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageUserAvailability'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageUserAvailability:update' from role where name in ('admin')

 INFO 22-May-14 16:29:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminProcessor'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminProcessor:update' from role where name in ('admin')

 INFO 22-May-14 16:29:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminDSM'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminDSM:update' from role where name in ('admin')

 INFO 22-May-14 16:29:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminDSMAdvisor'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminDSMAdvisor:update' from role where name in ('admin')

 INFO 22-May-14 16:29:20 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:20 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminRecoveryProcessor'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminRecoveryProcessor:update' from role where name in ('admin')

 INFO 22-May-14 16:29:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminFieldProductImprovement'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminFieldProductImprovement:update' from role where name in ('admin')

 INFO 22-May-14 16:29:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminRelatedFPIsManagement'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminRelatedFPIsManagement:update' from role where name in ('admin')

 INFO 22-May-14 16:29:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageWarehouses'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageWarehouses:update' from role where name in ('admin')

 INFO 22-May-14 16:29:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminListOfValues'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminListOfValues:update' from role where name in ('admin')

 INFO 22-May-14 16:29:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageDisplayedFaultCode'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageDisplayedFaultCode:update' from role where name in ('admin')

 INFO 22-May-14 16:29:22 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:22 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminAdditionalAttributes'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminAdditionalAttributes:update' from role where name in ('admin')

 INFO 22-May-14 16:29:22 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:22 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminCreate/UpdateAttributes'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminCreate/UpdateAttributes:update' from role where name in ('admin')

 INFO 22-May-14 16:29:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminAssociate/DissociatePartAttributes'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminAssociate/DissociatePartAttributes:update' from role where name in ('admin')

 INFO 22-May-14 16:29:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='Associate/DissociateFlatRatesAttributes'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:Associate/DissociateFlatRatesAttributes:update' from role where name in ('admin')

 INFO 22-May-14 16:29:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='Associate/DissociateClaimedInventoryAttributes'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:Associate/DissociateClaimedInventoryAttributes:update' from role where name in ('admin')

 INFO 22-May-14 16:29:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminAssociate/DissociateClaimAttributes'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminAssociate/DissociateClaimAttributes:update' from role where name in ('admin')

 INFO 22-May-14 16:29:28 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:28 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageFreight/Shippers'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageFreight/Shippers:update' from role where name in ('admin')

 INFO 22-May-14 16:29:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminViewSupplier'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminViewSupplier:update' from role where name in ('admin')

 INFO 22-May-14 16:29:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminViewLabels'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminViewLabels:update' from role where name in ('admin')

 INFO 22-May-14 16:29:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageLaborSplit'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageLaborSplit:update' from role where name in ('admin')

 INFO 22-May-14 16:29:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:30 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminCreateLabelsforinventory'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminCreateLabelsforinventory:update' from role where name in ('admin')

 INFO 22-May-14 16:29:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminCreateLabelsforModels'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminCreateLabelsforModels:update' from role where name in ('admin')

 INFO 22-May-14 16:29:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminMiscellaneousParts'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminMiscellaneousParts:update' from role where name in ('admin')

 INFO 22-May-14 16:29:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageMiscellaneousParts'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageMiscellaneousParts:update' from role where name in ('admin')

 INFO 22-May-14 16:29:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminConfigureMiscellaneousParts'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminConfigureMiscellaneousParts:update' from role where name in ('admin')

 INFO 22-May-14 16:29:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:32 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminCostCategoryConfiguration'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminCostCategoryConfiguration:update' from role where name in ('admin')

 INFO 22-May-14 16:29:34 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:34 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageLOASchemes'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageLOASchemes:update' from role where name in ('admin')

 INFO 22-May-14 16:29:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:36 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='warrantyAdminManageAdditionalLaborEligibility'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='warrantyAdmin'),'warrantyAdmin:warrantyAdminManageAdditionalLaborEligibility:update' from role where name in ('admin')

 INFO 22-May-14 16:29:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:37 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsClaimTab'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsClaimTab:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:38 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsMultiClaimMaintenance'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsMultiClaimMaintenance:update' from role where name in ('admin','processor','inventoryAdmin')

 INFO 22-May-14 16:29:39 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:39 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsClaimAttributes'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsClaimAttributes:update' from role where name in ('admin','processor','inventoryAdmin')

 INFO 22-May-14 16:29:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:40 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsTransfer/Re-process'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsTransfer/Re-process:update' from role where name in ('admin','processor','inventoryAdmin')

 INFO 22-May-14 16:29:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsAdviceRequest'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsAdviceRequest:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsAppeals'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsAppeals:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:43 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsDraftClaim'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsDraftClaim:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:44 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsForwardedExternally'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsForwardedExternally:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:45 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsForwardedInternally'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsForwardedInternally:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:46 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:46 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsInProgress'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsInProgress:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:47 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsOnHoldForPartReturn'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsOnHoldForPartReturn:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:48 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsPartShippedNotReceived'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsPartShippedNotReceived:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:49 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsPendingAuthorization'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsPendingAuthorization:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsNew'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsNew:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:50 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsRejectedPartReturn'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsRejectedPartReturn:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:51 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsReplies'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsReplies:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsServiceManagerReview'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsServiceManagerReview:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsTransferred'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsTransferred:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsWaitingForLabor'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsWaitingForLabor:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsPendingRecoveryInitiation'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsPendingRecoveryInitiation:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:55 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsDefineSearchQuery'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsDefineSearchQuery:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','admin','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:57 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:57 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='claimsPredefinedSearch'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='claims'),'claims:claimsPredefinedSearch:update' from role where name in ('baserole','processor','dsm','dsmAdvisor','recoveryProcessor','admin','cpAdvisor','dealerWarrantyAdmin','readOnly')

 INFO 22-May-14 16:29:58 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:29:58 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='inventoryInventoryTab'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='inventory'),'inventory:inventoryInventoryTab:update' from role where name in ('inventorysearch','inventorylisting','inventoryAdmin','admin','readOnly')

ERROR 22-May-14 16:29:58 tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01427: single-row subquery returns more than one row

tavant.platform.tools.dbPatches.DbPatchException: java.sql.SQLException: ORA-01427: single-row subquery returns more than one row

	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:71)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
Caused by: java.sql.SQLException: ORA-01427: single-row subquery returns more than one row

	at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:189)
	at oracle.jdbc.ttc7.TTIoer.processError(TTIoer.java:242)
	at oracle.jdbc.ttc7.Oall7.receive(Oall7.java:554)
	at oracle.jdbc.ttc7.TTC7Protocol.doOall7(TTC7Protocol.java:1478)
	at oracle.jdbc.ttc7.TTC7Protocol.parseExecuteFetch(TTC7Protocol.java:888)
	at oracle.jdbc.driver.OracleStatement.executeNonQuery(OracleStatement.java:2076)
	at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java:1986)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:2697)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1100)
	at tavant.platform.tools.dbPatches.SqlCommand.execute(SqlCommand.java:20)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:68)
	... 4 more
ERROR 22-May-14 16:29:58 tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
tavant.platform.tools.dbPatches.DbPatchException: Unable to locate file D:\NMHG_DEV_PHASE2\dbpatches\SLMS2Patches\tavant\dbPatches\benignErrorsFile.txt
	at tavant.platform.tools.dbPatches.core.FileSystemDbPatchLoader.loadResource(FileSystemDbPatchLoader.java:98)
	at tavant.platform.tools.dbPatches.core.DbPatchLoader.getBenignError(DbPatchLoader.java:108)
	at tavant.platform.tools.dbPatches.BenignErrors.loadBenignErrors(BenignErrors.java:69)
	at tavant.platform.tools.dbPatches.BenignErrors.<init>(BenignErrors.java:38)
	at tavant.platform.tools.dbPatches.BenignErrors.getBenignErrors(BenignErrors.java:48)
	at tavant.platform.tools.dbPatches.SqlCommandFile.isUnexpectedException(SqlCommandFile.java:103)
	at tavant.platform.tools.dbPatches.SqlCommandFile.execute(SqlCommandFile.java:72)
	at tavant.platform.tools.dbPatches.SqlCommandFile.apply(SqlCommandFile.java:51)
	at tavant.platform.tools.dbPatches.VersionManager.apply(VersionManager.java:159)
	at tavant.platform.tools.dbPatches.VersionManager.dbPatchApply(VersionManager.java:372)
	at tavant.platform.tools.dbPatches.Main.main(Main.java:78)
ERROR 22-May-14 16:29:58 tavant.platform.tools.dbPatches.SqlCommandFile: Failure in execution.
 INFO 22-May-14 16:36:12 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:36:13 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:36:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





update cost_category set d_active=0  where name in('Meals','Parking','Miscellaneous Parts','Per Diem','Rental Charges','Other Freight And Duty','Tolls','Local Purchase')

 INFO 22-May-14 16:36:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

update section set d_active=0 where name in('Meals','Parking','Miscellaneous Parts','Per Diem','Rental Charges','Other Freight And Duty','Tolls','Local Purchase')

 INFO 22-May-14 16:36:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 16:36:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:15 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:36:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




update config_param set display_name = 'Enable EPP Purchase' where name = 'canExternalUserPurchaseExtendedWarranty'

 INFO 22-May-14 16:36:17 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:17 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

update config_param set display_name = 'Date from which EPP Purchase will start' where name = 'dateConsideredForEWP'

 INFO 22-May-14 16:36:17 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:17 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

update config_param set display_name = 'EPP Purchase Logic Driven by' where name = 'dateConsideredForExtendedPlanAvailability'

 INFO 22-May-14 16:36:17 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:17 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

update config_param set display_name = 'Is EPP Price Check Enabled' where name = 'extWarrantyPriceCheckEnabled'

 INFO 22-May-14 16:36:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

COMMIT

 INFO 22-May-14 16:36:18 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:19 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:36:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




update item_group set group_code='MACHINE' where 
name = 'Machine-MACHINE - US' and 
ITEM_GROUP_TYPE='PRODUCT TYPE' and BUSINESS_UNIT_INFO='AMER'

 INFO 22-May-14 16:36:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 16:36:19 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:20 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:36:20 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




update config_param set display_name = 'Is Miscellaneous Expense and Outside Services Section visible?' where name = 'isMiscPartsSectionVisible'

 INFO 22-May-14 16:36:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

COMMIT

 INFO 22-May-14 16:36:21 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:22 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:36:22 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





alter sequence TECHNICIAN_CERTIFICATION_SEQ increment by 20

 INFO 22-May-14 16:36:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:23 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:36:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




delete from ROLE_PERMISSION_MAPPING where subject_area in(select id from MST_ADMIN_SUBJECT_AREA where name='settings') and role_def_id in(select id from role where name in('dealerSalesAdministration','dealerWarrantyAdmin')) and functional_area in(select id from MST_ADMIN_FNC_AREA where name='settingsManageRoles')

 INFO 22-May-14 16:36:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 16:36:23 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:24 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:36:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='processorRecoveryPreDefinedSearch'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='processorRecovery'),'processorRecovery:processorRecoveryPreDefinedSearch:update' from role where name in ('supplier')

 INFO 22-May-14 16:36:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 16:36:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:24 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:36:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




update config_param set display_name='Allowed Dealer Marketing Group Codes For Filing Parts Claims' where name='allowedDealerMktgGroupCodes'

 INFO 22-May-14 16:36:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 16:36:24 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:25 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:36:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




delete from ROLE_PERMISSION_MAPPING where subject_area=(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings') and role_def_id in (select id from role where name in ('dealerAdministrator','SSDataAdmin')) and functional_area=(select id from MST_ADMIN_FNC_AREA where name='settingsUserManagement')

 INFO 22-May-14 16:36:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

delete from ROLE_PERMISSION_MAPPING where subject_area=(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings') and role_def_id in (select id from role where name in ('dealerAdministrator','SSDataAdmin')) and functional_area=(select id from MST_ADMIN_FNC_AREA where name='settingsCreateUser')

 INFO 22-May-14 16:36:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

delete from ROLE_PERMISSION_MAPPING where subject_area=(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings') and role_def_id in (select id from role where name in ('dealerAdministrator','SSDataAdmin')) and functional_area=(select id from MST_ADMIN_FNC_AREA where name='settingsUpdateUser')

 INFO 22-May-14 16:36:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

delete from ROLE_PERMISSION_MAPPING where subject_area=(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings') and role_def_id in (select id from role where name in ('dealerAdministrator','SSDataAdmin')) and functional_area=(select id from MST_ADMIN_FNC_AREA where name='settingsSeriesReftoCertification')

 INFO 22-May-14 16:36:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

delete from ROLE_PERMISSION_MAPPING where subject_area=(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings') and role_def_id in (select id from role where name in ('dealerAdministrator','SSDataAdmin')) and functional_area=(select id from MST_ADMIN_FNC_AREA where name='settingsCreateInternalUser')

 INFO 22-May-14 16:36:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

delete from ROLE_PERMISSION_MAPPING where subject_area=(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings') and role_def_id in (select id from role where name in ('dealerAdministrator','SSDataAdmin')) and functional_area=(select id from MST_ADMIN_FNC_AREA where name='settingsUpdateInternalUser')

 INFO 22-May-14 16:36:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:25 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='settingsUserManagement'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings'),'settings:settingsUserManagement:update' from role where name in ('internalUserAdmin')

 INFO 22-May-14 16:36:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='settingsCreateUser'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings'),'settings:settingsCreateUser:update' from role where name in ('internalUserAdmin')

 INFO 22-May-14 16:36:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:26 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='settingsUpdateUser'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings'),'settings:settingsUpdateUser:update' from role where name in ('internalUserAdmin')

 INFO 22-May-14 16:36:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:27 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='settingsSeriesReftoCertification'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings'),'settings:settingsSeriesReftoCertification:update' from role where name in ('internalUserAdmin')

 INFO 22-May-14 16:36:28 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:28 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='settingsCreateInternalUser'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings'),'settings:settingsCreateInternalUser:update' from role where name in ('internalUserAdmin')

 INFO 22-May-14 16:36:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:29 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='settingsUpdateInternalUser'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings'),'settings:settingsUpdateInternalUser:update' from role where name in ('internalUserAdmin')

 INFO 22-May-14 16:36:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 16:36:31 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:33 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:36:33 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




declare
v_consname varchar2(4000);
v_sql varchar2(4000);
begin  
  select constraint_name into v_consname 
  from user_constraints where table_name='COUNTY_CODE_MAPPING' and constraint_type='U';
  v_sql := 'alter table COUNTY_CODE_MAPPING drop constraint '|| v_consname;
  execute immediate v_sql;
  v_sql := 'drop index '|| v_consname;
  execute immediate v_sql;  
exception when others then
  dbms_output.put_line ('*** Exception when dropping index ***');
end;

 INFO 22-May-14 16:36:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 16:36:41 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:42 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:36:42 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 






alter table CAMPAIGN modify (description varchar2(4000 CHAR))

 INFO 22-May-14 16:36:46 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:46 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

alter table i18ncampaign_text modify (description varchar2(4000 CHAR))

 INFO 22-May-14 16:36:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 16:36:52 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:53 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:36:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




delete from ROLE_PERMISSION_MAPPING where subject_area in(select id from MST_ADMIN_SUBJECT_AREA where name='settings') and functional_area in(select id from MST_ADMIN_FNC_AREA where name='settingsManageRoles')

 INFO 22-May-14 16:36:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:53 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='settingsManageRoles'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings'),'settings:settingsManageRoles:update' from role where name in ('internalUserAdmin')

 INFO 22-May-14 16:36:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 16:36:54 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:56 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:36:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='partReturnsDefineSearchQuery'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='partReturns'),'partReturns:partReturnsDefineSearchQuery:update' from role where name in ('dealer')

 INFO 22-May-14 16:36:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:56 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='partReturnsPredefinedSearch'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='partReturns'),'partReturns:partReturnsPredefinedSearch:update' from role where name in ('dealer')

 INFO 22-May-14 16:36:57 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:57 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 16:36:57 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:57 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:36:57 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




UPDATE i18nupload_error_text SET description ='Invalid decision. Please choose either of [Accepted / Disputed / Part Return Requested ] ' WHERE upload_error IN (SELECT id FROM upload_error WHERE code='RC006')

 INFO 22-May-14 16:36:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

UPDATE i18nupload_error_text SET description ='Claim Amount Being Accepted is mandatory for the decision Accepted' WHERE upload_error IN (SELECT id FROM upload_error WHERE code='RC016')

 INFO 22-May-14 16:36:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:36:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 16:36:59 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:37:00 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:37:00 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




create or replace 
PROCEDURE   SUPPLIER_DECISION_VALIDATION AS

CURSOR all_rec IS
    SELECT * FROM stg_supplier_decision
    WHERE NVL(error_status,'N') = 'N'
        AND upload_status IS NULL
    ORDER BY id;

v_error_code VARCHAR2(4000) := NULL;
v_loop_count NUMBER := 0;
v_error VARCHAR2(4000) := NULL;
v_file_upload_mgt_id NUMBER := 0;
v_success_count NUMBER := 0;
v_error_count NUMBER := 0;
v_recovery_claim_id NUMBER := 0;
v_rec_claim_state VARCHAR2(255);
v_contract VARCHAR2(255);
v_reason_id NUMBER;
v_return_loc NUMBER;
v_valid VARCHAR2(10);
v_user_locale  VARCHAR2(10);
v_countDuplicate NUMBER;
v_maxNoOfDisputes NUMBER := 0;
v_noOfTimesClaimsDisputed NUMBER;
V_BUSINESS_UNIT VARCHAR(255) := NULL;

BEGIN

    BEGIN 
       SELECT file_upload_mgt_id  INTO v_file_upload_mgt_id 
       FROM stg_supplier_decision WHERE ROWNUM = 1;

       SELECT  o.locale, f.BUSINESS_UNIT_INFO 
		INTO  v_user_locale, V_BUSINESS_UNIT
       FROM file_upload_mgt f,org_user o 
       WHERE f.id=v_file_upload_mgt_id 
       AND o.id=f.uploaded_by ;

        SELECT VAL.VALUE into v_maxNoOfDisputes 
		FROM CONFIG_PARAM PARAM,CONFIG_VALUE VAL
		WHERE VAL.CONFIG_PARAM = PARAM.ID 
		AND PARAM.NAME  = 'maximumDisputeAllowed' 
		AND VAL.BUSINESS_UNIT_INFO = V_BUSINESS_UNIT
		AND VAL.ACTIVE = 1;

  FOR each_rec IN all_rec LOOP


      v_error_code:=NULL;
      v_recovery_claim_id := NULL;
      v_rec_claim_state := NULL;
      v_contract := NULL;
      v_reason_id := NULL;
      v_return_loc := NULL;
      v_valid :='N';
      v_countDuplicate :=0;
      v_noOfTimesClaimsDisputed :=0;

      IF each_rec.recovery_claim_number IS NULL THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC001');
      END IF;  
      IF each_rec.decision IS NULL THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC002');
      END IF;
      IF each_rec.decision_reason IS NULL AND ((trim(lower(each_rec.decision))= 'accepted') OR (trim(lower(each_rec.decision))= 'disputed')) THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC003');
      END IF;
      IF each_rec.supplier_comments IS NULL AND (trim(lower(each_rec.decision))= 'disputed') THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC004');
      END IF;
       IF each_rec.supplier_contract_code IS NULL THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC013');
      END IF;
      IF(trim(lower(each_rec.decision))= 'part return requested') AND (each_rec.part_return_request is NULL OR (trim(lower(each_rec.part_return_request))!='yes')) THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC014');
      END IF;
       IF each_rec.part_return_request IS NOT NULL AND (trim(lower(each_rec.part_return_request))='yes') AND each_rec.return_location_code is NULL THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC015');
      END IF;
	  IF each_rec.decision IS NOT NULL AND (trim(lower(each_rec.decision))= 'disputed') AND (trim(lower(each_rec.part_return_request))='yes') THEN
         v_error_code := common_utils.addErrorMessage(v_error_code, 'RC019');
      END IF;

      BEGIN 
          SELECT claim.id,claim.recovery_claim_state  into v_recovery_claim_id,v_rec_claim_state
          FROM  recovery_claim claim 
          WHERE claim.recovery_claim_number=each_rec.recovery_claim_number;

          BEGIN
              IF (v_rec_claim_state = 'IN_RECOVERY') 
                THEN v_valid :='Y';
              END IF;
          END;
           IF (v_valid = 'N') THEN
                    v_error_code := common_utils.addErrorMessage(v_error_code, 'RC008');
         END IF;
			SELECT rc.contract into v_contract 
			FROM recovery_claim rc,contract cntrct
			WHERE rc.recovery_claim_number=each_rec.recovery_claim_number AND rc.contract = cntrct.id;

			IF (v_contract != each_rec.supplier_contract_code) THEN
				v_error_code := common_utils.addErrorMessage(v_error_code, 'RC017');
			END IF;

       IF each_rec.return_location_code IS NOT NULL THEN 
          BEGIN
          SELECT count(1) into v_return_loc
          FROM supplier_locations loc,location l 
          WHERE loc.supplier in (SELECT c.supplier from contract c where c.id=each_rec.supplier_contract_code) and l.id=loc.locations
          and l.code=each_rec.return_location_code;

           IF v_return_loc=0 then           
                 v_error_code := common_utils.addErrorMessage(v_error_code, 'RC018');
           END IF;      
          END;
          END IF;

         SELECT count(*) INTO v_countDuplicate 
         FROM stg_supplier_decision 
         WHERE recovery_claim_number = each_rec.recovery_claim_number;

         IF (v_countDuplicate >1 ) THEN
            v_error_code := common_utils.addErrorMessage(v_error_code, 'RC011');
         END IF;  

        EXCEPTION WHEN NO_DATA_FOUND THEN
        v_error_code := common_utils.addErrorMessage(v_error_code, 'RC005');
      END ;


     IF(trim(lower(each_rec.decision))= 'accepted')
        THEN 
            BEGIN 
                  SELECT text.id INTO v_reason_id from  i18nlov_text text , list_of_values lov 
                  WHERE lov.type = 'RECOVERYCLAIMACCEPTANCEREASON' 
				  AND trim(lower(lov.state)) = 'active'
                  AND lov.id=text.list_of_i18n_values 
                  AND trim(lower(text.locale)) =trim(lower(v_user_locale))
                  AND trim(lower(text.description)) = trim(lower(each_rec.decision_reason))
				  AND LOV.BUSINESS_UNIT_INFO = V_BUSINESS_UNIT;
               EXCEPTION WHEN NO_DATA_FOUND THEN
                 v_error_code := common_utils.addErrorMessage(v_error_code, 'RC007');
           END;
		   BEGIN
           IF each_rec.claim_amount_being_accepted IS NOT NULL AND each_rec.claim_amount_being_accepted=0 THEN
           v_error_code := common_utils.addErrorMessage(v_error_code, 'RC016');
           END IF;
           END;
      ELSIF(trim(lower(each_rec.decision))= 'disputed')
      THEN 
         BEGIN 
                  SELECT count (*) INTO v_noOfTimesClaimsDisputed 
                  FROM REC_CLAIM_AUDIT audit1,RECOVERY_CLAIM claim 
                  WHERE audit1.FOR_RECOVERY_CLAIM = claim.ID
                  AND lower(audit1.RECOVERY_CLAIM_STATE) = 'rejected' 
                  AND claim.ID =  v_recovery_claim_id;


              IF(v_noOfTimesClaimsDisputed >=v_maxNoOfDisputes )
                THEN
                  v_error_code := common_utils.addErrorMessage(v_error_code, 'RC012');
              ELSE 
                   BEGIN 
                         SELECT text.id INTO v_reason_id from  i18nlov_text text , list_of_values lov 
                          WHERE lov.type = 'RECOVERYCLAIMREJECTIONREASON' 
						  AND trim(lower(lov.state)) = 'active' 
                          AND lov.id=text.list_of_i18n_values 
                          AND trim(lower(text.locale)) =trim(lower(v_user_locale))
                          AND trim(lower(text.description)) =trim(lower(each_rec.decision_reason))
						  AND LOV.BUSINESS_UNIT_INFO = V_BUSINESS_UNIT;
                           EXCEPTION WHEN NO_DATA_FOUND THEN
                           v_error_code := common_utils.addErrorMessage(v_error_code, 'RC009');
                    END;
              END IF;
          END;
      ELSIF(trim(lower(each_rec.decision))!= 'part return requested')
      THEN
        BEGIN 
           v_error_code := common_utils.addErrorMessage(v_error_code, 'RC006');
        END;
      END IF;

     IF v_error_code IS NULL THEN
       BEGIN
            UPDATE stg_supplier_decision SET
                 error_status='Y'
              WHERE id = each_rec.id;
              v_success_count:=v_success_count+1;

       END;
          ELSE
          BEGIN
               UPDATE stg_supplier_decision
               SET error_code=v_error_code, 
                  error_status = 'N' 
                  WHERE id = each_rec.id;
                 v_error_count:=v_error_count+1;

          END;
      END IF;

      v_loop_count := v_loop_count + 1;
  END LOOP;

  BEGIN 
       UPDATE file_upload_mgt SET 
            success_records= v_success_count, 
            error_records= v_error_count,
            total_records = v_loop_count
        WHERE id = v_file_upload_mgt_id;
  END;

   EXCEPTION WHEN OTHERS THEN 
   v_error_code:='INVALID DATA';
    END;
COMMIT;
END;


 INFO 22-May-14 16:37:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:37:10 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:37:10 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




ALTER TABLE STG_SUPPLIER_DECISION MODIFY CREDIT_MEMO_DATE VARCHAR2(255)

 INFO 22-May-14 16:37:11 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:37:12 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:37:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 





update config_param set display_name = 'Is Mislanious Parts Section is visible?' where name = 'isMiscPartsSectionVisible'

 INFO 22-May-14 16:37:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:37:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 16:37:12 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:37:13 tavant.platform.tools.dbPatches.VersionManager: Applying patch with purpose- Unknown purpose, by DBA
 INFO 22-May-14 16:37:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 




delete from ROLE_PERMISSION_MAPPING where subject_area=(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings') and role_def_id in (select id from role where name in ('internalUserAdmin')) and functional_area=(select id from MST_ADMIN_FNC_AREA where name='settingsCreateUser')

 INFO 22-May-14 16:37:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:37:13 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

delete from ROLE_PERMISSION_MAPPING where subject_area=(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings') and role_def_id in (select id from role where name in ('internalUserAdmin')) and functional_area=(select id from MST_ADMIN_FNC_AREA where name='settingsUpdateUser')

 INFO 22-May-14 16:37:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:37:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='settingsUserManagement'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings'),'settings:settingsUserManagement:update' from role where name in ('dealerWarrantyAdmin')

 INFO 22-May-14 16:37:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:37:14 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='settingsCreateUser'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings'),'settings:settingsCreateUser:update' from role where name in ('dealerWarrantyAdmin')

 INFO 22-May-14 16:37:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:37:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

INSERT INTO ROLE_PERMISSION_MAPPING select ROLE_PERMISSION_MAPPING_SEQ.nextval,id,(select id from MST_ADMIN_FNC_AREA where name='settingsUpdateUser'),(select id from MST_ADMIN_ACTION where action='update'),(select id from MST_ADMIN_SUBJECT_AREA WHERE name='settings'),'settings:settingsUpdateUser:update' from role where name in ('dealerWarrantyAdmin')

 INFO 22-May-14 16:37:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
 INFO 22-May-14 16:37:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executing following statement with Db Login ***NMHG_QA_P2***..... 

commit

 INFO 22-May-14 16:37:15 tavant.platform.tools.dbPatches.SqlCommandFile: Executed successfully.
