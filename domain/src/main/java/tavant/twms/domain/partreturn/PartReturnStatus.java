/*
 *   Copyright (c)2007 Tavant Technologies
 *   All Rights Reserved.
 *
 *   This software is furnished under a license and may be used and copied
 *   only  in  accordance  with  the  terms  of such  license and with the
 *   inclusion of the above copyright notice. This software or  any  other
 *   copies thereof may not be provided or otherwise made available to any
 *   other person. No title to and ownership of  the  software  is  hereby
 *   transferred.
 *
 *   The information in this software is subject to change without  notice
 *   and  should  not be  construed as a commitment  by Tavant Technologies.
 */
package tavant.twms.domain.partreturn;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.springframework.core.style.ToStringCreator;
import org.springframework.util.StringUtils;

/**
 * @author kannan.ekanath
 * 
 */
public enum PartReturnStatus {
	
	SUPPLIER_PART_RETURN_REQUESTED("Supplier Part Return Requested"),
	
	SUPPLIER_PART_RETURN_REJECTED("Supplier Part Return Rejected"),
	
	AWAITING_SHIPMENT_TO_WAREHOUSE("Awaiting Shipment to Warehouse"),
	// Part is in Supplier Parts Claimed Inbox of Part shipper
    PART_TO_BE_SHIPPED("Part to be shipped"),
    //wpra generated for the part
    WPRA_GENERATED("WPRA Generated"),
    //Parts moved to OverDue
    PART_MOVED_TO_OVERDUE("Part Moved To Overdue"),
    // Pressed Generate shipment button and yet to hit submit on shipment
    SHIPMENT_GENERATED("Shipment Generated"),
    //sent to ceva processor
    WAITING_FOR_CEVA_TRACKING_INFO("Waiting for CEVA tracking information"),
    // Part Cannot be shipped
    CANNOT_BE_SHIPPED("Cannot be Ship"),
    // Actual Shipment Made
    PART_SHIPPED("Part Shipped"),
    // Part Received by someone
    PART_RECEIVED("Part Received"),
    //No parts recieved.This status is only for part return audits
    PART_NOT_RECIEVED("Part Not Received"),
    // Marked for Inspection
    MARK_FOR_INSPECTION("Mark For Inspection"),
     // Marked as not recieved
    MARK_NOT_RECEIVED("Mark Not Received"),
    // Part has been accepted
    PART_ACCEPTED("Part Accepted"),
    // Part has been rejected
    PART_REJECTED("Part Rejected"),
    //If part marked as not received
    PART_NOT_RECEIVED_BY_SUPPLIER("Part Marked as not received by supplier and added back to Dealer Due part inbox"),
    //For shipment directly to supplier
    PART_RECEIVED_BY_SUPPLIER("Part Received by supplier"),
    //Part auto-confirmed
    PART_AUTO_CONFIRMED("Part auto-confirmed"),
    // Part removed by processor
    REMOVED_BY_PROCESSOR("Part Return Cancelled by Processor"),
    // Close this is no longer to be returned
    CLOSE("Closed"),
    
    PARTIALLY_SHIPMENT_GENERATED("Partially Shipment Generated"),
    
    PARTIALLY_SHIPPED("Partially Shipped"),
    
    PARTIALLY_RECEIVED("Partially Received"),
    
    PARTIALLY_INSPECTED("Partially Inspected"),

    PARTIALLY_ACCEPTED("Partially Accepted"),
    
    PARTIALLY_REJECTED("Partially Rejected"),

    SUP_PART_RETURN_NOT_INITIATED("Supplier Part Return Not Generated"),
    // Initial stage for supplier part return
    DUE_PART_TO_BE_GENERATED("Due Part to be Generated"),

    PART_TO_BE_SHIPPED_TO_DEALER("Part to be shipped to Dealer"),

    DEALER_PARTIALLY_REQUESTED("Dealer Partially Requested"),

    RETURN_TO_DEALER_NOT_REQUIRED("Return To Dealer Not Required"),

    NMHG_TO_DEALER_CANNOT_BE_SHIPPED("NMHG to dealer can not be shipped"),


    NMHG_TO_DEALER_PARTIALLY_SHIPMENT_GENERATED("Partially Shipment Generated"),

    NMHG_TO_DEALER_SHIPMENT_GENERATED("NMHG to dealer shipment generated"),

    NMHG_TO_DEALER_PART_SHIPPED("NMHG to dealer part shipped"),

    NMHG_TO_DEALER_PARTIALLY_SHIPPED("Partially Shipped"),

    PARTS_COLLECTED_BY_DEALER("Parts Collected By Dealer"),

    PARTS_NOT_COLLECTED_BY_DEALER("parts not collected by dealer"),

    PART_MARKED_AS_SCRAPPED("Part is scrapped"),

    //Part return to dealer cancelled as claim is being resubmitted
    RETURN_CANCELLED_AS_CLAIM_RESUBMITTED("Return cancelled as claim resubmitted"),

    //Parts marked as return to supplier by processor or inspector
    REJECTED_AND_MARKED_FOR_RETURN_TO_DEALER("Rejected and marked for return to dealer"),

    //UPDATED_CEVA_TRACKING_INFO("Updated CEVA tracking information"),

    //WAITING_FOR_CEVA_TRACKING_INFO_PARTIAL("Waiting for CEVA tracking partial information");

    //UPDATED_CEVA_TRACKING_INFO_PARTIAL("Updated CEVA tracking partial information");

    PARTS_TO_BE_SHIPPED_BY_SUPPLIER_TO_NMHG("Parts to be shipped to NMHG from supplier"),

    SHIPMENT_GENERATED_BY_SUPPLIER("Shipment Generated By Supplier for parts to be shipped back to NMHG"),

    PARTS_MARKED_AS_CAN_NOT_SHIPPED_BY_SUPPLIER("Parts marked as cannot be shipped by supplier"),

    PARTS_SHIPPED_BY_SUPPLIER_TO_NMHG("Parts shipped to NMHG by Supplier"),

    PARTS_RECEIVED_FROM_SUPPLIER("Parts Received At NMHG from Supplier"),

    PARTS_NOT_RECEIVED_FROM_SUPPLIER("Parts Not Received From Supplier"),

    PARTS_RECEIVED_AND_MARKED_FOR_INSPECTION("Parts marked as recevied and ready for inspection"),

    PARTS_RECEIVED_FROM_SUPPLIER_AND_INSPECTED("Parts received by NMHG from supplier and inspected"),

    PARTS_RECEIVED_FROM_SUPPLIER_MARKED_AS_ACCEPTED("Parts received From supplier marked as accepted"),

    PARTS_RECEIVED_FROM_SUPPLIER_MARKED_AS_REJECTED("Parts received from Supplier marked as Rejected"),

    PARTS_FROM_SUPPLIER_MARKED_AS_SCRAPPED("Parts Received from Supplier marked as scrapped");

	
    private String status;
    
    public static PartReturnStatus getPartReturnStatus(String status)
    {
        if(!StringUtils.hasText(status)){
            return null;
        }
        else if (AWAITING_SHIPMENT_TO_WAREHOUSE.status.equalsIgnoreCase(status))
        	return AWAITING_SHIPMENT_TO_WAREHOUSE;
        else if (PART_TO_BE_SHIPPED.status.equalsIgnoreCase(status))
    		return PART_TO_BE_SHIPPED;
    	else if (SHIPMENT_GENERATED.status.equalsIgnoreCase(status))
    		return SHIPMENT_GENERATED;
    	else if (CANNOT_BE_SHIPPED.status.equalsIgnoreCase(status))
    		return CANNOT_BE_SHIPPED;
    	else if (PART_SHIPPED.status.equalsIgnoreCase(status))
    		return PART_SHIPPED;
    	else if (PART_RECEIVED.status.equalsIgnoreCase(status))
    		return PART_RECEIVED;
    	else if (MARK_FOR_INSPECTION.status.equalsIgnoreCase(status))
    		return MARK_FOR_INSPECTION;
    	else if ( PART_ACCEPTED.status.equalsIgnoreCase(status))
    		return PART_ACCEPTED;
    	else if (PART_REJECTED.status.equalsIgnoreCase(status))
    		return PART_REJECTED;
    	else if (REMOVED_BY_PROCESSOR.status.equalsIgnoreCase(status))
    		return REMOVED_BY_PROCESSOR;
    	else if (CLOSE.status.equalsIgnoreCase(status))
    		return CLOSE;
    	else if (PARTIALLY_SHIPMENT_GENERATED.status.equalsIgnoreCase(status))
    		return PARTIALLY_SHIPMENT_GENERATED;
    	else if (PARTIALLY_SHIPPED.status.equalsIgnoreCase(status))
    		return PARTIALLY_SHIPPED;
    	else if (PARTIALLY_RECEIVED.status.equalsIgnoreCase(status))
    		return PARTIALLY_RECEIVED;
    	else if (PARTIALLY_INSPECTED.status.equalsIgnoreCase(status))
    		return PARTIALLY_INSPECTED;
    	else if (PARTIALLY_ACCEPTED.status.equalsIgnoreCase(status))
    		return PARTIALLY_ACCEPTED;
    	else if (PARTIALLY_REJECTED.status.equalsIgnoreCase(status))
    		return PARTIALLY_REJECTED;
    	else if (SUP_PART_RETURN_NOT_INITIATED.status.equalsIgnoreCase(status))
    		return SUP_PART_RETURN_NOT_INITIATED;
    	else if (DUE_PART_TO_BE_GENERATED.status.equalsIgnoreCase(status))
    		return DUE_PART_TO_BE_GENERATED;
        else if (MARK_NOT_RECEIVED.status.equalsIgnoreCase(status))
    		return MARK_NOT_RECEIVED;
         else if (PART_TO_BE_SHIPPED_TO_DEALER.status.equalsIgnoreCase(status))
    		return PART_TO_BE_SHIPPED_TO_DEALER;
        else if (DEALER_PARTIALLY_REQUESTED.status.equalsIgnoreCase(status))
    		return DEALER_PARTIALLY_REQUESTED;
        else if (NMHG_TO_DEALER_SHIPMENT_GENERATED.status.equalsIgnoreCase(status))
    		return NMHG_TO_DEALER_SHIPMENT_GENERATED;
        else if (NMHG_TO_DEALER_PART_SHIPPED.status.equalsIgnoreCase(status))
    		return NMHG_TO_DEALER_PART_SHIPPED;
        else if (RETURN_CANCELLED_AS_CLAIM_RESUBMITTED.status.equalsIgnoreCase(status))
    		return RETURN_CANCELLED_AS_CLAIM_RESUBMITTED;
        else if (WPRA_GENERATED.status.equalsIgnoreCase(status))
    		return WPRA_GENERATED;
        else if(PART_RECEIVED_BY_SUPPLIER.status.equalsIgnoreCase(status)){
            return PART_RECEIVED_BY_SUPPLIER;
        }
        else if(PART_NOT_RECEIVED_BY_SUPPLIER.status.equalsIgnoreCase(status)){
            return PART_NOT_RECEIVED_BY_SUPPLIER;
        }
        else if(WAITING_FOR_CEVA_TRACKING_INFO.status.equalsIgnoreCase(status)){
            return WAITING_FOR_CEVA_TRACKING_INFO;
        }
        else if(PARTS_COLLECTED_BY_DEALER.status.equalsIgnoreCase(status)){
            return PARTS_COLLECTED_BY_DEALER;
        }
        else if(PARTS_NOT_COLLECTED_BY_DEALER.status.equalsIgnoreCase(status)){
            return PARTS_NOT_COLLECTED_BY_DEALER;
        }
        else if(PART_MARKED_AS_SCRAPPED.status.equalsIgnoreCase(status)){
            return PART_MARKED_AS_SCRAPPED;
        }
        else if(PART_MOVED_TO_OVERDUE.status.equalsIgnoreCase(status)){
            return PART_MOVED_TO_OVERDUE;
        }
        //added in phase 2

        else if(PARTS_TO_BE_SHIPPED_BY_SUPPLIER_TO_NMHG.status.equalsIgnoreCase(status)){
            return PARTS_TO_BE_SHIPPED_BY_SUPPLIER_TO_NMHG;
        }
        else if(SHIPMENT_GENERATED_BY_SUPPLIER.status.equalsIgnoreCase(status)){
            return SHIPMENT_GENERATED_BY_SUPPLIER;
        }
        else if(PARTS_SHIPPED_BY_SUPPLIER_TO_NMHG.status.equalsIgnoreCase(status)){
            return PARTS_SHIPPED_BY_SUPPLIER_TO_NMHG;
        }
        else if(PARTS_MARKED_AS_CAN_NOT_SHIPPED_BY_SUPPLIER.status.equalsIgnoreCase(status)){
            return PARTS_MARKED_AS_CAN_NOT_SHIPPED_BY_SUPPLIER;
        }
        else if(PARTS_RECEIVED_FROM_SUPPLIER.status.equalsIgnoreCase(status)){
            return PARTS_RECEIVED_FROM_SUPPLIER;
        }
        else if(PARTS_RECEIVED_AND_MARKED_FOR_INSPECTION.status.equalsIgnoreCase(status)){
            return PARTS_RECEIVED_AND_MARKED_FOR_INSPECTION;
        }
        else if(PARTS_RECEIVED_FROM_SUPPLIER_AND_INSPECTED.status.equalsIgnoreCase(status)){
            return PARTS_RECEIVED_FROM_SUPPLIER_AND_INSPECTED;
        }
        else if(PARTS_RECEIVED_FROM_SUPPLIER_MARKED_AS_ACCEPTED.status.equalsIgnoreCase(status)){
            return PARTS_RECEIVED_FROM_SUPPLIER_MARKED_AS_ACCEPTED;
        }
        else if(PARTS_RECEIVED_FROM_SUPPLIER_MARKED_AS_REJECTED.status.equalsIgnoreCase(status)){
            return PARTS_RECEIVED_FROM_SUPPLIER_MARKED_AS_REJECTED;
        }
        else if(PARTS_FROM_SUPPLIER_MARKED_AS_SCRAPPED.status.equalsIgnoreCase(status)){
            return PARTS_FROM_SUPPLIER_MARKED_AS_SCRAPPED;
        }
        else
            throw new IllegalArgumentException("Cannot understand the Part Return Status");       
    }

    private PartReturnStatus(String status) {
        this.status = status;
    }

    /**
     * only for displaying purposes
     * 
     * @return
     */
    public String getStatus() {
        return this.status;
    }

    @Override
    public String toString() {
        return new ToStringCreator(this).append("status", this.status).toString();
    }

    public boolean isShipmentGenerated() {
        return ((this.ordinal()!=REMOVED_BY_PROCESSOR.ordinal())&& (this.ordinal() >= SHIPMENT_GENERATED.ordinal()));
    }

    public boolean isPartShipped() {
        return (this.ordinal()!=REMOVED_BY_PROCESSOR.ordinal() &&  this.ordinal() >= PART_SHIPPED.ordinal());
    }
    
    public static List<PartReturnStatus> getStatusListForSearch(boolean isInternalUser) {
    	List<PartReturnStatus> statusList = new ArrayList<PartReturnStatus>();
    	statusList.add(PART_TO_BE_SHIPPED);
    	statusList.add(CANNOT_BE_SHIPPED);
    	statusList.add(WPRA_GENERATED);
    	statusList.add(SHIPMENT_GENERATED);
    	statusList.add(PART_SHIPPED);
    	statusList.add(PART_RECEIVED);
    	statusList.add(PART_ACCEPTED);
    	statusList.add(PART_REJECTED);
        statusList.add(PART_TO_BE_SHIPPED_TO_DEALER);
        statusList.add(WAITING_FOR_CEVA_TRACKING_INFO);
        statusList.add(PARTS_COLLECTED_BY_DEALER);
        statusList.add(PARTS_NOT_COLLECTED_BY_DEALER);
        statusList.add(PART_MOVED_TO_OVERDUE);
    	
    	Collections.sort(statusList,new Comparator<PartReturnStatus>(){
				public int compare(PartReturnStatus arg0, PartReturnStatus arg1) {
					return arg0.status.compareToIgnoreCase(arg1.status);
				}
    		});
    	
    	return statusList;
    }

    public static List<PartReturnStatus> getShippedPartsStatus() {
    	List<PartReturnStatus> statusList = new ArrayList<PartReturnStatus>();
    	statusList.add(PartReturnStatus.PART_ACCEPTED);
    	statusList.add(PartReturnStatus.PART_REJECTED);
        //statusList.add(PARTIALLY_ACCEPTED);
        //statusList.add(PARTIALLY_REJECTED);

        Collections.sort(statusList,new Comparator<PartReturnStatus>(){
                public int compare(PartReturnStatus arg0, PartReturnStatus arg1) {
                    return arg0.status.compareToIgnoreCase(arg1.status);
                }
            });


        return statusList;
    }

}
